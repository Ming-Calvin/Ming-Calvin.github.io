<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ming-Calvin</title>
  
  <subtitle>一个前端程序员的博客</subtitle>
  <link href="https://ming-clavin.github.io/atom.xml" rel="self"/>
  
  <link href="https://ming-clavin.github.io/"/>
  <updated>2021-05-12T14:44:31.865Z</updated>
  <id>https://ming-clavin.github.io/</id>
  
  <author>
    <name>Ming-Clavin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML常用标签</title>
    <link href="https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/3.HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
    <id>https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/3.HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</id>
    <published>2021-05-12T14:42:16.000Z</published>
    <updated>2021-05-12T14:44:31.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h1><h2 id="1-标题标签-lt-h1-gt-lt-h6-gt"><a href="#1-标题标签-lt-h1-gt-lt-h6-gt" class="headerlink" title="1. 标题标签  &lt;h1&gt; - &lt;h6&gt;"></a>1. 标题标签  <code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 我是一级标题 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>作用：</strong>作为标题使用，并且依据重要性递减</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h4</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h5</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></pre></td></tr></table></figure><a id="more"></a><h2 id="2-段落标签"><a href="#2-段落标签" class="headerlink" title="2. 段落标签"></a>2. 段落标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 我是一个段落标签 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>作用：</strong>把 HTML 文档分割为若干段落</p><p><strong>注意：</strong></p><ul><li>文本在一个段落中会根据浏览器窗口的大小自动换行</li><li>段落和段落之间保有空隙</li></ul><h2 id="3-换行标签"><a href="#3-换行标签" class="headerlink" title="3. 换行标签"></a>3. 换行标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></pre></td></tr></table></figure><p><strong>作用：</strong>强制换行</p><p><strong>注意：</strong>标签只是开始新的一行，与段落不同，段落之间会插入一些垂直的间距。</p><h2 id="4-文本格式化标签"><a href="#4-文本格式化标签" class="headerlink" title="4. 文本格式化标签"></a>4. 文本格式化标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>文字  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span>文字  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span>文字      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span>文字      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span>     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span>    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span>    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></pre></td></tr></table></figure><p>作用：给文字添加 <strong>粗体</strong> 、<em>斜体</em> 、下划线</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221124.jpg" alt="2" style="zoom: 67%;"><h2 id="5-lt-div-gt-和-lt-span-gt-标签"><a href="#5-lt-div-gt-和-lt-span-gt-标签" class="headerlink" title="5. &lt;div&gt;和&lt;span&gt;标签"></a>5. <code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> div标签 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> span标签 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>作用：</strong><div> 和 <span> 没有语义，它们是盒子用于装内容</span></div></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221220.png" alt="1" style="zoom: 25%;"><p><strong>注意：</strong></p><ul><li>一行只能放一个 <div> —— 大盒子</div></li><li>一行可以多个 <span> —— 小盒子</span></li></ul><h2 id="6-图像标签"><a href="#6-图像标签" class="headerlink" title="6. 图像标签"></a>6. 图像标签</h2><p>作用：定义 HTML 页面中的图像</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图像URL"</span> /&gt;</span></span></pre></td></tr></table></figure><p>注意:src 是<img>标签的必须属性，它用于指定图像文件的路径和文件名</p><p><strong>其他属性：</strong></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221357.jpg" alt="2" style="zoom: 67%;"><p><strong>注意：</strong></p><ul><li>图像标签可以拥有多个属性，必须写在标签名的后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>属性采取键值对的格式，即 key=“value” 的格式，属性 =“属性值”。</li></ul><h2 id="7-路径"><a href="#7-路径" class="headerlink" title="7. 路径"></a>7. 路径</h2><p>目录文件夹：普通文件夹，存放了做页面所需要的相关素材，比如 html 文件、图片等</p><p>根目录：最外一层文件夹</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221509.png" alt="1" style="zoom: 33%;"><h2 id="8-相对路径与绝对路径"><a href="#8-相对路径与绝对路径" class="headerlink" title="8. 相对路径与绝对路径"></a>8. 相对路径与绝对路径</h2><p><strong>相对路径：</strong>从代码所在的这个文件出发，去寻找目标文件</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221546.jpg" alt="2" style="zoom: 67%;"><p><strong>绝对路径（少用）：</strong></p><p>从盘符开始的路径，如：“D:\web\img\logo.gif”</p><p><strong>符号：</strong></p><ul><li>相对路径：<code>\</code></li><li>绝对路径：<code>/</code></li></ul><h2 id="9-超链接标签"><a href="#9-超链接标签" class="headerlink" title="9. 超链接标签"></a>9. 超链接标签</h2><p>用于定义超链接，作用是从一个页面链接到另一个页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"跳转目标"</span> <span class="attr">target</span>=<span class="string">"目标窗口的弹出方式"</span>&gt;</span> 文本或图像 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221653.jpg" alt="2" style="zoom: 67%;"><h2 id="10-超链接标签分类："><a href="#10-超链接标签分类：" class="headerlink" title="10. 超链接标签分类："></a>10. 超链接标签分类：</h2><p>1)  外部链接：以”http:// + 网址 “ 开头 </p><p>2)  内部链接：网站内部页面之间的相互链接，直接链接内部页面 </p><p>3)  空链接：<code>&lt;a herf=&quot;#&quot;&gt; 空链接 &lt;/a&gt;</code></p><p>4)  下载链接：<code>&lt;a herf=&quot;xxx.zip/zip/rar(等压缩包形式)&gt; &lt;/a&gt;</code></p><p>5)  网页元素链接：网页中的各种网页元素，如文本、图像等都可以添加超链接</p><p>6)  锚点链接（重点）：点击链接到页面的某个位置 </p><ul><li>在 herf 属性中，设置属性值为 #名字（如：<code>&lt;a herf=&quot;#two&quot;&gt; 第二集 &lt;/a&gt;</code> ） </li><li>找到目标位置标签，添加id=名字 （如： <code>&lt;h3 id=&quot;two&quot;&gt; 第二季介绍 &lt;h3&gt;</code> )</li></ul><h2 id="11-注释"><a href="#11-注释" class="headerlink" title="11. 注释"></a>11. 注释</h2><p>注释以<code>“&lt;!--”</code>开头，以<code>“ --&gt;”</code>结束</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span>快捷键: ctrl +/</span></pre></td></tr></table></figure><h2 id="12-特殊字符"><a href="#12-特殊字符" class="headerlink" title="12. 特殊字符"></a>12. 特殊字符</h2><p>一些特殊的符号不方便直接使用，可以使用下面的字符来替代</p><ul><li><code>空格: &amp;nbsp;</code></li><li><code>“&lt;”: &amp;lt;</code></li><li><code>“&gt;”: &amp;gt;</code></li></ul><h2 id="13-表格标签"><a href="#13-表格标签" class="headerlink" title="13. 表格标签"></a>13. 表格标签</h2><p>用于显示、展示数据，可以让数据更加规整地显示规整。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>&lt;table&gt; &lt;/table&gt;</code>是用于定义表格的标签</li><li><code>&lt;tr&gt; &lt;/tr&gt;</code>标签用于定义表格中的行，必须嵌套在<code>&lt;table&gt; &lt;/table&gt;</code>标签</li><li><code>&lt;td&gt; &lt;/td&gt;</code>用于定义表格中的单元格，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中</li><li>字母 td 指表格数据（table data），即数据单元格的内容</li></ul><h2 id="14-表头单元格标签"><a href="#14-表头单元格标签" class="headerlink" title="14. 表头单元格标签"></a>14. 表头单元格标签</h2><p>表头单元格位于表格的第一行或第一列，里面的文本内容加粗居中显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></pre></td></tr></table></figure><h2 id="15-表格属性"><a href="#15-表格属性" class="headerlink" title="15. 表格属性"></a>15. 表格属性</h2><p>不常用，一般在CSS中设置，属性写到表格标签table 里面去</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512222150.png" alt="1" style="zoom:67%;"><h2 id="16-表格结构标签"><a href="#16-表格结构标签" class="headerlink" title="16. 表格结构标签"></a>16. 表格结构标签</h2><ul><li>头部标签：<code>&lt;/thead&gt;</code>（内部必须拥有<code>&lt;tr&gt;</code> 标签）</li><li>主题区域：<code>&lt;/tbody&gt;</code></li></ul><p><strong>注意：</strong>都是放在 <code>&lt;table&gt;&lt;/table&gt;</code> 标签中</p><h2 id="17-合并单元格"><a href="#17-合并单元格" class="headerlink" title="17. 合并单元格"></a>17. 合并单元格</h2><ul><li>跨行合并：rowspan=”合并单元格的个数”</li><li>跨列合并：colspan=”合并单元格的个数”</li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512222252.png" alt="image-20210512222251831" style="zoom: 33%;"><p><strong>目标单元格：</strong></p><ul><li>跨行：最上侧单元格为目标单元格, 写合并代码</li><li>跨列：最左侧单元格为目标单元格, 写合并代码</li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512222615.png" alt="image-20210512222614069" style="zoom: 33%;"><h2 id="18-列表标签"><a href="#18-列表标签" class="headerlink" title="18. 列表标签"></a>18. 列表标签</h2><p>用于布局页面，分为：无序列表、有序列表和自定义列表</p><h2 id="19-无序列表"><a href="#19-无序列表" class="headerlink" title="19. 无序列表"></a>19. 无序列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>无序列表的各个列表项之间没有顺序级别之分，是并列的</li><li><code>&lt;ul&gt;&lt;/ul&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>，不能直接在<code>&lt;ul&gt;&lt;/ul&gt;</code>标签中输入其他标签</li><li><code>&lt;li&gt;</code>与 <code>&lt;/li&gt;</code> 之间相当于一个容器，可以容纳所有元素</li><li>无序列表带有样式属性，通常使用CSS取消</li></ul><h2 id="20-有序列表"><a href="#20-有序列表" class="headerlink" title="20. 有序列表"></a>20. 有序列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></pre></td></tr></table></figure><p>注意：</p><ul><li><code>&lt;ol&gt;&lt;/ol&gt;</code>中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>，不能直接在 <ol></ol> 标签中输入其他标签</li><li><code>&lt;li&gt;</code>与 <code>&lt;/li&gt;</code>之间相当于一个容器，可以容纳所有元素</li><li>无序列表带有样式属性，通常使用CSS取消</li></ul><h2 id="21-自定义列表"><a href="#21-自定义列表" class="headerlink" title="21. 自定义列表"></a>21. 自定义列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span> 大哥 <span class="tag">&lt;/<span class="name">dt</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span> 小弟 <span class="tag">&lt;/<span class="name">dt</span>&gt;</span> -----&gt; 小弟用于解释大哥  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span> 小弟 <span class="tag">&lt;/<span class="name">dt</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>&lt;dl&gt;&lt;/dl&gt;</code> 里面只能包含<code>&lt;dt&gt;</code> 和 <code>&lt;dd&gt;</code></li><li><code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>个数没有限制，经常是一个<code>&lt;dt&gt;</code> 对应多个<code>&lt;dd&gt;</code></li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512222938.png" alt="1" style="zoom: 67%;"><h2 id="22-列表总结"><a href="#22-列表总结" class="headerlink" title="22. 列表总结"></a>22. 列表总结</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223018.jpg" alt="2" style="zoom: 67%;"><p><strong>使用场景：</strong></p><ul><li><p>使用无序列表</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223101.png" alt="1" style="zoom:50%;"></li><li><p>使用自定义列表</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223119.png" alt="1" style="zoom:50%;"></li></ul><h2 id="23-表单标签"><a href="#23-表单标签" class="headerlink" title="23. 表单标签"></a>23. 表单标签</h2><p>用于收集用户信息</p><p>组成：表单域、表单控件（也称为表单元素）和 提示信息</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223144.png" alt="1" style="zoom:50%;"><h2 id="24-表单域"><a href="#24-表单域" class="headerlink" title="24. 表单域"></a>24. 表单域</h2><p>表单域是一个包含表单元素的区域，用于定义表单域，以实现用户信息的收集和传递。<code>&lt;form&gt;</code> 会把它范围内的表单元素信息提交给服务器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">“url地址”</span> <span class="attr">method</span>=<span class="string">“提交方式”</span> <span class="attr">name</span>=<span class="string">“表单域名称</span>"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">各种表单元素控件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223230.jpg" alt="2" style="zoom:50%;"><h2 id="25-lt-input-gt-表单元素"><a href="#25-lt-input-gt-表单元素" class="headerlink" title="25. &lt;input&gt; 表单元素"></a>25. <code>&lt;input&gt;</code> 表单元素</h2><p>用于收集用户信息</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223257.jpg" alt="2" style="zoom: 67%;"><p><strong>注意：</strong></p><ul><li><code>&lt;input/&gt;</code> 标签为单标签</li><li>type 属性设置不同的属性值用来指定不同的控件类型</li></ul><h2 id="26-lt-input-gt-元素属性"><a href="#26-lt-input-gt-元素属性" class="headerlink" title="26. &lt;input&gt; 元素属性"></a>26. <code>&lt;input&gt;</code> 元素属性</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223400.jpg" alt="2" style="zoom: 67%;"><p><strong>注意：</strong></p><ul><li>多个单选按钮拥有相同名字时，可以实现单选一</li><li>单选框和复选框，选项的name的值要相同</li><li>value只能在text中显示，只能后台人员使用</li><li>checked打开时默认选中：checked=”checked”（在单选框和复选框中设置）</li></ul><h2 id="27-lt-label-gt-标签"><a href="#27-lt-label-gt-标签" class="headerlink" title="27. &lt;label&gt;标签"></a>27. <code>&lt;label&gt;</code>标签</h2><p><code>&lt;label&gt;</code>标签用于绑定一个表单元素, 当点击<code>&lt;label&gt;</code>标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>   <span class="attr">id</span>=<span class="string">"sex"</span> /&gt;</span></span></pre></td></tr></table></figure><h2 id="28-lt-select-gt-表单元素"><a href="#28-lt-select-gt-表单元素" class="headerlink" title="28. &lt;select&gt; 表单元素"></a>28. <code>&lt;select&gt;</code> 表单元素</h2><p>用于定义下拉列表，在多个选项中让用户进行选择</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code>。</li><li>在<code>&lt;option&gt;</code> 中定义 selected =“ selected “ 时，当前项即为默认选中项。</li></ul><h2 id="29-lt-textarea-gt-表单元素"><a href="#29-lt-textarea-gt-表单元素" class="headerlink" title="29. &lt;textarea&gt;表单元素"></a>29. <code>&lt;textarea&gt;</code>表单元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">cols</span>=<span class="string">"20"</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  文本内容  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>通过 <code>&lt;textarea&gt;</code> 标签可以轻松地创建多行文本输入框。</li><li>cols=“每行中的字符数” ，rows=“显示的行数”（实际开发使用CSS来控制）</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;HTML常用标签&quot;&gt;&lt;a href=&quot;#HTML常用标签&quot; class=&quot;headerlink&quot; title=&quot;HTML常用标签&quot;&gt;&lt;/a&gt;HTML常用标签&lt;/h1&gt;&lt;h2 id=&quot;1-标题标签-lt-h1-gt-lt-h6-gt&quot;&gt;&lt;a href=&quot;#1-标题标签-lt-h1-gt-lt-h6-gt&quot; class=&quot;headerlink&quot; title=&quot;1. 标题标签  &amp;lt;h1&amp;gt; - &amp;lt;h6&amp;gt;&quot;&gt;&lt;/a&gt;1. 标题标签  &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; - &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt; 我是一级标题 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt;作为标题使用，并且依据重要性递减&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h5&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h5&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h6&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h6&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端学习之HTML" scheme="https://ming-clavin.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BHTML/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Html" scheme="https://ming-clavin.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>HTML基本结构标签</title>
    <link href="https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/2.HTML%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E6%A0%87%E7%AD%BE/"/>
    <id>https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/2.HTML%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E6%A0%87%E7%AD%BE/</id>
    <published>2021-05-12T14:41:16.000Z</published>
    <updated>2021-05-12T14:43:52.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML基本结构标签"><a href="#HTML基本结构标签" class="headerlink" title="HTML基本结构标签"></a>HTML基本结构标签</h1><h2 id="1-单标签和双标签"><a href="#1-单标签和双标签" class="headerlink" title="1. 单标签和双标签"></a>1. 单标签和双标签</h2><ul><li><p>单标签        <code>&lt;br/&gt;</code>  </p></li><li><p>双标签        <code>&lt;html&gt;   &lt;/html&gt;</code></p></li></ul><p>注：HTML 标签通常是成对出现的，标签对中的第一个标签是开始标签，第二个标签是结束标签。</p><h2 id="2-标签关系"><a href="#2-标签关系" class="headerlink" title="2. 标签关系"></a>2. 标签关系</h2><h3 id="2-1-包含关系"><a href="#2-1-包含关系" class="headerlink" title="2.1 包含关系"></a>2.1 包含关系</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr></table></figure><a id="more"></a><h3 id="2-2-并列关系"><a href="#2-2-并列关系" class="headerlink" title="2.2 并列关系"></a>2.2 并列关系</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr></table></figure><h3 id="2-3-基本的结构标签（骨架标签）"><a href="#2-3-基本的结构标签（骨架标签）" class="headerlink" title="2.3 基本的结构标签（骨架标签）"></a>2.3 基本的结构标签（骨架标签）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    hello world  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512220415.jpg" alt="2"></p><h2 id="4-骨架标签新增代码-lt-DOCTYPE-gt"><a href="#4-骨架标签新增代码-lt-DOCTYPE-gt" class="headerlink" title="4. 骨架标签新增代码 &lt;!DOCTYPE&gt;"></a>4. 骨架标签新增代码 &lt;!DOCTYPE&gt;</h2><p><code>&lt;!DOCTYPE&gt;</code>文档类型声明，作用就是告诉浏览器使用哪种HTML版本来显示网页。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>      当前页面采取的是 HTML5 版本来显示网页</span></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><code>&lt;!DOCTYPE&gt;</code>声明位于文档中的最前面的位置，处于 <html> 标签之前。</html></p><p><code>&lt;!DOCTYPE&gt;</code> 标签是文档类型声明标签，不是Html标签。</p><h2 id="5-lang语言种类"><a href="#5-lang语言种类" class="headerlink" title="5. lang语言种类"></a>5. lang语言种类</h2><p><strong>作用：</strong>定义当前文档显示的语言</p><p><strong>注意：</strong></p><ul><li>en ：英文   zh-CN : 中文</li><li>定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文</li></ul><h2 id="6-字符集"><a href="#6-字符集" class="headerlink" title="6. 字符集"></a>6. 字符集</h2><p>字符集是多个字符的集合。<meta>标签的charset属性规定HTML文档使用字符编码的类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">" UTF-8"</span> /&gt;</span></span></pre></td></tr></table></figure><p>注意：一般使用“UTF-8”编码（万国码）</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;HTML基本结构标签&quot;&gt;&lt;a href=&quot;#HTML基本结构标签&quot; class=&quot;headerlink&quot; title=&quot;HTML基本结构标签&quot;&gt;&lt;/a&gt;HTML基本结构标签&lt;/h1&gt;&lt;h2 id=&quot;1-单标签和双标签&quot;&gt;&lt;a href=&quot;#1-单标签和双标签&quot; class=&quot;headerlink&quot; title=&quot;1. 单标签和双标签&quot;&gt;&lt;/a&gt;1. 单标签和双标签&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单标签        &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;双标签        &lt;code&gt;&amp;lt;html&amp;gt;   &amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：HTML 标签通常是成对出现的，标签对中的第一个标签是开始标签，第二个标签是结束标签。&lt;/p&gt;
&lt;h2 id=&quot;2-标签关系&quot;&gt;&lt;a href=&quot;#2-标签关系&quot; class=&quot;headerlink&quot; title=&quot;2. 标签关系&quot;&gt;&lt;/a&gt;2. 标签关系&lt;/h2&gt;&lt;h3 id=&quot;2-1-包含关系&quot;&gt;&lt;a href=&quot;#2-1-包含关系&quot; class=&quot;headerlink&quot; title=&quot;2.1 包含关系&quot;&gt;&lt;/a&gt;2.1 包含关系&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端学习之HTML" scheme="https://ming-clavin.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BHTML/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Html" scheme="https://ming-clavin.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>Html简介</title>
    <link href="https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/1.HTML%E7%AE%80%E4%BB%8B/"/>
    <id>https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/1.HTML%E7%AE%80%E4%BB%8B/</id>
    <published>2021-05-12T14:40:16.000Z</published>
    <updated>2021-05-12T14:40:07.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Html简介"><a href="#Html简介" class="headerlink" title="Html简介"></a>Html简介</h1><h2 id="1．概述"><a href="#1．概述" class="headerlink" title="1．概述"></a>1．概述</h2><p>HTML指的是<strong>超文本标记语言</strong>，它是用来描述网页的一种语言。HTML 不是一种编程语言，而是一种<strong>标记语言</strong>。</p><h2 id="2-浏览器内核"><a href="#2-浏览器内核" class="headerlink" title="2. 浏览器内核"></a>2. 浏览器内核</h2><p>浏览器内核（渲染引擎）： 负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512215811.jpg" alt="1"></p><h2 id="3-Web-标准"><a href="#3-Web-标准" class="headerlink" title="3. Web 标准"></a>3. Web 标准</h2><p>主要包括结构、表现和行为三个方面。</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512215835.jpg" alt="2"></p><blockquote><p>总结：</p><ul><li>结构写到 HTML文件中</li><li>表现写到 CSS文件中</li><li>行为写到 JavaScript文件中</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Html简介&quot;&gt;&lt;a href=&quot;#Html简介&quot; class=&quot;headerlink&quot; title=&quot;Html简介&quot;&gt;&lt;/a&gt;Html简介&lt;/h1&gt;&lt;h2 id=&quot;1．概述&quot;&gt;&lt;a href=&quot;#1．概述&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="前端学习之HTML" scheme="https://ming-clavin.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BHTML/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Html" scheme="https://ming-clavin.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>MySQL让主键id重新排序</title>
    <link href="https://ming-clavin.github.io/2021/05/04/2020/MySQL%E8%AE%A9%E4%B8%BB%E9%94%AEid%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F/"/>
    <id>https://ming-clavin.github.io/2021/05/04/2020/MySQL%E8%AE%A9%E4%B8%BB%E9%94%AEid%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F/</id>
    <published>2021-05-04T14:19:00.000Z</published>
    <updated>2021-05-04T14:24:03.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL让主键id重新排序"><a href="#MySQL让主键id重新排序" class="headerlink" title="MySQL让主键id重新排序"></a>MySQL让主键id重新排序</h1><ol><li><p>备份表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">create table table_bak like table_name;</span></pre></td></tr></table></figure></li><li><p>备份表数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">insert into table_bak select * from table_name;</span></pre></td></tr></table></figure></li><li><p>删除原来主键字段(如id)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">alter table table_name drop id;</span></pre></td></tr></table></figure></li><li><p>添加主键，自增，放在第一位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">alter table table_name add id int(11) primary key auto_increment first;</span></pre></td></tr></table></figure></li><li><p>检查没问题的话，删除备份的表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">delete from table_bak;</span></pre></td></tr></table></figure><blockquote><p>注：table_name 为 表名</p></blockquote></li></ol><p><strong>参考：<a href="https://blog.csdn.net/u013091013/article/details/78194012">mysql让主键id重新排序</a></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL让主键id重新排序&quot;&gt;&lt;a href=&quot;#MySQL让主键id重新排序&quot; class=&quot;headerlink&quot; title=&quot;MySQL让主键id重新排序&quot;&gt;&lt;/a&gt;MySQL让主键id重新排序&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;备份表结构&lt;/p&gt;
&lt;fi</summary>
      
    
    
    
    <category term="MySQL" scheme="https://ming-clavin.github.io/categories/MySQL/"/>
    
    
    <category term="后端" scheme="https://ming-clavin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="MySQL" scheme="https://ming-clavin.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>误存文件夹到GitHub的解决方法</title>
    <link href="https://ming-clavin.github.io/2021/05/04/2020/%E8%AF%AF%E5%AD%98%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%B0GitHub%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://ming-clavin.github.io/2021/05/04/2020/%E8%AF%AF%E5%AD%98%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%B0GitHub%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2021-05-03T16:44:00.000Z</published>
    <updated>2021-05-03T16:40:44.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="误存文件夹到GitHub的解决方法"><a href="#误存文件夹到GitHub的解决方法" class="headerlink" title="误存文件夹到GitHub的解决方法"></a>误存文件夹到GitHub的解决方法</h1><p><strong>将node_modules文件存放到了GitHub的解决方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">touch .gitignore</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">echo &#x2F;node_modules&#x2F; &gt;&gt; .gitignore</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">git rm -r --cached node_modules</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git add . -A</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">git commit -m &quot;remove node_modules&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git push</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;误存文件夹到GitHub的解决方法&quot;&gt;&lt;a href=&quot;#误存文件夹到GitHub的解决方法&quot; class=&quot;headerlink&quot; title=&quot;误存文件夹到GitHub的解决方法&quot;&gt;&lt;/a&gt;误存文件夹到GitHub的解决方法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;将n</summary>
      
    
    
    
    <category term="Github_desktop" scheme="https://ming-clavin.github.io/categories/Github-desktop/"/>
    
    
    <category term="Github" scheme="https://ming-clavin.github.io/tags/Github/"/>
    
    <category term="Github_desktop" scheme="https://ming-clavin.github.io/tags/Github-desktop/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Desktop 上传本地库</title>
    <link href="https://ming-clavin.github.io/2021/04/28/2020/GitHub%20Desktop%20%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%BA%93/"/>
    <id>https://ming-clavin.github.io/2021/04/28/2020/GitHub%20Desktop%20%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%BA%93/</id>
    <published>2021-04-28T08:00:00.000Z</published>
    <updated>2021-04-28T08:01:58.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Desktop-上传本地库"><a href="#GitHub-Desktop-上传本地库" class="headerlink" title="GitHub Desktop 上传本地库"></a>GitHub Desktop 上传本地库</h1><h2 id="1-创建新仓库"><a href="#1-创建新仓库" class="headerlink" title="1. 创建新仓库"></a>1. 创建新仓库</h2><p>单击 <strong>Create a New Repository on your Hard Drive…（在硬盘上创建新仓库…）</strong></p><img src="https://docs.github.com/assets/images/help/desktop/getting-started-guide/creating-a-repository.png" alt="创建新仓库" style="zoom:50%;"><p>填写字段并选择您的首选项</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428140721.png" alt="Snipaste_2021-04-28_05-15-13" style="zoom:50%;"><a id="more"></a><ul><li><p>“Name（名称）”定义仓库在本地以及 GitHub 上的名称</p></li><li><p>“Description（说明）”是一个可选字段，可用于提供有关仓库目的的更多信息。</p></li><li><p>“Local path（本地路径）”设置仓库在计算机上的位置。</p><blockquote><p>默认情况下，GitHub Desktop 会在 <em>Documents</em> 文件夹内创建 <em>GitHub</em> 文件夹，用于存储仓库，但您也可以选择计算机上的任何位置。 您的新仓库将是所选位置内的文件夹。</p></blockquote></li><li><p><strong>Initialize this repository with a README（使用自述文件初始化此仓库）</strong></p><blockquote><p>创建包含 <em>README.md</em> 文件的初始提交</p></blockquote></li><li><p><strong>Git ignore（Git 忽略）</strong>下拉菜单可让您添加自定义文件，以忽略本地仓库中您不想存储在版本控制中的特定文件</p></li><li><p><strong>License（许可证）</strong>下拉菜单可让您将开源许可证添加到仓库中的 <em>LICENSE</em> 文件。</p></li></ul><h2 id="2-探索-GitHub-Desktop"><a href="#2-探索-GitHub-Desktop" class="headerlink" title="2. 探索 GitHub Desktop"></a>2. 探索 GitHub Desktop</h2><h3 id="2-1-GitHub-Desktop-菜单栏"><a href="#2-1-GitHub-Desktop-菜单栏" class="headerlink" title="2.1 GitHub Desktop 菜单栏"></a>2.1 GitHub Desktop 菜单栏</h3><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428150854.png" alt="image-20210428150426467" style="zoom:50%;"><ul><li><strong>Current repository（当前仓库）</strong>显示您处理的仓库的名称。 您可以单击 <strong>Current repository（当前仓库）</strong>切换到 GitHub Desktop 中的不同仓库。</li><li><strong>Current branch（当前分支）</strong>显示您处理的分支的名称。 您可以单击 <strong>Current branch（当前分支）</strong>来查看仓库中的所有分支、切换到不同的分支或者创建新分支。 在仓库中创建拉取请求后，也可单击 <strong>Current branch（当前分支）</strong>查看它们。</li><li><strong>Publish repository（发布仓库）</strong>会出现，因为尚未将仓库发布到 GitHub。 工具栏的这部分将根据您当前分支和仓库的状态而改变。 不同的上下文相关操作将可以使用，允许您在本地仓库与远程仓库之间交换数据。</li></ul><h3 id="2-2-更改历史记录"><a href="#2-2-更改历史记录" class="headerlink" title="2.2 更改历史记录"></a>2.2 更改历史记录</h3><p>在左侧边栏中，会看到 <strong>Changes（更改）</strong>和 <strong>History（历史记录）</strong>视图。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428151250.png" alt="image-20210428151248941" style="zoom:50%;"><ul><li><p><strong>Changes（更改）</strong>视图显示对当前分支中的文件已经做出但尚未提交到本地仓库的更改。在底部有“Summary（摘要）”和“Description（说明）”文本框，以及 <strong>Commit to BRANCH（提交到 [分支]）</strong>按钮。 这是提交新更改的位置。 <strong>Commit to BRANCH（提交到 [分支]）</strong>按钮是动态的，将显示提交更改到哪个分支</p></li><li><p><strong>History（历史记录）</strong>视图显示仓库当前分支上以前的提交。会看到在创建仓库时 GitHub Desktop 所创建的“初始提交”。 在提交的右侧，根据您在创建仓库时选择的选项，可能会看到 <em>.gitattributes*、</em>.gitignore<em>、</em>LICENSE* 或 <em>README</em> 文件。 您可以单击每个文件以查看该文件的差异，也就是提交中对该文件的更改。 差异只显示文件已更改的部分，而不显示文件的全部内容。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428151507.png" alt="image-20210428151506659" style="zoom:50%;"></li></ul><h2 id="3-将仓库推送到-GitHub"><a href="#3-将仓库推送到-GitHub" class="headerlink" title="3. 将仓库推送到 GitHub"></a>3. 将仓库推送到 GitHub</h2><p><strong>步骤一：</strong>单击菜单栏中的 <strong>Publish repository（发布仓库）</strong></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428151759.png" alt="image-20210428151757880" style="zoom:50%;"><ul><li>GitHub Desktop 自动使用创建仓库时输入的信息填充<strong>Name（名称）</strong>和<strong>Description（说明）</strong>字段。</li><li><strong>Keep this code private（保持此代码为私有）</strong>可控制谁可以查看项目。 如果不选中此选项，GitHub 上的其他用户将能够查看代码。 如果选中此选项，代码将不会公开。</li><li><strong>Organization（组织）</strong>下拉菜单（如果有）可让您将仓库发布到 GitHub 上您所属的特定组织。</li></ul><p><strong>步骤二：</strong>单击 <strong>Publish Repository（发布仓库）</strong>按钮</p><p><strong>步骤三：</strong>从 GitHub Desktop 访问 GitHub.com 上的仓库。 在文件菜单中，单击 <strong>Repository（仓库）</strong>，然后单击 <strong>View on GitHub（在 GitHub 上查看）</strong>。 这会直接在默认浏览器中打开仓库。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428152751.png" alt="image-20210428152750345" style="zoom: 25%;"><h2 id="4-进行更改、提交更改和推送更改"><a href="#4-进行更改、提交更改和推送更改" class="headerlink" title="4. 进行更改、提交更改和推送更改"></a>4. 进行更改、提交更改和推送更改</h2><p><strong>步骤一：</strong>要从 GitHub Desktop 启动外部编辑器，请单击 Repository（仓库），然后单击 Open in VScode（在 [VScode] 中打开）。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428153006.png" alt="image-20210428153005460" style="zoom: 50%;"><p><strong>步骤二：</strong>对以前创建的 <em>README.md</em> 文件做一些更改</p><p><strong>步骤三：</strong>在 GitHub Desktop 中，导航到 <strong>Changes（更改）</strong>视图。 在文件列表中，会看到 <em>README.md*。 *README.md</em> 文件左边的勾选标记表示对文件的更改将成为提交的一部分。</p><blockquote><p> 以后可能会更改多个文件，但只想提交对其中部分文件所做的更改。 如果单击文件旁边的复选标记，则该文件不会包含在提交中。</p></blockquote><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428153333.png" alt="image-20210428153332669" style="zoom: 50%;"><p><strong>步骤四：</strong>在 <strong>Changes（更改）</strong>列表底部，输入提交消息。 在头像右侧，键入提交的简短描述。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428153549.png" alt="image-20210428153548125" style="zoom:50%;"><blockquote><p>在摘要下方，您会看到“Description（说明）”文本字段，在其中可以键入较长的提交更改描述，这有助于回顾项目的历史记录和了解更改的原因。 </p></blockquote><p><strong>步骤五：</strong>单击 <strong>Commit to BRANCH NAME（提交到 [分支名称]）</strong>。 提交按钮显示当前分支，因此可以确保提交到所需的分支。</p><p><strong>步骤六：</strong>要将更改推送到 GitHub 上的远程仓库，单击 <strong>Push origin（推送源）</strong></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428153709.png" alt="image-20210428153708638" style="zoom: 50%;"><ul><li><p><strong>Push origin（推送源）</strong>按钮就是单击以发布仓库到 GitHub 的按钮。 此按钮根据 Git 工作流程中的上下文而变。 现在改为 <code>Push origin（推送源）</code>了，其旁边的 <code>1</code> 表示有一个提交尚未推送到 GitHub。</p></li><li><p><strong>Push origin（推送源）</strong>中的“源”表示我们将更改推送到名为 <code>origin</code> 的远程，在本例中是 GitHub.com 上的项目仓库。 </p><blockquote><p> 在推送任何新提交到 GitHub 之前，计算机上的项目仓库与 GitHub.com 上的项目仓库之间存在差异。 这可在程序员在本地工作，并且仅在准备好后才将更改推送到 GitHub.com。</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;GitHub-Desktop-上传本地库&quot;&gt;&lt;a href=&quot;#GitHub-Desktop-上传本地库&quot; class=&quot;headerlink&quot; title=&quot;GitHub Desktop 上传本地库&quot;&gt;&lt;/a&gt;GitHub Desktop 上传本地库&lt;/h1&gt;&lt;h2 id=&quot;1-创建新仓库&quot;&gt;&lt;a href=&quot;#1-创建新仓库&quot; class=&quot;headerlink&quot; title=&quot;1. 创建新仓库&quot;&gt;&lt;/a&gt;1. 创建新仓库&lt;/h2&gt;&lt;p&gt;单击 &lt;strong&gt;Create a New Repository on your Hard Drive…（在硬盘上创建新仓库…）&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://docs.github.com/assets/images/help/desktop/getting-started-guide/creating-a-repository.png&quot; alt=&quot;创建新仓库&quot; style=&quot;zoom:50%;&quot;&gt;

&lt;p&gt;填写字段并选择您的首选项&lt;/p&gt;
&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428140721.png&quot; alt=&quot;Snipaste_2021-04-28_05-15-13&quot; style=&quot;zoom:50%;&quot;&gt;</summary>
    
    
    
    <category term="Github_desktop" scheme="https://ming-clavin.github.io/categories/Github-desktop/"/>
    
    
    <category term="Github" scheme="https://ming-clavin.github.io/tags/Github/"/>
    
    <category term="Github_desktop" scheme="https://ming-clavin.github.io/tags/Github-desktop/"/>
    
  </entry>
  
  <entry>
    <title>简易Node后端搭建</title>
    <link href="https://ming-clavin.github.io/2021/04/28/2020/%E7%AE%80%E6%98%93Node%E5%90%8E%E7%AB%AF%E6%90%AD%E5%BB%BA/"/>
    <id>https://ming-clavin.github.io/2021/04/28/2020/%E7%AE%80%E6%98%93Node%E5%90%8E%E7%AB%AF%E6%90%AD%E5%BB%BA/</id>
    <published>2021-04-28T07:55:00.000Z</published>
    <updated>2021-04-28T07:58:50.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易Node后端搭建"><a href="#简易Node后端搭建" class="headerlink" title="简易Node后端搭建"></a>简易Node后端搭建</h1><h2 id="1-Express"><a href="#1-Express" class="headerlink" title="1. Express"></a>1. Express</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><h4 id="1-1-1-安装淘宝镜像"><a href="#1-1-1-安装淘宝镜像" class="headerlink" title="1.1.1 安装淘宝镜像"></a>1.1.1 安装淘宝镜像</h4><p>安装npm之前可先安装淘宝镜像，使用cnpm的来代替npm，使得下载速度提高很多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span></pre></td></tr></table></figure><h4 id="1-1-2-初始化项目"><a href="#1-1-2-初始化项目" class="headerlink" title="1.1.2 初始化项目"></a>1.1.2 初始化项目</h4><p>目录下运行命令来初始化项目，期间所有提示按enter键即可，这会生成<code>package.json</code>，用于描述项目文件的.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm init</span></pre></td></tr></table></figure><a id="more"></a><p>再输入命令，项目目录中又会多出一个叫<code>node_modules</code>文件夹，里面是node.js提供的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm install</span></pre></td></tr></table></figure><h4 id="1-1-3-安装express"><a href="#1-1-3-安装express" class="headerlink" title="1.1.3 安装express"></a>1.1.3 安装express</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm install express --save</span></pre></td></tr></table></figure><p>创建结果：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210309183046.png" alt="image-20210309183045551" style="zoom: 50%;"><h4 id="1-1-4-检验是否创建成功"><a href="#1-1-4-检验是否创建成功" class="headerlink" title="1.1.4 检验是否创建成功"></a>1.1.4 检验是否创建成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">express --version</span></pre></td></tr></table></figure><p>若出现版本号，则为创建成功</p><h3 id="1-2-Express脚手架的安装"><a href="#1-2-Express脚手架的安装" class="headerlink" title="1.2 Express脚手架的安装"></a>1.2 Express脚手架的安装</h3><h4 id="1-2-1-使用express-generator安装"><a href="#1-2-1-使用express-generator安装" class="headerlink" title="1.2.1 使用express-generator安装"></a>1.2.1 使用express-generator安装</h4><ol><li><p>命令行进入项目目录，运行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm i express-generator</span></pre></td></tr></table></figure></li><li><p>创建了一个名为app的Express应用，并使用ejs模板引擎</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">express --view&#x3D;ejs app</span></pre></td></tr></table></figure></li><li><p>进入app，并安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd app</span></pre></td></tr></table></figure></li><li><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install</span></pre></td></tr></table></figure></li><li><p>在Windows下，使用以下命令启Express应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">set DEBUG&#x3D;app:* &amp; npm start</span></pre></td></tr></table></figure></li></ol><h4 id="1-2-2-使用express命令快速创建项目目录"><a href="#1-2-2-使用express命令快速创建项目目录" class="headerlink" title="1.2.2 使用express命令快速创建项目目录"></a>1.2.2 使用express命令快速创建项目目录</h4><p>用法：express项目文件夹的名字 -e</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">express app -e</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">cd app</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">cnpm install</span></pre></td></tr></table></figure><p>app文件夹下的文件结构：</p><ul><li>bin: 启动目录，包含启动文件www，默认监听端口是 3000 ，直接node www执行即可。</li><li>node_modules：依赖的模块包</li><li>public：存放静态资源</li><li>routes：路由操作</li><li>views：存放ejs模板引擎</li><li>app.js：主文件</li><li>package.json：项目描述文件</li></ul><h3 id="1-3-参考资料"><a href="#1-3-参考资料" class="headerlink" title="1.3 参考资料"></a>1.3 参考资料</h3><p><a href="https://blog.csdn.net/no10086/article/details/88958282?spm=1001.2014.3001.5501">Express全系列教程之(一)：Express的安装 和第一个程序</a></p><h2 id="2-sequelize"><a href="#2-sequelize" class="headerlink" title="2. sequelize"></a>2. sequelize</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><h4 id="2-1-1-安装sequelize"><a href="#2-1-1-安装sequelize" class="headerlink" title="2.1.1 安装sequelize"></a>2.1.1 安装sequelize</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm install sequelize -S</span></pre></td></tr></table></figure><h4 id="2-1-2-为MySQL数据库安装驱动程序"><a href="#2-1-2-为MySQL数据库安装驱动程序" class="headerlink" title="2.1.2 为MySQL数据库安装驱动程序"></a>2.1.2 为MySQL数据库安装驱动程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm install mysql2 -S</span></pre></td></tr></table></figure><h4 id="2-1-3-安装"><a href="#2-1-3-安装" class="headerlink" title="2.1.3 安装"></a>2.1.3 安装</h4><p>通过命令行创建sequelize目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm install sequelize-cli -g</span></pre></td></tr></table></figure><h4 id="1-1-4-初始化项目"><a href="#1-1-4-初始化项目" class="headerlink" title="1.1.4 初始化项目"></a>1.1.4 初始化项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sequelize init</span></pre></td></tr></table></figure><p>文件目录：</p><ul><li>config – 数据库配置</li><li>migrations – 迁移文件</li><li>models – 模型文件</li><li>seeders – 种子文件</li></ul><h3 id="2-2-配置数据库环境"><a href="#2-2-配置数据库环境" class="headerlink" title="2.2 配置数据库环境"></a>2.2 配置数据库环境</h3><h4 id="2-2-1-环境参数"><a href="#2-2-1-环境参数" class="headerlink" title="2.2.1 环境参数"></a>2.2.1 环境参数</h4><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210309185515.png" alt="image-20210309185514118" style="zoom: 33%;"><h4 id="2-2-2-配置参数"><a href="#2-2-2-配置参数" class="headerlink" title="2.2.2 配置参数"></a>2.2.2 配置参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">"development"</span>: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"username"</span>: <span class="string">"root"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"password"</span>: <span class="string">"root"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"database"</span>: <span class="string">"document_development"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"host"</span>: <span class="string">"127.0.0.1"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"dialect"</span>: <span class="string">"mysql"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure><h3 id="2-3-创建数据库"><a href="#2-3-创建数据库" class="headerlink" title="2.3 创建数据库"></a>2.3 创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sequelize db:create --charset &#39;utf8mb4&#39;</span></pre></td></tr></table></figure><p>创建成功：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210310102721.png" alt="image-20210310102720851" style="zoom: 67%;"><h3 id="2-4-sequelize操作数据库：模型、迁移与种子"><a href="#2-4-sequelize操作数据库：模型、迁移与种子" class="headerlink" title="2.4 sequelize操作数据库：模型、迁移与种子"></a>2.4 sequelize操作数据库：模型、迁移与种子</h3><h4 id="2-4-1-创建模型与迁移"><a href="#2-4-1-创建模型与迁移" class="headerlink" title="2.4.1 创建模型与迁移"></a>2.4.1 创建模型与迁移</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sequelize model:generate --name Article --attributes title:string,content:text</span></pre></td></tr></table></figure><p>创建了名为Article的模型 ，表有两个字段：标题（string类型）；内容（text 类型）</p><h4 id="2-4-2-模型文件"><a href="#2-4-2-模型文件" class="headerlink" title="2.4.2 模型文件"></a>2.4.2 模型文件</h4><p>使用 <code>Node.js</code> 操作数据库需要用到模型文件，无需改动。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423174110.png" alt="image-20210423174109300" style="zoom: 33%;"><h4 id="2-4-3-迁移文件"><a href="#2-4-3-迁移文件" class="headerlink" title="2.4.3 迁移文件"></a>2.4.3 迁移文件</h4><p>迁移文件：migrations/xxx-create-article.js，里面保存的是 Articles 的字段。</p><p>（注意：sequelize 中默认规定，模型的名称是单数，而数据表是复数）</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423174423.png" alt="image-20210310103047714"></p><p><strong><code>up</code>部分代码 – 建表：</strong></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423174954.png" alt="image-20210423174953113" style="zoom:50%;"><p><strong><code>down</code>部分代码 – 删除表：</strong></p><p>代码的 <code>down</code> 部分，是 <code>up</code> 的反向操作。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423175139.png" alt="image-20210423175138106" style="zoom:50%;"><h4 id="2-4-4-运行迁移"><a href="#2-4-4-运行迁移" class="headerlink" title="2.4.4 运行迁移"></a>2.4.4 运行迁移</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sequelize db:migrate</span></pre></td></tr></table></figure><p>运行命令，将字段迁移进数据库</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423173708.png" alt="image-20210423173706555" style="zoom:50%;"><h4 id="2-4-5-种子文件"><a href="#2-4-5-种子文件" class="headerlink" title="2.4.5 种子文件"></a>2.4.5 种子文件</h4><p><strong>创建种子文件,填充测试数据：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sequelize seed:generate --name article</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210310103517.png" alt="image-20210310103516290" style="zoom: 50%;"><p><strong>修改种子文件数据</strong></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423180253.png" alt="image-20210423180252412" style="zoom: 50%;"><p><strong>运行种子文件</strong></p><ul><li>运行所有种子文件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sequelize db:seed:all</span></pre></td></tr></table></figure><ul><li>运行指定的种子文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sequelize db:seed --seed xxx-article</span></pre></td></tr></table></figure><h4 id="2-4-6-总结"><a href="#2-4-6-总结" class="headerlink" title="2.4.6 总结"></a>2.4.6 总结</h4><p>日常开发项目数据库操作的步骤：</p><table><thead><tr><th align="center">步骤</th><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">第一步</td><td align="center">sequelize model:generate –name Article –attributes …</td><td align="center">建模型和迁移文件</td></tr><tr><td align="center">第二步</td><td align="center">人工处理</td><td align="center">根据需求调整模型和迁移文件</td></tr><tr><td align="center">第三步</td><td align="center">sequelize db:migrate</td><td align="center">运行迁移，生成数据表</td></tr><tr><td align="center">第四步</td><td align="center">sequelize seed:generate –name article</td><td align="center">新建种子文件</td></tr><tr><td align="center">第五步</td><td align="center">人工处理</td><td align="center">将种子文件修改为自己想填充的数据</td></tr><tr><td align="center">第六步</td><td align="center">sequelize db:seed:all</td><td align="center">运行种子文件，将默认数据填充到数据表中</td></tr></tbody></table><h3 id="2-5-查询数据库"><a href="#2-5-查询数据库" class="headerlink" title="2.5 查询数据库"></a>2.5 查询数据库</h3><h4 id="2-5-1-路由"><a href="#2-5-1-路由" class="headerlink" title="2.5.1 路由"></a>2.5.1 路由</h4><p>添加一个新的路由文件：在 routes 中，添加一个叫做 articles.js 的文件。基础的代码，和项目自带的其他路由文件一样，直接复制过来。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423181604.png" alt="image-20210423181603303" style="zoom:50%;"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = express.Router();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// ....</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = router;</span></pre></td></tr></table></figure><h4 id="2-5-2-get-请求"><a href="#2-5-2-get-请求" class="headerlink" title="2.5.2 get 请求"></a>2.5.2 <code>get</code> 请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">hello</span>: <span class="string">"ITFun"</span>&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p><strong>代码解析：</strong></p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210310110023.png" alt="image-20210310110022651"></p><h4 id="2-5-3-使用路由"><a href="#2-5-3-使用路由" class="headerlink" title="2.5.3 使用路由"></a>2.5.3 使用路由</h4><p><code>app.js</code> 中使用<code>articles.js</code> 路由，路由文件才会生效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> articlesRouter = <span class="built_in">require</span>(<span class="string">'./routes/articles'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/articles'</span>, articlesRouter);</span></pre></td></tr></table></figure><h4 id="2-5-4-读取数据库"><a href="#2-5-4-读取数据库" class="headerlink" title="2.5.4 读取数据库"></a>2.5.4 读取数据库</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> models = <span class="built_in">require</span>(<span class="string">'../models'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// .....</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    models.Article.findAll().then(<span class="function"><span class="params">articles</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        res.json(&#123;<span class="attr">articles</span>: articles&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>结果：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423182339.png" alt="express 读取接口" style="zoom:50%;"><h4 id="2-5-5-异步查询语法"><a href="#2-5-5-异步查询语法" class="headerlink" title="2.5.5 异步查询语法"></a>2.5.5 异步查询语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> articles = <span class="keyword">await</span> models.Article.findAll();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">articles</span>: articles&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><ul><li><code>async</code> 是 <code>异步</code> 的意思，<code>async function</code> 表明当前这个 <code>function</code> 是异步的。</li><li><code>await</code>，表示等待一个异步方法执行完成。<code>await</code> 只能在 <code>async</code> 函数内部使用，用在普通函数里就会报错。</li></ul><h4 id="2-5-6-排序"><a href="#2-5-6-排序" class="headerlink" title="2.5.6 排序"></a>2.5.6 排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> articles = <span class="keyword">await</span> models.Article.findAll(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    order: [[<span class="string">'id'</span>, <span class="string">'DESC'</span>]],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424161706.png" alt="倒序" style="zoom: 50%;"><h3 id="2-6-添加数据"><a href="#2-6-添加数据" class="headerlink" title="2.6 添加数据"></a>2.6 添加数据</h3><h4 id="2-6-1-新增定义死的数据"><a href="#2-6-1-新增定义死的数据" class="headerlink" title="2.6.1 新增定义死的数据"></a>2.6.1 新增定义死的数据</h4><p>找到模型后，使用 <code>create</code> 方法，将数据插入进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.create(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        title: <span class="string">"猫猫狗狗"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        content: <span class="string">"小动物们的快乐"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><h4 id="2-6-2-使用Promise-语法"><a href="#2-6-2-使用Promise-语法" class="headerlink" title="2.6.2 使用Promise 语法"></a>2.6.2 使用<code>Promise</code> 语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">models.Article.create(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    title: <span class="string">"asdf"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    content: <span class="string">"asdfsadfsdf"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;).then(<span class="function"><span class="params">article</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure><h4 id="2-6-3-使用Postman测试接口"><a href="#2-6-3-使用Postman测试接口" class="headerlink" title="2.6.3 使用Postman测试接口"></a>2.6.3 使用<code>Postman</code>测试接口</h4><p>请求方式改为 <code>POST</code>，地址栏填上接口的地址。最后点击 <code>Send</code></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424162310" alt="在这里插入图片描述" style="zoom: 80%;"><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424162525.png" alt="image-20210424162524415" style="zoom:50%;"><h4 id="2-6-4-用户提交数据"><a href="#2-6-4-用户提交数据" class="headerlink" title="2.6.4 用户提交数据"></a>2.6.4 用户提交数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.post(&#39;&#x2F;&#39;, async function (req, res, next) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;&#39;你发送的内容是&#39;: req.body&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>注：<code>req.body</code>：用户使用 <code>post</code> 发送过来的内容</p><p><strong>测试接口</strong></p><p>打开 <code>Postman</code>，点击 <code>Body</code>，选择 <code>x-www-form-urlencoded</code>。<code>key</code> 要填对应数据库里的字段名称，<code>value</code> 里填插入数据库的数据。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424162648.png" alt="postman 测试 post提交数据" style="zoom: 50%;"><h4 id="2-6-5-将用户的数据插入数据库"><a href="#2-6-5-将用户的数据插入数据库" class="headerlink" title="2.6.5 将用户的数据插入数据库"></a>2.6.5 将用户的数据插入数据库</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.create(req.body);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><h3 id="2-7-数据库的删改查"><a href="#2-7-数据库的删改查" class="headerlink" title="2.7 数据库的删改查"></a>2.7 数据库的删改查</h3><h4 id="2-7-1-id属性"><a href="#2-7-1-id属性" class="headerlink" title="2.7.1 id属性"></a>2.7.1 <code>id</code>属性</h4><p>将<code>id</code>作为查询依据：</p><ul><li>每个数据都有<code>id</code>属性</li><li><code>id</code>属性自增，永远不会重复的</li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424163418.png" alt="image-20210424163417598" style="zoom:50%;"><p>定义的路由的时候，就在 <code>/</code> 后面加上一个 <code>:id</code>。这样定义后，表示这里可以接受一个 <code>文章id</code> 参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/:id'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">id</span>: req.params.id&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>使用 <code>req.params.id</code>方法，可以取到传入的id值</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424163657.png" alt="获取id" style="zoom:50%;"><h4 id="2-7-2-查询"><a href="#2-7-2-查询" class="headerlink" title="2.7.2 查询"></a>2.7.2 查询</h4><p>接收到用户传递的<code>id</code>值后，在模型中调用<code>findByPk</code>。 就可以在<code>Articles</code>表中找到当前文章</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/:id'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.findByPk(req.params.id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><blockquote><p>注意：<code>findByPk</code>，这里的 <code>Pk</code> 是 <code>Primary Key</code> 也就是<code>主键</code>的缩写。一般每个表都有个<code>主键</code>，如果没有特殊命名，一般来说就是 <code>id</code> 字段</p></blockquote><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424164129.png" alt="查询接口" style="zoom:50%;"><h4 id="2-7-3-修改"><a href="#2-7-3-修改" class="headerlink" title="2.7.3 修改"></a>2.7.3 修改</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.put(<span class="string">'/:id'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.findByPk(req.params.id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    article.update(req.body);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424164203.png" alt="修改接口" style="zoom: 50%;"><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424164211.png" alt="修改接口" style="zoom:50%;"><h4 id="2-7-4-删除"><a href="#2-7-4-删除" class="headerlink" title="2.7.4 删除"></a>2.7.4 删除</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.delete(<span class="string">'/:id'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.findByPk(req.params.id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    article.destroy();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">msg</span>: <span class="string">'删除成功'</span>&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>使用的请求方式是 <code>delete</code>。也是查询到当前文章后，直接调用 <code>destroy</code> 方法删掉它，返回 <code>msg: &#39;删除成功&#39;</code> 。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424164356.png" alt="删除接口" style="zoom: 50%;"><h4 id="2-7-5-总结"><a href="#2-7-5-总结" class="headerlink" title="2.7.5 总结"></a>2.7.5 总结</h4><table><thead><tr><th>路由</th><th>请求方式</th><th>含义</th></tr></thead><tbody><tr><td>/articles</td><td>get</td><td>查询所有文章</td></tr><tr><td>/articles/:id</td><td>get</td><td>查询指定 id 的文章</td></tr><tr><td>/articles</td><td>post</td><td>新增文章</td></tr><tr><td>/articles/:id</td><td>put</td><td>编辑指定 id 的文章</td></tr><tr><td>/articles/:id</td><td>delete</td><td>删除指定 id 的文章</td></tr></tbody></table><h3 id="2-8-模糊搜索"><a href="#2-8-模糊搜索" class="headerlink" title="2.8 模糊搜索"></a>2.8 模糊搜索</h3><p>定义一个叫做 <code>where</code> 的空对象，里面保存需要查询的条件。</p><p>接收<code>title</code>参数，<code>where</code> 里添加一个 <code>like</code>（<code>SQL</code> 语句语法）。前后各放了一个 <code>%</code>，前面有百分号，表示关键词，前面可以有其他文字。后面有百分号，就表示关键词后面，可以跟着其他文字。模型调用<code>findAll</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 搜索</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> where = &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 模糊查询标题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> title = req.query.title;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (title) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        where.title = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            [Op.like]: <span class="string">'%'</span> + title + <span class="string">'%'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> articles = <span class="keyword">await</span> models.Article.findAll(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        order: [[<span class="string">'id'</span>, <span class="string">'DESC'</span>]],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        where: where</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">articles</span>: articles&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><h3 id="2-9-分页查询"><a href="#2-9-分页查询" class="headerlink" title="2.9 分页查询"></a>2.9 分页查询</h3><h4 id="2-9-1-分页原理"><a href="#2-9-1-分页原理" class="headerlink" title="2.9.1 分页原理"></a>2.9.1 分页原理</h4><table><thead><tr><th align="center">当前页数（currentPage）</th><th align="center">从哪里开始（offset）</th><th align="center">每页显示多少条（pageSize）</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">0</td><td align="center">10</td></tr><tr><td align="center">2</td><td align="center">10</td><td align="center">10</td></tr><tr><td align="center">3</td><td align="center">20</td><td align="center">10</td></tr></tbody></table><p>由表格可知：</p><p> <code>pageSize</code> 参数是固定不动的，可以得出<code>offset</code>和<code>currentPage</code>的线性关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">offset &#x3D; (currentPage - 1) * pageSize</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">offset &#x3D; (当前页数 - 1) * 每页条数</span></pre></td></tr></table></figure><h4 id="2-9-2-分页实现"><a href="#2-9-2-分页实现" class="headerlink" title="2.9.2 分页实现"></a>2.9.2 分页实现</h4><p><strong>当前页数（currentPage）</strong></p><p>如果用户传了这个参数，<code>currentPage</code>则为用户传递的值（注：用户传递的数据都是字符串，需要使用 <code>parseInt</code> 方法转换）；如果用户没传，则默认是 <code>第一页</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentPage = <span class="built_in">parseInt</span>(req.query.currentPage) || <span class="number">1</span>;</span></pre></td></tr></table></figure><p>或</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentPage = <span class="built_in">parseInt</span>(req.query.currentPage);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!currentPage) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    currentPage = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>每页显示多少条（pageSize）</strong></p><p>如果用户传了这个参数，<code>pageSize</code>则为用户传递的值；如果用户不传递参数过来，随便给它一个默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageSize = <span class="built_in">parseInt</span>(req.query.pageSize) || <span class="number">2</span>;</span></pre></td></tr></table></figure><p><strong>findAndCountAll、offset 与 limit</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> models.Article.findAndCountAll(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    order:[[<span class="string">'id'</span>, <span class="string">'DESC'</span>]],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    where: where,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    offset: (currentPage - <span class="number">1</span>) * pageSize,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    limit: pageSize</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><ul><li>将 <code>findAll</code> 改为 <code>findAndCountAll</code>，因为<code>findAndCountAll</code> 能返回总的记录数</li><li>接收值的 <code>articles</code> 改为 <code>result</code>，因为不仅仅有<code>文章列表</code>，还有<code>记录总数</code></li><li>添加上 <code>offset</code> 和 <code>limit</code> 参数，<code>offset</code> 对应的值为公式得出的结果，<code>limit</code>的值为<code>pageSize</code></li></ul><p><strong>响应出分页的 <code>json</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> res.json(result);</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210425171239.png" alt="模糊查询" style="zoom: 50%;"><ul><li><code>count</code> 里，保存的就是记录总数了，咱们数据库一共就是只有 <code>4</code> 条记录</li><li><code>rows</code> 里，存的才是文章列表。</li></ul><p><strong>返回分页数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">res.json(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">       articles: result.rows,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">       pagination: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">           currentPage: currentPage,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">           pageSize: pageSize,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">           <span class="comment">// 一共有多少条记录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">           total: result.count</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   &#125;);</span></pre></td></tr></table></figure><h3 id="2-10-表的关联"><a href="#2-10-表的关联" class="headerlink" title="2.10 表的关联"></a>2.10 表的关联</h3><h4 id="2-10-1-评论模型"><a href="#2-10-1-评论模型" class="headerlink" title="2.10.1 评论模型"></a>2.10.1 评论模型</h4><p>给文章添加上评论模块，使用关联模型，在查询文章的时候，自动查询出对应的评论。</p><p>添加评论模型代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sequelize model:generate --name Comment --attributes articleId:integer,content:text</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ sequelize db:migrate</span></pre></td></tr></table></figure><h4 id="2-10-2-种子文件"><a href="#2-10-2-种子文件" class="headerlink" title="2.10.2 种子文件"></a>2.10.2 种子文件</h4><p><strong>创建建种子文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sequelize seed:generate --name comment</span></pre></td></tr></table></figure><p><strong>导入数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    up: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> queryInterface.bulkInsert(<span class="string">'Comments'</span>, [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                articleId: <span class="number">1</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                content: <span class="string">"这是文章1的评论"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                createdAt: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                updatedAt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                articleId: <span class="number">1</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                content: <span class="string">"这个还是文章1的评论啊"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                createdAt: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                updatedAt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                articleId: <span class="number">2</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                content: <span class="string">"这是文章2的评论"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                createdAt: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                updatedAt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        ], &#123;&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    down: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> queryInterface.bulkDelete(<span class="string">'Comments'</span>, <span class="literal">null</span>, &#123;&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><p><strong>刷新数据库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$  sequelize db:seed --seed xxxx-comment</span></pre></td></tr></table></figure><h4 id="2-10-3-关联"><a href="#2-10-3-关联" class="headerlink" title="2.10.3 关联"></a>2.10.3 关联</h4><p><strong>打开 <code>models/article.js</code> 模型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Article.associate = <span class="function"><span class="keyword">function</span> (<span class="params">models</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    models.Article.hasMany(models.Comment)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><blockquote><p>一篇文章中<strong>有很多</strong>评论</p></blockquote><p><strong>打开 <code>models/comment.js</code> 模型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Comment.associate = <span class="function"><span class="keyword">function</span>(<span class="params">models</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  models.Comment.belongsTo(models.Article);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><blockquote><p>每条评论都是<strong>属于</strong>一篇文章的</p></blockquote><h4 id="2-10-4-查询"><a href="#2-10-4-查询" class="headerlink" title="2.10.4 查询"></a>2.10.4 查询</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/:id'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.findOne(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        where: &#123;<span class="attr">id</span>: req.params.id&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        include: [models.Comment],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>加上<code>include</code>属性，会自动将当前文章对应的评论查出来</p><h4 id="2-10-5-效果"><a href="#2-10-5-效果" class="headerlink" title="2.10.5 效果"></a>2.10.5 效果</h4><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210425172651.png" alt="关联查询" style="zoom:50%;"><h2 id="3-参考及项目地址"><a href="#3-参考及项目地址" class="headerlink" title="3. 参考及项目地址"></a>3. 参考及项目地址</h2><h3 id="3-1-参考地址"><a href="#3-1-参考地址" class="headerlink" title="3.1 参考地址"></a>3.1 参考地址</h3><p><a href="[https://blog.csdn.net/u010132177/article/details/109145320?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161934100516780261912162%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161934100516780261912162&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-5-109145320.first_rank_v2_pc_rank_v29&utm_term=node%E7%94%A8express%E5%86%99%E5%90%8E%E7%AB%AFrestful%E6%8E%A5%E5%8F%A3%E5%AE%9E%E6%88%98&spm=1018.2226.3001.4187](https://blog.csdn.net/u010132177/article/details/109145320?ops_request_misc=%7B%22request%5Fid%22%3A%22161934100516780261912162%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&request_id=161934100516780261912162&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-5-109145320.first_rank_v2_pc_rank_v29&utm_term=node用express写后端restful接口实战&spm=1018.2226.3001.4187)">node用express写后端restful接口实战</a></p><h3 id="3-2-项目地址"><a href="#3-2-项目地址" class="headerlink" title="3.2 项目地址"></a>3.2 项目地址</h3>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简易Node后端搭建&quot;&gt;&lt;a href=&quot;#简易Node后端搭建&quot; class=&quot;headerlink&quot; title=&quot;简易Node后端搭建&quot;&gt;&lt;/a&gt;简易Node后端搭建&lt;/h1&gt;&lt;h2 id=&quot;1-Express&quot;&gt;&lt;a href=&quot;#1-Express&quot; class=&quot;headerlink&quot; title=&quot;1. Express&quot;&gt;&lt;/a&gt;1. Express&lt;/h2&gt;&lt;h3 id=&quot;1-1-安装&quot;&gt;&lt;a href=&quot;#1-1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装&quot;&gt;&lt;/a&gt;1.1 安装&lt;/h3&gt;&lt;h4 id=&quot;1-1-1-安装淘宝镜像&quot;&gt;&lt;a href=&quot;#1-1-1-安装淘宝镜像&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 安装淘宝镜像&quot;&gt;&lt;/a&gt;1.1.1 安装淘宝镜像&lt;/h4&gt;&lt;p&gt;安装npm之前可先安装淘宝镜像，使用cnpm的来代替npm，使得下载速度提高很多。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g cnpm --registry&amp;#x3D;https:&amp;#x2F;&amp;#x2F;registry.npm.taobao.org&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;1-1-2-初始化项目&quot;&gt;&lt;a href=&quot;#1-1-2-初始化项目&quot; class=&quot;headerlink&quot; title=&quot;1.1.2 初始化项目&quot;&gt;&lt;/a&gt;1.1.2 初始化项目&lt;/h4&gt;&lt;p&gt;目录下运行命令来初始化项目，期间所有提示按enter键即可，这会生成&lt;code&gt;package.json&lt;/code&gt;，用于描述项目文件的.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cnpm init&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Node后端" scheme="https://ming-clavin.github.io/categories/Node%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端" scheme="https://ming-clavin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Node" scheme="https://ming-clavin.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Typora上传图片时,文件以时间戳命名</title>
    <link href="https://ming-clavin.github.io/2020/12/14/2020/Typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%B6-%E6%96%87%E4%BB%B6%E4%BB%A5%E6%97%B6%E9%97%B4%E6%88%B3%E5%91%BD%E5%90%8D/"/>
    <id>https://ming-clavin.github.io/2020/12/14/2020/Typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%B6-%E6%96%87%E4%BB%B6%E4%BB%A5%E6%97%B6%E9%97%B4%E6%88%B3%E5%91%BD%E5%90%8D/</id>
    <published>2020-12-14T14:03:38.000Z</published>
    <updated>2020-12-14T14:13:29.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、查询之前安装的PicGo执行路径"><a href="#一、查询之前安装的PicGo执行路径" class="headerlink" title="一、查询之前安装的PicGo执行路径"></a>一、查询之前安装的PicGo执行路径</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214170157.png" alt="image-20201214170155882" style="zoom: 67%;"><a id="more"></a><h1 id="二、安装插件"><a href="#二、安装插件" class="headerlink" title="二、安装插件"></a>二、安装插件</h1><p>进入cmd输入代码安装插件（super-prefix插件 —— 用于上传图片时能自动使用时间戳重命名）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd C:\Users\Administrator\AppData\Roaming\Typora\picgo\win64</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">.\picgo.exe install super-prefix</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214170742.png" alt="image-20201214170740861"><h1 id="三、修改配置文件"><a href="#三、修改配置文件" class="headerlink" title="三、修改配置文件"></a>三、修改配置文件</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">"picgoPlugins": &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    "picgo-plugin-super-prefix": true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  &#125;, // 为插件预留</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  "picgo-plugin-super-prefix": &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    "fileFormat": "YYYYMMDDHHmmss"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125; //super-prefix插件配置</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214171510.png" alt="image-20201214171508681" style="zoom:80%;"><h1 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h1><p><a href="https://blog.csdn.net/in_the_road/article/details/105733292">Typora自动上传图片配置，集成PicGo-Core，文件以时间戳命名</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、查询之前安装的PicGo执行路径&quot;&gt;&lt;a href=&quot;#一、查询之前安装的PicGo执行路径&quot; class=&quot;headerlink&quot; title=&quot;一、查询之前安装的PicGo执行路径&quot;&gt;&lt;/a&gt;一、查询之前安装的PicGo执行路径&lt;/h1&gt;&lt;br&gt;

&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214170157.png&quot; alt=&quot;image-20201214170155882&quot; style=&quot;zoom: 67%;&quot;&gt;</summary>
    
    
    
    <category term="Markdown" scheme="https://ming-clavin.github.io/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://ming-clavin.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>js获取对象属性值的2种方法</title>
    <link href="https://ming-clavin.github.io/2020/11/25/2020/js%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%842%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://ming-clavin.github.io/2020/11/25/2020/js%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%842%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2020-11-25T15:00:58.000Z</published>
    <updated>2020-11-25T15:03:01.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一种：通过-的方式获取"><a href="#第一种：通过-的方式获取" class="headerlink" title="第一种：通过 . 的方式获取"></a>第一种：通过 . 的方式获取</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201125140648489.png" alt="image-20201125140648489"></p><h1 id="第二种：通过-的方式获取"><a href="#第二种：通过-的方式获取" class="headerlink" title="第二种：通过 [ ] 的方式获取"></a>第二种：通过 [ ] 的方式获取</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201125141041462.png" alt="image-20201125141041462"></p><blockquote><p>注意：用数组下标获取值的方式获取属性，记得要给属性加引号</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/tu-0718/p/13218006.html">js获取对象属性值的2种方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一种：通过-的方式获取&quot;&gt;&lt;a href=&quot;#第一种：通过-的方式获取&quot; class=&quot;headerlink&quot; title=&quot;第一种：通过 . 的方式获取&quot;&gt;&lt;/a&gt;第一种：通过 . 的方式获取&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;&lt;img src=&quot;https://ca</summary>
      
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://ming-clavin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>vue-router模块</title>
    <link href="https://ming-clavin.github.io/2020/11/24/2020/vue-router%E6%A8%A1%E5%9D%97/"/>
    <id>https://ming-clavin.github.io/2020/11/24/2020/vue-router%E6%A8%A1%E5%9D%97/</id>
    <published>2020-11-24T13:01:00.000Z</published>
    <updated>2021-04-28T07:53:03.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Vue路由传参query和params的区别"><a href="#一、Vue路由传参query和params的区别" class="headerlink" title="一、Vue路由传参query和params的区别"></a>一、Vue路由传参query和params的区别</h1><h2 id="1-区别"><a href="#1-区别" class="headerlink" title="1. 区别"></a>1. 区别</h2><ol><li>query使用path和name传参跳转都可以，而params只能使用name传参跳转</li><li>传参跳转页面时，query和params不需要在路由上配参数就能在新的页面获取到参数</li><li>但params不在路由配参数的话，当用户刷新当前页面的时候，参数就会消失。</li></ol><h2 id="2-样例"><a href="#2-样例" class="headerlink" title="2. 样例"></a>2. 样例</h2><h3 id="2-1-query传参"><a href="#2-1-query传参" class="headerlink" title="2.1 query传参"></a>2.1 query传参</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在方法里面写 也可以用name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123; path:&#39;&#x2F;search&#39;, query: &#123; categoryId: this.categoryId &#125;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; router-link里面的to</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;path:&#39;&#x2F;search&#39;,query: &#123;categoryId: item.categoryId&#125;&#125;&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">接收参数：this.categoryId &#x3D; this.$route.query.categoryId ;</span></pre></td></tr></table></figure><a id="more"></a><h3 id="2-2-params传参"><a href="#2-2-params传参" class="headerlink" title="2.2 params传参"></a>2.2 params传参</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//在方法里面写</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="attr">name</span>::<span class="string">'/search'</span>, <span class="attr">query</span>: &#123; <span class="attr">categoryId</span>: <span class="keyword">this</span>.categoryId &#125;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// router-link里面的to</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"&#123;name::'/search',query: &#123;categoryId: item.categoryId&#125;&#125;"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">接收参数：<span class="keyword">this</span>.categoryId = <span class="keyword">this</span>.$route.params.categoryId ;</span></pre></td></tr></table></figure><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><a href="https://blog.csdn.net/Brian_Jing/article/details/100987080">Vue路由传参query和params的区别</a></p><br><h1 id="二、Vue-详解设置路由导航的两种方法"><a href="#二、Vue-详解设置路由导航的两种方法" class="headerlink" title="二、Vue-详解设置路由导航的两种方法"></a>二、Vue-详解设置路由导航的两种方法</h1><h2 id="1-方法"><a href="#1-方法" class="headerlink" title="1. 方法"></a>1. 方法</h2><h3 id="1-1-使用-lt-router-link-to-quot-quot-gt"><a href="#1-1-使用-lt-router-link-to-quot-quot-gt" class="headerlink" title="1.1 使用&lt;router-link :to=&quot;...&quot;&gt;"></a>1.1 使用<code>&lt;router-link :to=&quot;...&quot;&gt;</code></h3><p><strong>to里的值可以是一个字符串路径，或者一个描述地址的对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">"apple"</span>&gt; to apple&lt;<span class="regexp">/router-link&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">/</span><span class="regexp">/ 对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">&lt;router-link :to="&#123; path:'apple' &#125;"&gt; to apple&lt;/</span>router-link&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名路由</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"&#123; name:'applename' &#125;"</span>&gt; to apple&lt;<span class="regexp">/router-link&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">/</span><span class="regexp">/ 直接路由带查询参数query，地址栏变成 /</span>apple?color=red</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"&#123; path:'apple', query: &#123; color:'red' &#125;&#125;"</span>&gt; to apple&lt;<span class="regexp">/router-link&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">/</span><span class="regexp">/ 命名路由带查询参数query，地址栏变成/</span>apple?color=red</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"&#123; name:'applename', query: &#123; color:'red' &#125;&#125;"</span>&gt; to apple&lt;<span class="regexp">/router-link&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">/</span><span class="regexp">/ 直接路由带路由参数params，params 不生效，如果提供了 path，params 会被忽略</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">&lt;router-link :to="&#123; path:'apple', params: &#123; color:'red' &#125;&#125;"&gt; to apple&lt;/</span>router-link&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名路由带路由参数params，地址栏是/apple/red</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"&#123; name:'applename', params: &#123; color:'red' &#125;&#125;"</span>&gt; to apple&lt;<span class="regexp">/router-link&gt;</span></span></pre></td></tr></table></figure><h3 id="1-2-router-push-…-方法"><a href="#1-2-router-push-…-方法" class="headerlink" title="1.2 router.push(…)方法"></a>1.2 router.push(…)方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">router.push(<span class="string">'apple'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">path</span>:<span class="string">'apple'</span> &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名路由</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'applename'</span> &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接路由带查询参数query，地址栏变成 /apple?color=red</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'apple'</span>, <span class="attr">query</span>: &#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名路由带查询参数query，地址栏变成/apple?color=red</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'applename'</span>, <span class="attr">query</span>: &#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接路由带路由参数params，params 不生效，如果提供了 path，params 会被忽略</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">path</span>:<span class="string">'applename'</span>, <span class="attr">params</span>:&#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名路由带路由参数params，地址栏是/apple/red</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">name</span>:<span class="string">'applename'</span>, <span class="attr">params</span>:&#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;&#125;)</span></pre></td></tr></table></figure><h2 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2. 注意事项"></a>2. 注意事项</h2><h3 id="2-1-关于带参数的路由"><a href="#2-1-关于带参数的路由" class="headerlink" title="2.1 关于带参数的路由"></a>2.1 关于带参数的路由</h3><blockquote><p><strong>查询参数query：</strong></p><p>无论是直接路由“path” 还是命名路由“name”，带查询参数query，地址栏会变成“/url?查询参数名：查询参数值“;</p></blockquote><blockquote><p><strong>查询参数params：</strong></p><p>直接路由“path” 带路由参数params  params 不生效;<br>命名路由“name” 带路由参数params 地址栏保持是“/url/路由参数值”;</p></blockquote><h3 id="2-2-设置路由map里的path值"><a href="#2-2-设置路由map里的path值" class="headerlink" title="2.2 设置路由map里的path值"></a>2.2 <strong>设置路由map里的path值</strong></h3><p> 带路由参数params时，路由map里的path应该写成: path:’/apple/:color’ ;<br> 带查询参数query时，路由map里的path应该写成: path:’/apple’ ；</p><h3 id="2-3-获取参数方法"><a href="#2-3-获取参数方法" class="headerlink" title="2.3 获取参数方法"></a>2.3 获取参数方法</h3><p>在组件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;&#123;$route.params.color&#125;&#125;</span></pre></td></tr></table></figure><p>在js里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">this.$route.params.color</span></pre></td></tr></table></figure><h2 id="3-参考-1"><a href="#3-参考-1" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><a href="https://www.cnblogs.com/superlizhao/p/8527317.html">Vue-详解设置路由导航的两种方法</a></p><br><h1 id="三、命名路由"><a href="#三、命名路由" class="headerlink" title="三、命名路由"></a>三、命名路由</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p><strong>给一个路由命一个唯一的名称，然后跳转调用这个名称即可</strong></p><h2 id="2-样例-1"><a href="#2-样例-1" class="headerlink" title="2. 样例"></a>2. 样例</h2><p>（1）在src/router/index.js中加一个带name的路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    path: &#39;one&#39;, &#x2F;&#x2F; 子页面1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    name: &#39;one&#39;, &#x2F;&#x2F; 路由名称-命名路由</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    component: One &#x2F;&#x2F; 页面组件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>（2）在src/component/Home.vue页面中调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; template跳转调用</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123; name: &#39;one&#39; &#125;&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">子页面1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;router-link&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; router.push函数跳转调用</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; name: &#39;user&#39; &#125;&#125;)</span></pre></td></tr></table></figure><h2 id="3-参考-2"><a href="#3-参考-2" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><a href="https://blog.51cto.com/4547985/2390802">vue-router之命名路由-命名视图-重定向-别名（五）</a></p><h1 id="四、使用vue-router"><a href="#四、使用vue-router" class="headerlink" title="四、使用vue-router"></a>四、使用vue-router</h1><h2 id="1-三要素"><a href="#1-三要素" class="headerlink" title="1. 三要素"></a>1. 三要素</h2><p>vue-router有三个要素：<strong>路由map、路由视图、路由导航</strong>。</p><blockquote><ol><li>路由map指路由与组件的映射关系；</li><li>路由视图指路由映射对应组件的渲染位置；</li><li>路由导航指可以使地址栏发生变化的导航链接。</li></ol></blockquote><h2 id="2-路由map"><a href="#2-路由map" class="headerlink" title="2. 路由map"></a>2. 路由map</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">import App from &#39;.&#x2F;App&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1、在入口文件main.js里引入</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">import VRouter from &#39;vue-router&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Vue.config.productionTip &#x3D; false</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;2、用全局方法use()来注册使用vue-router</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Vue.use(VRouter);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;4、实例化全局router  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">let router&#x3D;new VRouter(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   &#x2F;&#x2F;以下是路由map</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    routes:[</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            path:&#39;&#x2F;apple&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            component:Apple</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            path:&#39;&#x2F;banana&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            component:Banana</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  el: &#39;#app&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  router,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F;3、注册组件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  components: &#123; App,VRouter &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure><h2 id="3-路由视图"><a href="#3-路由视图" class="headerlink" title="3. 路由视图"></a>3. 路由视图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span></pre></td></tr></table></figure><h2 id="4-路由导航"><a href="#4-路由导航" class="headerlink" title="4. 路由导航"></a>4. 路由导航</h2><h3 id="4-1-使用-lt-router-link-gt-创建-a-标签来定义导航链接"><a href="#4-1-使用-lt-router-link-gt-创建-a-标签来定义导航链接" class="headerlink" title="4.1 使用&lt;router-link&gt; 创建 a 标签来定义导航链接"></a>4.1 使用<code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;path:&#39;apple&#39;&#125;&quot;&gt; to apple&lt;&#x2F;router-link&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;path:&#39;banana&#39;&#125;&quot;&gt;to apple&lt;&#x2F;router-link&gt;</span></pre></td></tr></table></figure><h3 id="4-2-使用-router-push-方法"><a href="#4-2-使用-router-push-方法" class="headerlink" title="4.2 使用 router.push 方法"></a>4.2 使用 router.push 方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; path: &#39;apple&#39; &#125;)</span></pre></td></tr></table></figure><p>注：点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 router.push(…)</p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><p><a href="https://www.cnblogs.com/superlizhao/p/8515640.html">Vue-初步了解vue-router的三要素：路由map 、路由视图、路由导航</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、Vue路由传参query和params的区别&quot;&gt;&lt;a href=&quot;#一、Vue路由传参query和params的区别&quot; class=&quot;headerlink&quot; title=&quot;一、Vue路由传参query和params的区别&quot;&gt;&lt;/a&gt;一、Vue路由传参query和params的区别&lt;/h1&gt;&lt;h2 id=&quot;1-区别&quot;&gt;&lt;a href=&quot;#1-区别&quot; class=&quot;headerlink&quot; title=&quot;1. 区别&quot;&gt;&lt;/a&gt;1. 区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;query使用path和name传参跳转都可以，而params只能使用name传参跳转&lt;/li&gt;
&lt;li&gt;传参跳转页面时，query和params不需要在路由上配参数就能在新的页面获取到参数&lt;/li&gt;
&lt;li&gt;但params不在路由配参数的话，当用户刷新当前页面的时候，参数就会消失。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-样例&quot;&gt;&lt;a href=&quot;#2-样例&quot; class=&quot;headerlink&quot; title=&quot;2. 样例&quot;&gt;&lt;/a&gt;2. 样例&lt;/h2&gt;&lt;h3 id=&quot;2-1-query传参&quot;&gt;&lt;a href=&quot;#2-1-query传参&quot; class=&quot;headerlink&quot; title=&quot;2.1 query传参&quot;&gt;&lt;/a&gt;2.1 query传参&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;在方法里面写 也可以用name&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;this.$router.push(&amp;#123; path:&amp;#39;&amp;#x2F;search&amp;#39;, query: &amp;#123; categoryId: this.categoryId &amp;#125;&amp;#125;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F; router-link里面的to&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;router-link :to&amp;#x3D;&amp;quot;&amp;#123;path:&amp;#39;&amp;#x2F;search&amp;#39;,query: &amp;#123;categoryId: item.categoryId&amp;#125;&amp;#125;&amp;quot;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;接收参数：this.categoryId &amp;#x3D; this.$route.query.categoryId ;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="VUE整理" scheme="https://ming-clavin.github.io/categories/VUE%E6%95%B4%E7%90%86/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="VUE" scheme="https://ming-clavin.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>img和div之间有间隙的原因及解决方法</title>
    <link href="https://ming-clavin.github.io/2020/11/24/2020/img%E5%92%8Cdiv%E4%B9%8B%E9%97%B4%E6%9C%89%E9%97%B4%E9%9A%99%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://ming-clavin.github.io/2020/11/24/2020/img%E5%92%8Cdiv%E4%B9%8B%E9%97%B4%E6%9C%89%E9%97%B4%E9%9A%99%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2020-11-23T17:22:45.000Z</published>
    <updated>2020-11-23T17:26:27.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><br><p>问题：display:inline-block布局的元素在chrome<strong>下会出现几像素的间隙</strong></p><p>原因：div 中 存在 img标签，由于img标签的 <strong>display:inline-block</strong> 属性。</p><blockquote><p><strong>inline-block的“换行符/空格间隙问题”：</strong></p><p>​    在编辑器里写代码的时候，同级别的标签不写在同一行，以保持代码的整齐可读性。即inline-block布局的元素在编辑器里不在同一行，即存在换行符，当inline-block元素间有空格或是换行则会产生间隙。</p></blockquote><h1 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h1><h2 id="1-把img标签的display属性改成block："><a href="#1-把img标签的display属性改成block：" class="headerlink" title="1. 把img标签的display属性改成block："></a>1. 把img标签的display属性改成block：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">dispaly</span>:block;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><a id="more"></a><h2 id="2-把div中的字体大小设为0"><a href="#2-把div中的字体大小设为0" class="headerlink" title="2. 把div中的字体大小设为0"></a>2. 把div中的字体大小设为0</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">font-size</span>:<span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="3-修改img的vertical-align属性"><a href="#3-修改img的vertical-align属性" class="headerlink" title="3. 修改img的vertical-align属性"></a>3. 修改img的vertical-align属性</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">vertical-align</span>:buttom; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">vertical-align</span>:middle; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">vertical-align</span>:top; &#125;</span></pre></td></tr></table></figure><h1 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h1><p><a href="https://www.cnblogs.com/vanstrict/p/4961300.html">div之间有间隙以及img和div之间有间隙的原因及解决方法</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;问题：display:inline-block布局的元素在chrome&lt;strong&gt;下会出现几像素的间隙&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原因：div 中 存在 img标签，由于img标签的 &lt;strong&gt;display:inline-block&lt;/strong&gt; 属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;inline-block的“换行符/空格间隙问题”：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    在编辑器里写代码的时候，同级别的标签不写在同一行，以保持代码的整齐可读性。即inline-block布局的元素在编辑器里不在同一行，即存在换行符，当inline-block元素间有空格或是换行则会产生间隙。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;二、解决方法&quot;&gt;&lt;a href=&quot;#二、解决方法&quot; class=&quot;headerlink&quot; title=&quot;二、解决方法&quot;&gt;&lt;/a&gt;二、解决方法&lt;/h1&gt;&lt;h2 id=&quot;1-把img标签的display属性改成block：&quot;&gt;&lt;a href=&quot;#1-把img标签的display属性改成block：&quot; class=&quot;headerlink&quot; title=&quot;1. 把img标签的display属性改成block：&quot;&gt;&lt;/a&gt;1. 把img标签的display属性改成block：&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;img&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;dispaly&lt;/span&gt;:block;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://ming-clavin.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>a标签去除默认样式</title>
    <link href="https://ming-clavin.github.io/2020/11/24/2020/a%E6%A0%87%E7%AD%BE%E5%8E%BB%E9%99%A4%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F/"/>
    <id>https://ming-clavin.github.io/2020/11/24/2020/a%E6%A0%87%E7%AD%BE%E5%8E%BB%E9%99%A4%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F/</id>
    <published>2020-11-23T16:57:10.000Z</published>
    <updated>2020-11-23T17:30:00.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、初始的链接"><a href="#一、初始的链接" class="headerlink" title="一、初始的链接"></a>一、初始的链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">text-decoration</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="二、正常的未被访问过的链接"><a href="#二、正常的未被访问过的链接" class="headerlink" title="二、正常的未被访问过的链接"></a>二、正常的未被访问过的链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">text-decoration</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="三、已经访问过的链接"><a href="#三、已经访问过的链接" class="headerlink" title="三、已经访问过的链接"></a>三、已经访问过的链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">text-decoration</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><a id="more"></a><h1 id="四、-鼠标划过-停留-的链接"><a href="#四、-鼠标划过-停留-的链接" class="headerlink" title="四、 鼠标划过(停留)的链接"></a>四、 鼠标划过(停留)的链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">text-decoration</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="五、-正在点击的链接"><a href="#五、-正在点击的链接" class="headerlink" title="五、 正在点击的链接"></a>五、 正在点击的链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">text-decoration</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="六、-参考"><a href="#六、-参考" class="headerlink" title="六、 参考"></a>六、 参考</h1><p><a href="https://www.cnblogs.com/PHP0222wangdong/p/11360624.html"><code>&lt;a&gt;</code> 标签去除默认样式</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、初始的链接&quot;&gt;&lt;a href=&quot;#一、初始的链接&quot; class=&quot;headerlink&quot; title=&quot;一、初始的链接&quot;&gt;&lt;/a&gt;一、初始的链接&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;: none;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;二、正常的未被访问过的链接&quot;&gt;&lt;a href=&quot;#二、正常的未被访问过的链接&quot; class=&quot;headerlink&quot; title=&quot;二、正常的未被访问过的链接&quot;&gt;&lt;/a&gt;二、正常的未被访问过的链接&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:link&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;: none;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;三、已经访问过的链接&quot;&gt;&lt;a href=&quot;#三、已经访问过的链接&quot; class=&quot;headerlink&quot; title=&quot;三、已经访问过的链接&quot;&gt;&lt;/a&gt;三、已经访问过的链接&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:visited&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;: none;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://ming-clavin.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>积分商城（平台端）总结</title>
    <link href="https://ming-clavin.github.io/2020/11/24/2020/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E%EF%BC%88%E5%B9%B3%E5%8F%B0%E7%AB%AF%EF%BC%89%E6%80%BB%E7%BB%93/"/>
    <id>https://ming-clavin.github.io/2020/11/24/2020/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E%EF%BC%88%E5%B9%B3%E5%8F%B0%E7%AB%AF%EF%BC%89%E6%80%BB%E7%BB%93/</id>
    <published>2020-11-23T16:42:47.000Z</published>
    <updated>2020-11-23T16:49:31.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、将积分基础设置改入到后台设置"><a href="#一、将积分基础设置改入到后台设置" class="headerlink" title="一、将积分基础设置改入到后台设置"></a>一、将积分基础设置改入到后台设置</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116093153205.png" alt="image-20201116093153205"></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116102416954.png" alt="image-20201116102416954" style="zoom: 67%;"><a id="more"></a><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116101951541.png" alt="image-20201116101951541"></p><h1 id="二、展开运算符"><a href="#二、展开运算符" class="headerlink" title="二、展开运算符"></a>二、展开运算符</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/Snipaste_2020-11-09_17-54-23.png" alt="Snipaste_2020-11-09_17-54-23"></p><h1 id="三、ref-和-ref"><a href="#三、ref-和-ref" class="headerlink" title="三、ref 和 $ref"></a>三、ref 和 $ref</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116101631105.png" alt="image-20201116101631105" style="zoom: 67%;"><p>1、<strong>ref 需要在dom渲染完成后才会有</strong>，在使用的时候确保dom已经渲染完成。比如在生命周期 <strong>mounted(){} 钩子中调用</strong>，或者<strong>在 this.$nextTick(()=&gt;{}) 中调用</strong>。</p><p>2、如果ref 是循环出来的，<strong>有多个重名，那么ref的值会是一个数组</strong> ，此时要拿到单个的ref 只需要循环就可以了。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子 :"></a>例子 :</h2><h3 id="1-添加ref属性"><a href="#1-添加ref属性" class="headerlink" title="1.添加ref属性"></a>1.添加ref属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    &lt;h1 ref&#x3D;&quot;h1Ele&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &lt;hello ref&#x3D;&quot;ho&quot;&gt;&lt;&#x2F;hello&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &lt;button @click&#x3D;&quot;getref&quot;&gt;获取H1元素&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;div&gt;</span></pre></td></tr></table></figure><h3 id="2-获取注册过-ref-的所有组件或元素"><a href="#2-获取注册过-ref-的所有组件或元素" class="headerlink" title="2.获取注册过 ref 的所有组件或元素"></a>2.获取注册过 ref 的所有组件或元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">methods: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        getref() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">          &#x2F;&#x2F; 表示从 $refs对象 中, 获取 ref 属性值为: h1ele DOM元素或组件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">           console.log(this.$refs.h1Ele.innerText);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">           this.$refs.h1ele.style.color &#x3D; &#39;red&#39;;&#x2F;&#x2F; 修改html样式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">          console.log(this.$refs.ho.msg);&#x2F;&#x2F; 获取组件数据</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">          console.log(this.$refs.ho.test);&#x2F;&#x2F; 获取组件的方法</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr></table></figure><h1 id="四、表单验证函数"><a href="#四、表单验证函数" class="headerlink" title="四、表单验证函数"></a>四、表单验证函数</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116103351424.png" alt="image-20201116103351424" style="zoom:67%;"><h1 id="五、表单重置函数"><a href="#五、表单重置函数" class="headerlink" title="五、表单重置函数"></a>五、表单重置函数</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116103926570.png" alt="image-20201116103926570" style="zoom: 80%;"><h1 id="六、服务器连接报错"><a href="#六、服务器连接报错" class="headerlink" title="六、服务器连接报错"></a>六、服务器连接报错</h1><br><blockquote><p>原因：连接的不是同一个内网</p></blockquote><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201116141314.png" alt="微信图片_20201116141314"></p><h1 id="七、常用-的意义"><a href="#七、常用-的意义" class="headerlink" title="七、常用 $ 的意义"></a>七、常用 $ 的意义</h1><br><ul><li>this.$data :  vm上的数据</li><li>this.$watch :  监控</li><li>this.$el :  当前el元素</li><li>this.$set :  后加的属性实现响应式变化</li><li>this.$nextTick :  异步方法，等待渲染dom完成后来获取vm</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">let vm &#x3D; new Vue(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        el:&#39;#app&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        data:&#123;msg:&#39;hello&#39;,arr:[1,2,3]&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        mounted()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            this.$nextTick(()&#x3D;&gt;&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                console.log(vm);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr></table></figure><h1 id="八、-emit的用法"><a href="#八、-emit的用法" class="headerlink" title="八、$emit的用法"></a>八、$emit的用法</h1><br><blockquote><p>父组件使用 <strong>props</strong> 把数据传给子组件。<br>子组件使用 <strong>$emit</strong> 触发父组件的自定义事件。</p></blockquote><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201117174623572.png" alt="image-20201117174623572" style="zoom:80%;"><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201117174838597.png" alt="image-20201117174838597" style="zoom:80%;"><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201117174940658.png" alt="image-20201117174940658" style="zoom:80%;"><h1 id="九、修改测试Bug的环境"><a href="#九、修改测试Bug的环境" class="headerlink" title="九、修改测试Bug的环境"></a>九、修改测试Bug的环境</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120093830136.png" alt="image-20201120093830136" style="zoom: 80%;"><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120093943514.png" alt="image-20201120093943514" style="zoom:67%;"><h1 id="十、权限控制函数"><a href="#十、权限控制函数" class="headerlink" title="十、权限控制函数"></a>十、权限控制函数</h1><br><h2 id="1-isAuth-–-是否拥有指定权限"><a href="#1-isAuth-–-是否拥有指定权限" class="headerlink" title="1. isAuth – 是否拥有指定权限"></a>1. isAuth – 是否拥有指定权限</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120112615869.png" alt="image-20201120112615869" style="zoom:80%;"><h2 id="2-权限分配页面"><a href="#2-权限分配页面" class="headerlink" title="2. 权限分配页面"></a>2. 权限分配页面</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120113144503.png" alt="image-20201120113144503" style="zoom:80%;"><h2 id="3-修改权限页面"><a href="#3-修改权限页面" class="headerlink" title="3. 修改权限页面"></a>3. 修改权限页面</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120113354198.png" alt="image-20201120113354198" style="zoom: 50%;"><h1 id="十一、图片访问地址出错-–-字符串拼接导致"><a href="#十一、图片访问地址出错-–-字符串拼接导致" class="headerlink" title="十一、图片访问地址出错 – 字符串拼接导致"></a>十一、图片访问地址出错 – 字符串拼接导致</h1><h2 id="1-通过F12找到出错原因-–-字符串拼接错误"><a href="#1-通过F12找到出错原因-–-字符串拼接错误" class="headerlink" title="1. 通过F12找到出错原因 – 字符串拼接错误"></a>1. 通过F12找到出错原因 – 字符串拼接错误</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120140937640.png" alt="image-20201120140937640" style="zoom:80%;"><h2 id="2-找到路径文件的“src”，查找原因"><a href="#2-找到路径文件的“src”，查找原因" class="headerlink" title="2. 找到路径文件的“src”，查找原因"></a>2. 找到路径文件的“src”，查找原因</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120141222061.png" alt="image-20201120141222061" style="zoom:80%;"><blockquote><p><strong>解决方法：</strong></p><p>与后端交接，让后端传的value为后面的值，而不是一整个地址</p></blockquote><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120105245550.png" alt="image-20201120105245550" style="zoom:80%;">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、将积分基础设置改入到后台设置&quot;&gt;&lt;a href=&quot;#一、将积分基础设置改入到后台设置&quot; class=&quot;headerlink&quot; title=&quot;一、将积分基础设置改入到后台设置&quot;&gt;&lt;/a&gt;一、将积分基础设置改入到后台设置&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116093153205.png&quot; alt=&quot;image-20201116093153205&quot;&gt;&lt;/p&gt;
&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116102416954.png&quot; alt=&quot;image-20201116102416954&quot; style=&quot;zoom: 67%;&quot;&gt;</summary>
    
    
    
    <category term="积分商城" scheme="https://ming-clavin.github.io/categories/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="VUE" scheme="https://ming-clavin.github.io/tags/VUE/"/>
    
    <category term="积分商城" scheme="https://ming-clavin.github.io/tags/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E/"/>
    
  </entry>
  
  <entry>
    <title>el-if、el-else-if、el-else</title>
    <link href="https://ming-clavin.github.io/2020/11/11/2020/el-if%E3%80%81el-else-if%E3%80%81el-else/"/>
    <id>https://ming-clavin.github.io/2020/11/11/2020/el-if%E3%80%81el-else-if%E3%80%81el-else/</id>
    <published>2020-11-10T16:28:49.000Z</published>
    <updated>2020-11-24T14:08:24.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、v-if-与-v-else"><a href="#一、v-if-与-v-else" class="headerlink" title="一、v-if 与 v-else"></a>一、v-if 与 v-else</h1><p><strong>v-if为真时，显示v-if的内容，否则显示v-else的内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;h2 v-if&#x3D;&quot;true&quot;&gt;v-if&lt;&#x2F;h2&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;h2 v-else&gt;v-else&lt;&#x2F;h2&gt;</span></pre></td></tr></table></figure><blockquote><p>v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</p></blockquote><br><h1 id="二、v-else-if"><a href="#二、v-else-if" class="headerlink" title="二、v-else-if"></a>二、v-else-if</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;div v-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot;&gt; A &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot;&gt; B &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot;&gt; C &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;div v-else&gt;</span></pre></td></tr></table></figure><blockquote><p>类似于 v-else，v-else-if 也必须紧跟在带 v-if 或者 v-else-if 的元素之后</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、v-if-与-v-else&quot;&gt;&lt;a href=&quot;#一、v-if-与-v-else&quot; class=&quot;headerlink&quot; title=&quot;一、v-if 与 v-else&quot;&gt;&lt;/a&gt;一、v-if 与 v-else&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;v-if为真时，显示</summary>
      
    
    
    
    <category term="VUE整理" scheme="https://ming-clavin.github.io/categories/VUE%E6%95%B4%E7%90%86/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="VUE" scheme="https://ming-clavin.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>积分商城（商家端）总结</title>
    <link href="https://ming-clavin.github.io/2020/11/07/2020/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E%EF%BC%88%E5%95%86%E5%AE%B6%E7%AB%AF%EF%BC%89%E6%80%BB%E7%BB%93/"/>
    <id>https://ming-clavin.github.io/2020/11/07/2020/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E%EF%BC%88%E5%95%86%E5%AE%B6%E7%AB%AF%EF%BC%89%E6%80%BB%E7%BB%93/</id>
    <published>2020-11-07T08:28:47.000Z</published>
    <updated>2020-11-09T17:20:57.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、组件的调用方式"><a href="#一、组件的调用方式" class="headerlink" title="一、组件的调用方式"></a>一、组件的调用方式</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%200-51.png" alt="2020-11-10-0-51"></p><h1 id="二、element-ui表单必填写法"><a href="#二、element-ui表单必填写法" class="headerlink" title="二、element-ui表单必填写法"></a>二、element-ui表单必填写法</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%200-52.png" alt="2020-11-10-0-52"></p><a id="more"></a><h1 id="三、this-nextTick-函数的用法"><a href="#三、this-nextTick-函数的用法" class="headerlink" title="三、this.$nextTick()函数的用法"></a>三、this.$nextTick()函数的用法</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%200-53.png" alt="2020-11-10-0-53"></p><h1 id="四、element-ui输入框提示写法"><a href="#四、element-ui输入框提示写法" class="headerlink" title="四、element-ui输入框提示写法"></a>四、element-ui输入框提示写法</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%200-54.png" style="zoom: 67%;"><h1 id="五、判断路由是否满足条件"><a href="#五、判断路由是否满足条件" class="headerlink" title="五、判断路由是否满足条件"></a>五、判断路由是否满足条件</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%200-55.png" alt="2020-11-10-0-55" style="zoom: 67%;"><p><font size="4"> <strong>flist属性：</strong></font></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%200-56.png" alt="2020-11-10 0-56" style="zoom:80%;"><h1 id="六、路由赋值"><a href="#六、路由赋值" class="headerlink" title="六、路由赋值"></a>六、路由赋值</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%200-57.png"><h1 id="七、主页路由跳转出错改善方法"><a href="#七、主页路由跳转出错改善方法" class="headerlink" title="七、主页路由跳转出错改善方法"></a>七、主页路由跳转出错改善方法</h1><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.push(location, onComplete(), onAbort())</span></pre></td></tr></table></figure><blockquote><p>router.push( … ) =&gt;跳转到某个子页面，并在history中添加一条记录。</p><p>onComplete和onAbort是在路由跳转完成和失败时分别执行的回调函数</p></blockquote><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%201-00.png"><h1 id="八、修改测试接口"><a href="#八、修改测试接口" class="headerlink" title="八、修改测试接口"></a>八、修改测试接口</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%201-02.png" style="zoom: 50%;"><h1 id="九、查看接口地址"><a href="#九、查看接口地址" class="headerlink" title="九、查看接口地址"></a>九、查看接口地址</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/Snipaste_2020-11-02_17-23-31.png" alt="Snipaste_2020-11-02_17-23-31"></p><h1 id="十、设置参数默认值"><a href="#十、设置参数默认值" class="headerlink" title="十、设置参数默认值"></a>十、设置参数默认值</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/Snipaste_2020-11-03_15-11-11.png" alt="Snipaste_2020-11-03_15-11-11" style="zoom: 67%;"><h1 id="十一、element-ui对话框组件写法"><a href="#十一、element-ui对话框组件写法" class="headerlink" title="十一、element-ui对话框组件写法"></a>十一、element-ui对话框组件写法</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/Snipaste_2020-11-05_16-23-53.png" alt="Snipaste_2020-11-05_16-23-53"></p><h1 id="十二、修改图片访问地址"><a href="#十二、修改图片访问地址" class="headerlink" title="十二、修改图片访问地址"></a>十二、修改图片访问地址</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/Snipaste_2020-11-02_17-33-32.png" alt="Snipaste_2020-11-02_17-33-32"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、组件的调用方式&quot;&gt;&lt;a href=&quot;#一、组件的调用方式&quot; class=&quot;headerlink&quot; title=&quot;一、组件的调用方式&quot;&gt;&lt;/a&gt;一、组件的调用方式&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%200-51.png&quot; alt=&quot;2020-11-10-0-51&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;二、element-ui表单必填写法&quot;&gt;&lt;a href=&quot;#二、element-ui表单必填写法&quot; class=&quot;headerlink&quot; title=&quot;二、element-ui表单必填写法&quot;&gt;&lt;/a&gt;二、element-ui表单必填写法&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%200-52.png&quot; alt=&quot;2020-11-10-0-52&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="积分商城" scheme="https://ming-clavin.github.io/categories/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="VUE" scheme="https://ming-clavin.github.io/tags/VUE/"/>
    
    <category term="积分商城" scheme="https://ming-clavin.github.io/tags/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E/"/>
    
  </entry>
  
  <entry>
    <title>开启MySQL常见问题</title>
    <link href="https://ming-clavin.github.io/2020/11/06/2020/%E5%BC%80%E5%90%AFMySQL%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>https://ming-clavin.github.io/2020/11/06/2020/%E5%BC%80%E5%90%AFMySQL%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-11-05T16:28:50.000Z</published>
    <updated>2021-05-04T14:20:36.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h1><p><strong>问题描述：</strong></p><blockquote><p>在命令行输入 mysql -u root -p 登录mysql，返回”Can’t connect to MySQL server on localhost (10061)”错误</p></blockquote><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201105233916432.png" alt="image-20201105233916432"></p><p><strong>处理方式：</strong></p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201105234201467.png" alt="image-20201105234201467"></p><a id="more"></a><h1 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h1><p><strong>问题描述：</strong></p><blockquote><p>在windos 的cmd下安装mysql，在mysql的bin目录下面执行： mysqld –install。</p><p>报错：Install/Remove of the Service Denied</p></blockquote><p><strong>处理方式：</strong></p><p>打开cmd.exe程序的时候选择“用管理员身份打开”。</p><h1 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h1><p><strong>问题描述：</strong></p><blockquote><p>打开Navicat 软件，点击数据库，报错：1045 Access denied for user ‘root’@’localhost’ (using password: YES)</p></blockquote><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/916611-20171108104341934-1669606114.png" alt="img"></p><p><strong>解决方式：</strong></p><p>右击”root“ - ”修改连接“，进行修改密码</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201106002338078.png" alt="image-20201106002338078" style="zoom:50%;">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一&quot;&gt;&lt;/a&gt;问题一&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在命令行输入 mysql -u root -p 登录mysql，返回”Can’t connect to MySQL server on localhost (10061)”错误&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201105233916432.png&quot; alt=&quot;image-20201105233916432&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;处理方式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201105234201467.png&quot; alt=&quot;image-20201105234201467&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Vue_Shop项目" scheme="https://ming-clavin.github.io/categories/Vue-Shop%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="后端" scheme="https://ming-clavin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="MySQL" scheme="https://ming-clavin.github.io/tags/MySQL/"/>
    
    <category term="VUE" scheme="https://ming-clavin.github.io/tags/VUE/"/>
    
    <category term="数据库" scheme="https://ming-clavin.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>后端接口配置</title>
    <link href="https://ming-clavin.github.io/2020/11/03/2020/%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E9%85%8D%E7%BD%AE/"/>
    <id>https://ming-clavin.github.io/2020/11/03/2020/%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E9%85%8D%E7%BD%AE/</id>
    <published>2020-11-03T15:05:48.000Z</published>
    <updated>2021-05-04T14:20:47.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装MySql"><a href="#一、安装MySql" class="headerlink" title="一、安装MySql"></a>一、安装MySql</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>镜像安装（zip），配置初始化的my.ini文件的文件，按照命令操作（管理员打开），</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%200-45.png" alt="2020-11-10 0-45"></p><a id="more"></a><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10 0-46.png" alt="2020-11-10 0-46" style="zoom:50%;"><h1 id="二、安装Navicat，导入数据库"><a href="#二、安装Navicat，导入数据库" class="headerlink" title="二、安装Navicat，导入数据库"></a>二、安装Navicat，导入数据库</h1><h2 id="1-新建MySQL连接"><a href="#1-新建MySQL连接" class="headerlink" title="1.新建MySQL连接"></a>1.新建MySQL连接</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10 0-47.png" alt="2020-11-10 0-47" style="zoom: 50%;"><h2 id="2-新建连接，导入sql文件"><a href="#2-新建连接，导入sql文件" class="headerlink" title="2.新建连接，导入sql文件"></a>2.新建连接，导入sql文件</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10 0-48.png" alt="2020-11-10 0-48" style="zoom:50%;"><h1 id="三、运行api"><a href="#三、运行api" class="headerlink" title="三、运行api"></a>三、运行api</h1><p>在目标接口打开Git Bash，输入npm install下载需要的组件，输入$ node app.js运行api接口</p><hr><blockquote><p><strong>遇到问题：</strong>登入失败</p><p><strong>解决方案：</strong>修改D:\Vue\2020.10\vue_shop_api\config\default.json 文件里面的账号密码</p></blockquote><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10 0-49.png" alt="2020-11-10 0-49" style="zoom:80%;"><h1 id="四、安装Postman检测接口"><a href="#四、安装Postman检测接口" class="headerlink" title="四、安装Postman检测接口"></a>四、安装Postman检测接口</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10 0-50.png" alt="2020-11-10 0-50" style="zoom:80%;"><h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p>1.<a href="https://www.cnblogs.com/winton-nfs/p/11524007.html">安装mysql教程</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、安装MySql&quot;&gt;&lt;a href=&quot;#一、安装MySql&quot; class=&quot;headerlink&quot; title=&quot;一、安装MySql&quot;&gt;&lt;/a&gt;一、安装MySql&lt;/h1&gt;&lt;h2 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.安装&quot;&gt;&lt;/a&gt;1.安装&lt;/h2&gt;&lt;p&gt;镜像安装（zip），配置初始化的my.ini文件的文件，按照命令操作（管理员打开），&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/2020-11-10%200-45.png&quot; alt=&quot;2020-11-10 0-45&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Vue_Shop项目" scheme="https://ming-clavin.github.io/categories/Vue-Shop%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="后端" scheme="https://ming-clavin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="MySQL" scheme="https://ming-clavin.github.io/tags/MySQL/"/>
    
    <category term="VUE" scheme="https://ming-clavin.github.io/tags/VUE/"/>
    
    <category term="数据库" scheme="https://ming-clavin.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Typora图床教程--阿里云</title>
    <link href="https://ming-clavin.github.io/2020/10/31/2020/Typora%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B-%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    <id>https://ming-clavin.github.io/2020/10/31/2020/Typora%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B-%E9%98%BF%E9%87%8C%E4%BA%91/</id>
    <published>2020-10-31T11:01:32.000Z</published>
    <updated>2020-11-07T08:40:34.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、下载Typora并安装插件"><a href="#一、下载Typora并安装插件" class="headerlink" title="一、下载Typora并安装插件"></a>一、下载Typora并安装插件</h1><h2 id="1-下载软件"><a href="#1-下载软件" class="headerlink" title="1.下载软件"></a>1.下载软件</h2><p>到官网下载对应版本软件（<a href="[https://typora.io](https://typora.io/)">Typora下载连接</a>）</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031143535666.png" alt="image-20201031143535666"></p><a id="more"></a><h2 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h2><blockquote><p>注：先在 “帮助“ - ”检查更新“ 中升级版本，确保可以使用</p></blockquote><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031144605201.png" alt="image-20201031144605201"></p><p>打开 ”文件“ – ”偏好设置“，选择”图像“进入见面，”插入图片时” 下拉菜单选择 “上传图片” </p><ul><li>使用 “配置文件” 的方法：“上传服务设定”选择  “PicGo-Core(command line)” ，点击 “下载并更新</li><li>使用 ”PicGo(app)“ 的方法：“上传服务设定” 选择 “PicGo-Core(app)”，选择app所在路径</li></ul><h1 id="二、注册配置阿里云"><a href="#二、注册配置阿里云" class="headerlink" title="二、注册配置阿里云"></a>二、注册配置阿里云</h1><h2 id="1-注册账号"><a href="#1-注册账号" class="headerlink" title="1.注册账号"></a>1.注册账号</h2><p>阿里云注册地址：<a href="https://www.aliyun.com/minisite/goods?source=5176.11533457&userCode=vnk7s0ek&type=copy">注册地址</a></p><h2 id="2-创建Bucket并购买资源包"><a href="#2-创建Bucket并购买资源包" class="headerlink" title="2.创建Bucket并购买资源包"></a>2.创建Bucket并购买资源包</h2><ul><li>首先，进入阿里云的控制台</li></ul><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031145741443.png" alt="image-20201031145741443"></p><ul><li>选择对象存贮Oss，并开通服务</li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031150324991.png" alt="image-20201031150324991" style="zoom: 50%;"><ul><li><p>访问Bucket列表，并创建Bucket</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031150839928.png" alt="image-20201031150839928" style="zoom: 50%;"></li><li><p>进入创建页面，填写 “名称” ，设置 “读写权限”  为 “公共读” （不然无法md文件无法读取）</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031151142718.png" alt="image-20201031151142718" style="zoom:50%;"></li></ul><ul><li><p>购买资源包</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031152037377.png" alt="image-20201031152037377" style="zoom:50%;"></li></ul><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031152107046.png" alt="image-20201031152107046"></p><h1 id="三、使用“配置文件”的方法（易错）"><a href="#三、使用“配置文件”的方法（易错）" class="headerlink" title="三、使用“配置文件”的方法（易错）"></a>三、使用“配置文件”的方法（易错）</h1><h2 id="1-配置-“配置文件”"><a href="#1-配置-“配置文件”" class="headerlink" title="1.配置 “配置文件”"></a>1.配置 “配置文件”</h2><p>打开 ”文件“ -  ”偏好设置“ ，选择 ”图像“ 进入见面，打开 “配置文件”，将下面的代码复制到 “配置文件” 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"picBed"</span>: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"uploader"</span>: <span class="string">"aliyun"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"aliyun"</span>: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"accessKeyId"</span>: <span class="string">""</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"accessKeySecret"</span>: <span class="string">""</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"bucket"</span>: <span class="string">""</span>, <span class="comment">// 存储空间名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"area"</span>: <span class="string">""</span>, <span class="comment">// 存储区域代号</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"path"</span>: <span class="string">"img/"</span>, <span class="comment">// 自定义存储路径</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">     <span class="string">"customUrl"</span>: <span class="string">""</span>, <span class="comment">// 自定义域名，注意要加 http://或者 https://</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">     <span class="string">"options"</span>: <span class="string">""</span> <span class="comment">// 针对图片的一些后缀处理参数 PicGo 2.2.0+ PicGo-Core 1.4.0+</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"picgoPlugins"</span>: &#123;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="2-参数调整"><a href="#2-参数调整" class="headerlink" title="2.参数调整"></a>2.参数调整</h2><ul><li><p>点击AcessKey管理，进入界面，创建一个新的AcessKey</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031152834944.png" alt="image-20201031152834944" style="zoom:50%;"><p>复制 accessKeyId 和 accessKeySecret 到配置文件</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031153214391.png" alt="image-20201031153214391"></p></li></ul><ul><li><p>回到对象存贮Oss，进入新建的Bucket，将下图的 Bucket 和 area 填入配置文件</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031153824294.png" alt="image-20201031153824294"></p></li><li><p>其他的参数不需要配置，容易出错</p><blockquote><p>遇到问题： customUrl 设置吼出现无法读取图片的情况</p><p>解决方案： 删除 customUrl 后面的参数</p></blockquote><h2 id="3-验证是否成功"><a href="#3-验证是否成功" class="headerlink" title="3.验证是否成功"></a>3.验证是否成功</h2><p>回到Typora软件，进入 ”图像“ 界面 ，点击 ”验证图片上传选项“ ，如果如下图所示，则验证成功</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031155452880.png" alt="image-20201031155452880" style="zoom: 33%;"></li></ul><h1 id="四、使用”PicGo-app-“的方法"><a href="#四、使用”PicGo-app-“的方法" class="headerlink" title="四、使用”PicGo(app)“的方法"></a>四、使用”PicGo(app)“的方法</h1><h2 id="1-下载PicGo软件"><a href="#1-下载PicGo软件" class="headerlink" title="1.下载PicGo软件"></a>1.下载PicGo软件</h2><p>GitHub地址：<a href="https://github.com/Molunerfinn/PicGo">下载地址</a></p><h2 id="2-配置参数"><a href="#2-配置参数" class="headerlink" title="2. 配置参数"></a>2. 配置参数</h2><blockquote><p>与使用插件不同，使用软件需要使用<strong>添加用户</strong>的方式来配置accessKeyId 和 accessKeySecret （这个结论是报错后，在网上寻找解决方案后试验成功的，不一定准确）</p><p>更加推荐使用插件的方式，因为已经卸载软件，所以以下操作的步骤来自 <a href="https://blog.csdn.net/kai123wen/article/details/104027802">阿里云OSS PicGo 配置图床教程</a></p></blockquote><h3 id="添加用户步骤"><a href="#添加用户步骤" class="headerlink" title="添加用户步骤"></a>添加用户步骤</h3><ul><li>点击自己头像，然后选择访问控制</li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/aHR0cHM6Ly9nemhrZXZpbi1pbWFnZS5vc3MtY24tYmVpamluZy5hbGl5dW5jcy5jb20vaW1nLzIwMjAwMTE4MDk0NjM1LnBuZw" alt="img" style="zoom: 67%;"><ul><li>点击用户，选择新建用户</li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/aHR0cHM6Ly9nemhrZXZpbi1pbWFnZS5vc3MtY24tYmVpamluZy5hbGl5dW5jcy5jb20vaW1nLzIwMjAwMTE4MDk0ODU1LnBuZw" alt="img" style="zoom: 50%;"><ul><li><p>之后进行用户配置，注意要勾选<strong>编程访问</strong>，控制台密码登录可以不选择，登录名称，显示名称自己设定</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/aHR0cHM6Ly9nemhrZXZpbi1pbWFnZS5vc3MtY24tYmVpamluZy5hbGl5dW5jcy5jb20vaW1nLzIwMjAwMTE4MDk1MzA3LnBuZw" alt="img" style="zoom:50%;"></li><li><p>确定后得到创建用户的信息，这里要记下AccessKey ID 和 AccessKeySecret，之后配置PICGO用到，因为这个界面关掉之后就不好找了，所以最好记在记事本里</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/aHR0cHM6Ly9nemhrZXZpbi1pbWFnZS5vc3MtY24tYmVpamluZy5hbGl5dW5jcy5jb20vaW1nLzIwMjAwMTE4MDk1NzI2LnBuZw" alt="img"></p></li><li><p>设置用户权限，使得用户只能访问OSS的服务。点击添加权限</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/aHR0cHM6Ly9nemhrZXZpbi1pbWFnZS5vc3MtY24tYmVpamluZy5hbGl5dW5jcy5jb20vaW1nL2ltYWdlLTIwMjAwMTE4MTAyMTAwMzk5LnBuZw" alt="img"></p></li><li><p>选择管理对象存储服务权限，点击确定</p></li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/aHR0cHM6Ly9nemhrZXZpbi1pbWFnZS5vc3MtY24tYmVpamluZy5hbGl5dW5jcy5jb20vaW1nLzIwMjAwMTE4MTAyMTI4LnBuZw" alt="img" style="zoom:50%;"><hr><blockquote><p>以下是<strong>附加内容</strong>与本文无关</p></blockquote><h1 id="五、右键新建中增加新建md文件"><a href="#五、右键新建中增加新建md文件" class="headerlink" title="五、右键新建中增加新建md文件"></a>五、右键新建中增加新建md文件</h1><p>新建一个txt文本文档,然后用记事本打开，输入以下代码，修改刚才哪个文件的后缀名为reg，双击使用它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[HKEY_CLASSES_ROOT\.md\ShellNew]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&quot;NullFile&quot;&#x3D;&quot;&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&quot;FileName&quot;&#x3D;&quot;template.md&quot;</span></pre></td></tr></table></figure><h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/138878534">最强markdown编辑器typora图床教程- 阿里云版</a></li><li><a href="https://blog.csdn.net/kai123wen/article/details/104027802">阿里云OSS PicGo 配置图床教程</a></li><li><a href="https://blog.csdn.net/yetugeng/article/details/105196700">Windows右键新建中增加新建md文件</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、下载Typora并安装插件&quot;&gt;&lt;a href=&quot;#一、下载Typora并安装插件&quot; class=&quot;headerlink&quot; title=&quot;一、下载Typora并安装插件&quot;&gt;&lt;/a&gt;一、下载Typora并安装插件&lt;/h1&gt;&lt;h2 id=&quot;1-下载软件&quot;&gt;&lt;a href=&quot;#1-下载软件&quot; class=&quot;headerlink&quot; title=&quot;1.下载软件&quot;&gt;&lt;/a&gt;1.下载软件&lt;/h2&gt;&lt;p&gt;到官网下载对应版本软件（&lt;a href=&quot;[https://typora.io](https://typora.io/)&quot;&gt;Typora下载连接&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201031143535666.png&quot; alt=&quot;image-20201031143535666&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Markdown" scheme="https://ming-clavin.github.io/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://ming-clavin.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Mrkdown使用指南</title>
    <link href="https://ming-clavin.github.io/2019/12/02/2020/Mrkdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://ming-clavin.github.io/2019/12/02/2020/Mrkdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2019-12-02T14:37:06.000Z</published>
    <updated>2020-12-14T14:07:26.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Makedown-标题"><a href="#一、Makedown-标题" class="headerlink" title="一、Makedown 标题"></a>一、Makedown 标题</h1><h2 id="1-使用-和-标记一级和二级标题"><a href="#1-使用-和-标记一级和二级标题" class="headerlink" title="1. 使用 = 和 - 标记一级和二级标题"></a>1. 使用 = 和 - 标记一级和二级标题</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220358.jpg" alt="(1)" style="zoom:80%;"><h2 id="2-使用-号标记"><a href="#2-使用-号标记" class="headerlink" title="2. 使用 # 号标记"></a>2. 使用 # 号标记</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220409.jpg" alt="(2)" style="zoom:80%;"><a id="more"></a><h1 id="二、Markdown-段落格式"><a href="#二、Markdown-段落格式" class="headerlink" title="二、Markdown 段落格式"></a>二、Markdown 段落格式</h1><h2 id="1-Markdown-段落"><a href="#1-Markdown-段落" class="headerlink" title="1.Markdown 段落"></a>1.Markdown 段落</h2><p>Markdown<br>段落没有特殊的格式，可以编写文字。段落的换行使用两个以上空格加上回车,也可以在段落后面使用一个空行来表示重新开始一个段落。</p><h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220418.jpg" alt="(3)" style="zoom:80%;"><h2 id="3-分隔线"><a href="#3-分隔线" class="headerlink" title="3.分隔线"></a>3.分隔线</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220421.jpg" alt="(4)" style="zoom:80%;"><h2 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4.删除线"></a>4.删除线</h2><p>在文字的两端加上两个波浪线 ~~ 即可</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220426.jpg" alt="(5)" style="zoom:80%;"><h2 id="5-下划线"><a href="#5-下划线" class="headerlink" title="5.下划线"></a>5.下划线</h2><p>通过 HTML 的 &lt;u&gt; 标签来实现：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220430.jpg" alt="(6)" style="zoom:80%;"><h2 id="6-脚注"><a href="#6-脚注" class="headerlink" title="6.脚注"></a>6.脚注</h2><p>脚注是对文本的补充说明，格式：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220437.jpg" alt="(7)" style="zoom:80%;"><h1 id="三、Markdown-列表"><a href="#三、Markdown-列表" class="headerlink" title="三、Markdown 列表"></a>三、Markdown 列表</h1><h2 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h2><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220442.jpg" alt="(8)" style="zoom: 67%;"><h2 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h2><p>有序列表使用数字并加上 . 号来表示，如：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220448.jpg" alt="(9)" style="zoom:80%;"><h2 id="3-嵌套结构"><a href="#3-嵌套结构" class="headerlink" title="3.嵌套结构"></a>3.嵌套结构</h2><p>列表嵌套只需在子列表中的选项添加四个空格即可：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220453.jpg" alt="(10)" style="zoom:80%;"><h1 id="四、Markdown-区块"><a href="#四、Markdown-区块" class="headerlink" title="四、Markdown 区块"></a>四、Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220501.jpg" alt="(11)" style="zoom:80%;"><p>嵌套用法：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220505.jpg" alt="(12)" style="zoom:80%;"><h2 id="1-区块中使用列表"><a href="#1-区块中使用列表" class="headerlink" title="1.区块中使用列表"></a>1.区块中使用列表</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220510.jpg" alt="(13)" style="zoom: 80%;"><h2 id="2-列表中使用区块"><a href="#2-列表中使用区块" class="headerlink" title="2.列表中使用区块"></a>2.列表中使用区块</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220516.jpg" alt="(14)" style="zoom:80%;"><h1 id="五、Markdown代码"><a href="#五、Markdown代码" class="headerlink" title="五、Markdown代码"></a>五、Markdown代码</h1><h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><p>代码段落上的一个函数或片段的代码可以用反引号把它包起来（`）</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220521.jpg" alt="(15)" style="zoom:80%;"><h2 id="2-代码区块"><a href="#2-代码区块" class="headerlink" title="2.代码区块"></a>2.代码区块</h2><p>代码区块使用 4 个空格或者一个制表符（Tab 键）, 也可以用 ```<br>包裹一段代码，并指定一种语言：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220527.jpg" alt="(16)" style="zoom:80%;"><h1 id="六、Markdown-图片"><a href="#六、Markdown-图片" class="headerlink" title="六、Markdown 图片"></a>六、Markdown 图片</h1><h2 id="1-本地图片"><a href="#1-本地图片" class="headerlink" title="1.本地图片"></a>1.本地图片</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220532.jpg" alt="(17)" style="zoom:80%;"><p>开头一个感叹号 !</p><p>接着一个方括号，里面放上图片的替代文字</p><p>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’<br>属性的文字。</p><h2 id="2-网络图片"><a href="#2-网络图片" class="headerlink" title="2.网络图片"></a>2.网络图片</h2><p>这个链接用 1 作为网址变量 [RUNOOB][1].</p><p>然后在文档的结尾位变量赋值（网址）</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220538.jpg" alt="(18)" style="zoom:80%;"><h1 id="七、Markdown-表格"><a href="#七、Markdown-表格" class="headerlink" title="七、Markdown 表格"></a>七、Markdown 表格</h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><h2 id="1-语法格式"><a href="#1-语法格式" class="headerlink" title="1.语法格式"></a>1.语法格式</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220542.jpg" alt="(19)" style="zoom: 67%;"><h2 id="2-对齐方式"><a href="#2-对齐方式" class="headerlink" title="2.对齐方式"></a>2.对齐方式</h2><p>-: 设置内容和标题栏居右对齐。</p><p>:- 设置内容和标题栏居左对齐。</p><p>:-: 设置内容和标题栏居中对齐。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220548.jpg" alt="(20)" style="zoom:67%;"><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h2><p>1.“ — ” 前面要有一个空格</p><p>2.“ # ” 后面要有空格，才可以表示标题</p><h1 id="八、参考页面"><a href="#八、参考页面" class="headerlink" title="八、参考页面"></a>八、参考页面</h1><p><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、Makedown-标题&quot;&gt;&lt;a href=&quot;#一、Makedown-标题&quot; class=&quot;headerlink&quot; title=&quot;一、Makedown 标题&quot;&gt;&lt;/a&gt;一、Makedown 标题&lt;/h1&gt;&lt;h2 id=&quot;1-使用-和-标记一级和二级标题&quot;&gt;&lt;a href=&quot;#1-使用-和-标记一级和二级标题&quot; class=&quot;headerlink&quot; title=&quot;1. 使用 = 和 - 标记一级和二级标题&quot;&gt;&lt;/a&gt;1. 使用 = 和 - 标记一级和二级标题&lt;/h2&gt;&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220358.jpg&quot; alt=&quot;(1)&quot; style=&quot;zoom:80%;&quot;&gt;

&lt;h2 id=&quot;2-使用-号标记&quot;&gt;&lt;a href=&quot;#2-使用-号标记&quot; class=&quot;headerlink&quot; title=&quot;2. 使用 # 号标记&quot;&gt;&lt;/a&gt;2. 使用 # 号标记&lt;/h2&gt;&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214220409.jpg&quot; alt=&quot;(2)&quot; style=&quot;zoom:80%;&quot;&gt;</summary>
    
    
    
    <category term="Markdown" scheme="https://ming-clavin.github.io/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://ming-clavin.github.io/tags/Markdown/"/>
    
    <category term="Github_page" scheme="https://ming-clavin.github.io/tags/Github-page/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ming-clavin.github.io/2019/12/01/2020/hello-world/"/>
    <id>https://ming-clavin.github.io/2019/12/01/2020/hello-world/</id>
    <published>2019-12-01T14:09:29.967Z</published>
    <updated>2019-12-01T14:09:29.967Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
