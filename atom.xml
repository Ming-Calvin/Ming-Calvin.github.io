<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Calvin-Ming</title>
  
  <subtitle>一个前端程序员的博客</subtitle>
  <link href="https://ming-clavin.github.io/atom.xml" rel="self"/>
  
  <link href="https://ming-clavin.github.io/"/>
  <updated>2021-10-12T03:28:31.709Z</updated>
  <id>https://ming-clavin.github.io/</id>
  
  <author>
    <name>明同學_Calvin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>export与export default</title>
    <link href="https://ming-clavin.github.io/2021/10/12/2021/2021.10/export%E4%B8%8Eexport%20default/"/>
    <id>https://ming-clavin.github.io/2021/10/12/2021/2021.10/export%E4%B8%8Eexport%20default/</id>
    <published>2021-10-12T14:42:16.000Z</published>
    <updated>2021-10-12T03:28:31.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="export与export-default"><a href="#export与export-default" class="headerlink" title="export与export default"></a>export与export default</h1><h2 id="1-export命令"><a href="#1-export命令" class="headerlink" title="1. export命令"></a>1. export命令</h2><h3 id="1-1-构成"><a href="#1-1-构成" class="headerlink" title="1.1 构成"></a>1.1 构成</h3><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。</p><ul><li><code>export</code>命令用于规定模块的对外接口</li><li><code>import</code>命令用于输入其他模块提供的功能。</li></ul><h3 id="1-2-概述"><a href="#1-2-概述" class="headerlink" title="1.2 概述"></a>1.2 概述</h3><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。</p><p>如果希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量。</p><h3 id="1-3-代码演示"><a href="#1-3-代码演示" class="headerlink" title="1.3 代码演示"></a>1.3 代码演示</h3><h4 id="1-3-1-export-命令"><a href="#1-3-1-export-命令" class="headerlink" title="1.3.1 export 命令"></a>1.3.1 export 命令</h4><p>下面是一个js文件，里面使用export命令来输出变量，函数或类（class）</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"export的内容"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> year =<span class="number">2019</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">message</span>(<span class="params">sth</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> sth;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;str,year,message&#125;;</span></pre></td></tr></table></figure><h4 id="1-3-2-import-命令"><a href="#1-3-2-import-命令" class="headerlink" title="1.3.2 import 命令"></a>1.3.2 import 命令</h4><p>使用 <code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过 <code>import</code>命令加载这个模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.js</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; str,year, message &#125; <span class="keyword">from</span> <span class="string">'./a'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//也可以分开写两次，导入的时候带花括号，将每个变量函数名写清楚</span></span></pre></td></tr></table></figure><p>上面代码的<code>import</code>命令，用于加载<code>a.js</code>文件,引入后便可以在<code>b.js</code>文件中使用<code>a.js</code>文件中的变量、函数或类等。</p><h5 id="1-3-2-1-import-命令接受一对大括号"><a href="#1-3-2-1-import-命令接受一对大括号" class="headerlink" title="1.3.2.1 import 命令接受一对大括号"></a>1.3.2.1 import 命令接受一对大括号</h5><p>​     <code>import</code>命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块对外接口的名称相同。</p><h5 id="1-3-2-2-import-命令的-from"><a href="#1-3-2-2-import-命令的-from" class="headerlink" title="1.3.2.2 import 命令的 from"></a>1.3.2.2 import 命令的 from</h5><ul><li><p><code>import</code>后面的<code>from</code>指定模块文件的位置，可以是相对路径，也可以是绝对路径，<code>.js</code>后缀可以省略</p></li><li><p>如果只是<strong>模块名</strong>，不带有路径，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//import引入一个依赖包，不需要相对路径。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> ‘axios’;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//import 引入一个自己写的js文件，是需要相对路径的。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AppService <span class="keyword">from</span> ‘./appService’;</span></pre></td></tr></table></figure></li></ul><h2 id="2-export-default-命令"><a href="#2-export-default-命令" class="headerlink" title="2.  export default 命令"></a>2.  export default 命令</h2><p>​    <code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">"export default的内容"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> str</span></pre></td></tr></table></figure><p>​    <code>import</code>命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。一个文件内不能有多个export default。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.js </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> StrFile <span class="keyword">from</span> <span class="string">'a'</span>; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入的时候没有花括号</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//本质上，a.js文件的export default输出一个叫做default的变量，然后系统允许你引入的时候为它取任意名字。</span></span></pre></td></tr></table></figure><h2 id="3-区别"><a href="#3-区别" class="headerlink" title="3. 区别"></a>3. 区别</h2><ul><li><p><code>export</code> 与 <code>export default</code> 均可用于导出常量、函数、文件、模块等</p></li><li><p>在一个文件或模块中，<code>export</code>、<code>import</code>可以有多个，<code>export default</code>仅有一个</p></li><li><p>通过<code>export</code>方式导出，在导入时要加{ }，<code>export default</code>则不需要，并可以起任意名称</p></li><li><p>(1) 输出单个值，使用export default</p><p>(2) 输出多个值，使用export</p><p>(3) export default与普通的export不要同时使用</p></li></ul><p><strong>参考：</strong><a href="https://www.huaweicloud.com/articles/4406021ed5aa12a1802fe842440c3040.html">JavaScript ES6中，export与export default</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;export与export-default&quot;&gt;&lt;a href=&quot;#export与export-default&quot; class=&quot;headerlink&quot; title=&quot;export与export default&quot;&gt;&lt;/a&gt;export与export default&lt;/h1&gt;&lt;h2 id=&quot;1-export命令&quot;&gt;&lt;a href=&quot;#1-export命令&quot; class=&quot;headerlink&quot; title=&quot;1. export命令&quot;&gt;&lt;/a&gt;1. export命令&lt;/h2&gt;&lt;h3 id=&quot;1-1-构成&quot;&gt;&lt;a href=&quot;#1-1-构成&quot; class=&quot;headerlink&quot; title=&quot;1.1 构成&quot;&gt;&lt;/a&gt;1.1 构成&lt;/h3&gt;&lt;p&gt;模块功能主要由两个命令构成：&lt;code&gt;export&lt;/code&gt;和&lt;code&gt;import&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;命令用于规定模块的对外接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;命令用于输入其他模块提供的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-2-概述&quot;&gt;&lt;a href=&quot;#1-2-概述&quot; class=&quot;headerlink&quot; title=&quot;1.2 概述&quot;&gt;&lt;/a&gt;1.2 概述&lt;/h3&gt;&lt;p&gt;一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。&lt;/p&gt;
&lt;p&gt;如果希望外部能够读取模块内部的某个变量，就必须使用&lt;code&gt;export&lt;/code&gt;关键字输出该变量。&lt;/p&gt;
&lt;h3 id=&quot;1-3-代码演示&quot;&gt;&lt;a href=&quot;#1-3-代码演示&quot; class=&quot;headerlink&quot; title=&quot;1.3 代码演示&quot;&gt;&lt;/a&gt;1.3 代码演示&lt;/h3&gt;&lt;h4 id=&quot;1-3-1-export-命令&quot;&gt;&lt;a href=&quot;#1-3-1-export-命令&quot; class=&quot;headerlink&quot; title=&quot;1.3.1 export 命令&quot;&gt;&lt;/a&gt;1.3.1 export 命令&lt;/h4&gt;&lt;p&gt;下面是一个js文件，里面使用export命令来输出变量，函数或类（class）&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://ming-clavin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>MVC与MVVM</title>
    <link href="https://ming-clavin.github.io/2021/10/12/2021/2021.10/MVC%E4%B8%8EMVVM/"/>
    <id>https://ming-clavin.github.io/2021/10/12/2021/2021.10/MVC%E4%B8%8EMVVM/</id>
    <published>2021-10-12T04:42:16.000Z</published>
    <updated>2021-10-12T03:28:12.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVC与MVVM"><a href="#MVC与MVVM" class="headerlink" title="MVC与MVVM"></a>MVC与MVVM</h1><h2 id="1-MVC"><a href="#1-MVC" class="headerlink" title="1. MVC"></a>1. MVC</h2><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20211007153205.awebp" alt="img"></p><ol><li>用户操作View层，View层发送指令到Controller层</li><li>Cotroller层执行完业务操作，改变Model层的数据状态</li><li>Model层将新数据传输到view层显示</li></ol><a id="more"></a><h2 id="2-MVVM"><a href="#2-MVVM" class="headerlink" title="2. MVVM"></a>2. MVVM</h2><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20211007153544.awebp" alt="img"></p><ol><li>ViewModel层可以自动渲染View层页面，ViewModel层会自动监听View层的数据变化</li><li>ViewModel层可以将View层改变的数据同步到Model层，ViewModel层会自动监听Model层的数据变化</li></ol><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20211007153901.awebp" alt="img"></p><p><strong>参考：<a href="https://juejin.cn/post/6844903854782283790">MVVM与MVC设计模式区别</a></strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;MVC与MVVM&quot;&gt;&lt;a href=&quot;#MVC与MVVM&quot; class=&quot;headerlink&quot; title=&quot;MVC与MVVM&quot;&gt;&lt;/a&gt;MVC与MVVM&lt;/h1&gt;&lt;h2 id=&quot;1-MVC&quot;&gt;&lt;a href=&quot;#1-MVC&quot; class=&quot;headerlink&quot; title=&quot;1. MVC&quot;&gt;&lt;/a&gt;1. MVC&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20211007153205.awebp&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户操作View层，View层发送指令到Controller层&lt;/li&gt;
&lt;li&gt;Cotroller层执行完业务操作，改变Model层的数据状态&lt;/li&gt;
&lt;li&gt;Model层将新数据传输到view层显示&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://ming-clavin.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>css中link和@import的区别</title>
    <link href="https://ming-clavin.github.io/2021/10/12/2021/2021.10/css%E4%B8%ADlink%E5%92%8C@import%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://ming-clavin.github.io/2021/10/12/2021/2021.10/css%E4%B8%ADlink%E5%92%8C@import%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-10-12T02:42:16.000Z</published>
    <updated>2021-10-12T03:26:20.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css中link和-import的区别"><a href="#css中link和-import的区别" class="headerlink" title="css中link和@import的区别"></a>css中link和@import的区别</h1><h2 id="1-本质"><a href="#1-本质" class="headerlink" title="1. 本质"></a>1. 本质</h2><ul><li><code>link</code> 是 <code>XHTML</code>标签，不仅可以加载 CSS ，还可以定义 RSS属性</li><li><code>@import</code> 是 CSS提供的语法规则，只能导入样式表</li></ul><h2 id="2-加载顺序"><a href="#2-加载顺序" class="headerlink" title="2. 加载顺序"></a>2. 加载顺序</h2><ul><li><code>link</code> 在页面加载时同时加载</li><li><code>@import</code> 在页面完全载入后再加载</li></ul><h2 id="3-兼容性"><a href="#3-兼容性" class="headerlink" title="3. 兼容性"></a>3. 兼容性</h2><ul><li><code>link</code> 无兼容问题</li><li><code>@import</code> 不支持低版本浏览器加载</li></ul><h2 id="4-DOM可控性"><a href="#4-DOM可控性" class="headerlink" title="4. DOM可控性"></a>4. DOM可控性</h2><ul><li><code>link</code> 可以通过 <code>JavaScript</code> 控制 DOM 改变样式</li><li><code>@import</code> 不支持</li></ul><p><strong>参考：</strong></p><p><a href="https://segmentfault.com/a/1190000015950516">link和@import的区别浅析</a></p><p><a href="https://blog.csdn.net/qq_38881495/article/details/98956310?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.base&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.base">link和@import的区别</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;css中link和-import的区别&quot;&gt;&lt;a href=&quot;#css中link和-import的区别&quot; class=&quot;headerlink&quot; title=&quot;css中link和@import的区别&quot;&gt;&lt;/a&gt;css中link和@import的区别&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Css" scheme="https://ming-clavin.github.io/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>js中this的指向</title>
    <link href="https://ming-clavin.github.io/2021/07/12/2021/2021.07/js%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/"/>
    <id>https://ming-clavin.github.io/2021/07/12/2021/2021.07/js%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/</id>
    <published>2021-07-12T14:42:16.000Z</published>
    <updated>2021-08-07T17:19:53.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js中this的指向"><a href="#js中this的指向" class="headerlink" title="js中this的指向"></a>js中this的指向</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>​    this的指向在<strong>函数定义的时候</strong>是确定不了的，只有<strong>函数执行</strong>的时候才能确定this到底指向谁，实际上this的最终指向的是那个<strong>调用它的对象</strong>。</p><h3 id="2-实例"><a href="#2-实例" class="headerlink" title="2. 实例"></a>2. 实例</h3><h4 id="2-1-this指向window"><a href="#2-1-this指向window" class="headerlink" title="2.1 this指向window"></a>2.1 this指向window</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// example 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> user = <span class="string">'XM'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">//undefined</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//Window</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">a();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等同于 window.a();</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在浏览器中的页面对象是浏览器窗口(window 对象)</span></span></pre></td></tr></table></figure><p>​    函数a实际上被Window对象所点出来的，在浏览器中的页面对象是浏览器窗口(window 对象)，函数会自动变为 window 对象的函数。</p><a id="more"></a><h4 id="2-2-this指向调用对象"><a href="#2-2-this指向调用对象" class="headerlink" title="2.2 this指向调用对象"></a>2.2 this指向调用对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// example 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  user: <span class="string">'xm'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">// xm</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 对象o &#123;user: "xm", fn: ƒ&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">o.fn();</span></pre></td></tr></table></figure><p>​    this指向的是对象o，因为调用fn是通过o.fn()执行的，所以this指向的对象是o。</p><h4 id="2-3-this指向上一级对象"><a href="#2-3-this指向上一级对象" class="headerlink" title="2.3 this指向上一级对象"></a>2.3 this指向上一级对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// example 3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  user: <span class="string">'xm'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  fn:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">// xm</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 对象o &#123;user: "xm", fn: ƒ&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.o.fn();</span></pre></td></tr></table></figure><p>​    this指向的是调用它的对象（window是js中的全局对象，创建的变量实际上是给window添加属性），所以这里可以用window点o对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// example 4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  a: <span class="number">10</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  b: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    a: <span class="number">12</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);  <span class="comment">// 12</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">o.b.fn();</span></pre></td></tr></table></figure><p>​    此时this指向b这个对象。</p><h4 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h4><ul><li>如果一个函数中有this，但是它没有被<strong>上一级的对象</strong>所调用，那么this指向的就是<strong>window</strong>（严格版除外）</li><li>如果一个函数中有this，这个函数有被<strong>上一级的对象</strong>所调用，那么this指向的就是<strong>上一级的对象</strong>。</li><li>如果一个函数中有this，这个函数中包含多个对象，<strong>尽管</strong>这个函数是被<strong>最外层的对象</strong>所<strong>调用</strong>，this指向的也只是它<strong>上一级的对象</strong></li></ul><h4 id="2-5-例外"><a href="#2-5-例外" class="headerlink" title="2.5 例外"></a>2.5 例外</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// example 5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  a: <span class="number">10</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  b: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    a: <span class="number">12</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);  <span class="comment">// undefined</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// window</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> j = o.b.fn;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">j();</span></pre></td></tr></table></figure><p>​    this指向的是window，this永远指向的是最后调用它的对象，虽然函数fn是被对象b所<strong>引用</strong>，但是在将fn赋值给变量j的时候并<strong>没有执行</strong>，在<code>j()</code>时执行，所以最终指向的是window。</p><h3 id="3-构造函数版this"><a href="#3-构造函数版this" class="headerlink" title="3. 构造函数版this"></a>3. 构造函数版this</h3><p>new可以改变this的指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// example 6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">this</span>.user = <span class="string">'xm'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// Fn &#123;user: "xm"&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Fn();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.user);  <span class="comment">// xm</span></span></pre></td></tr></table></figure><p>new关键字可以<strong>改变this的指向</strong>，将这个this指向对象a。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;js中this的指向&quot;&gt;&lt;a href=&quot;#js中this的指向&quot; class=&quot;headerlink&quot; title=&quot;js中this的指向&quot;&gt;&lt;/a&gt;js中this的指向&lt;/h2&gt;&lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h3&gt;&lt;p&gt;​    this的指向在&lt;strong&gt;函数定义的时候&lt;/strong&gt;是确定不了的，只有&lt;strong&gt;函数执行&lt;/strong&gt;的时候才能确定this到底指向谁，实际上this的最终指向的是那个&lt;strong&gt;调用它的对象&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2-实例&quot;&gt;&lt;a href=&quot;#2-实例&quot; class=&quot;headerlink&quot; title=&quot;2. 实例&quot;&gt;&lt;/a&gt;2. 实例&lt;/h3&gt;&lt;h4 id=&quot;2-1-this指向window&quot;&gt;&lt;a href=&quot;#2-1-this指向window&quot; class=&quot;headerlink&quot; title=&quot;2.1 this指向window&quot;&gt;&lt;/a&gt;2.1 this指向window&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// example 1&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; user = &lt;span class=&quot;string&quot;&gt;&#39;XM&#39;&lt;/span&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.user); &lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//Window&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等同于 window.a();&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在浏览器中的页面对象是浏览器窗口(window 对象)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​    函数a实际上被Window对象所点出来的，在浏览器中的页面对象是浏览器窗口(window 对象)，函数会自动变为 window 对象的函数。&lt;/p&gt;</summary>
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://ming-clavin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js中栈和堆的概念和区别</title>
    <link href="https://ming-clavin.github.io/2021/07/11/2021/2021.07/js%E4%B8%AD%E6%A0%88%E5%92%8C%E5%A0%86%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
    <id>https://ming-clavin.github.io/2021/07/11/2021/2021.07/js%E4%B8%AD%E6%A0%88%E5%92%8C%E5%A0%86%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/</id>
    <published>2021-07-11T14:42:16.000Z</published>
    <updated>2021-08-07T17:20:01.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js中栈和堆的概念和区别"><a href="#js中栈和堆的概念和区别" class="headerlink" title="js中栈和堆的概念和区别"></a>js中栈和堆的概念和区别</h1><h2 id="1-栈-stack-和-堆-heap"><a href="#1-栈-stack-和-堆-heap" class="headerlink" title="1. 栈(stack)和 堆(heap)"></a>1. 栈(stack)和 堆(heap)</h2><h3 id="1-1-栈"><a href="#1-1-栈" class="headerlink" title="1.1 栈"></a>1.1 栈</h3><p><strong>栈内存</strong>的简称，栈是<strong>自动分配</strong>相对<strong>固定大小</strong>的内存空间，由系统<strong>自动释放</strong>，栈数据结构遵循<strong>先进后出</strong>的原则。</p><blockquote><p>乒乓球结构：最先放进去的乒乓球，最后才能取出</p></blockquote><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210619103247" alt="img" style="zoom: 80%;"><a id="more"></a><h3 id="1-2-堆"><a href="#1-2-堆" class="headerlink" title="1.2 堆"></a>1.2 堆</h3><p><strong>堆内存</strong>的简称，堆是<strong>动态分配</strong>内存，<strong>内存大小也不固定</strong>，<strong>不会自动释放</strong>，堆数据结构是一种无序的树状结构。满足<strong>key-value键值对</strong>的存储方式：知道key名，就可以通过key查找对应的value。</p><blockquote><p>书架存书结构：知道书名，可以找到书名对应的书籍</p></blockquote><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210619103614" alt="img"></p><h3 id="1-3-特点"><a href="#1-3-特点" class="headerlink" title="1.3 特点"></a>1.3 特点</h3><ul><li><strong>栈的特点</strong>：开口向上、速度快,容量小</li><li><strong>堆的特点</strong>：速度稍慢、容量比较大</li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210619103723" alt="img" style="zoom: 67%;"><h2 id="2-基本类型和引用类型"><a href="#2-基本类型和引用类型" class="headerlink" title="2. 基本类型和引用类型"></a>2. 基本类型和引用类型</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210619103808" alt="img" style="zoom: 80%;"><h3 id="2-1-基本数据类型"><a href="#2-1-基本数据类型" class="headerlink" title="2.1 基本数据类型"></a>2.1 基本数据类型</h3><ul><li><strong>Undefined</strong></li><li><strong>String</strong></li><li><strong>Boolean</strong></li><li><strong>Null</strong></li><li><strong>Number</strong></li></ul><p><strong>直接</strong>按值存放在<strong>栈内存</strong>中，占用的内存<strong>空间的大小是确定的</strong>，并由系统<strong>自动分配</strong>和<strong>自动释放</strong>。</p><h3 id="2-2-引用数据类型"><a href="#2-2-引用数据类型" class="headerlink" title="2.2 引用数据类型"></a>2.2 引用数据类型</h3><ul><li><strong>对象(Object)</strong></li><li><strong>数组(Array)</strong></li><li><strong>函数(Function)</strong></li></ul><p>将数据存储在<strong>堆内存</strong>中，将地址存储在<strong>栈内存</strong>中</p><h3 id="2-3-传值和传址的区别"><a href="#2-3-传值和传址的区别" class="headerlink" title="2.3 传值和传址的区别"></a>2.3 传值和传址的区别</h3><ul><li><p><strong>基本类型</strong>：采用的是<strong>值传递</strong>。</p></li><li><p><strong>引用类型</strong>：则是<strong>地址传递</strong>。</p><p> 引用类型的数据的<strong>地址指针</strong>存储在<strong>栈内存</strong>中，将存放在<strong>栈内存</strong>中的地址赋值给接收的变量。当访问<strong>引用类型</strong>的值时，会先从<strong>栈</strong>中获取对象的<strong>地址指针</strong>，然后通过<strong>地址指针</strong>找到<strong>堆</strong>中所需的数据。</p></li></ul><blockquote><p>包含<strong>引用类型</strong>的变量保存的不是变量本身，而是指向<strong>该对象的指针</strong></p></blockquote><h2 id="3-内存分配垃圾回收"><a href="#3-内存分配垃圾回收" class="headerlink" title="3. 内存分配垃圾回收"></a>3. 内存分配垃圾回收</h2><h3 id="3-1-内存分配"><a href="#3-1-内存分配" class="headerlink" title="3.1 内存分配"></a>3.1 内存分配</h3><ul><li><strong>栈内存：</strong>线性<strong>有序存储</strong>，容量小，系统分配效率高。</li><li><strong>堆内存：</strong>首先要在<strong>堆内存</strong>分配<strong>新存储区域</strong>，之后又要把<strong>指针</strong>存储到<strong>栈内存</strong>中，效率相对低一些了。  </li></ul><h3 id="3-2-垃圾回收"><a href="#3-2-垃圾回收" class="headerlink" title="3.2 垃圾回收"></a>3.2 垃圾回收</h3><ul><li><strong>栈内存：</strong>变量<strong>用完回收</strong>，相比堆存取速度更快，栈内存中的数据可以共享</li><li><strong>堆内存：</strong>堆内存中的对象<strong>不会随方法的结束而摧毁</strong>，方法结束了，这个对象可能被<strong>其他引用变量引用</strong>。创建对象是为了<strong>反复引用</strong>，对象将被保存到堆内存中。只有当一个对象<strong>没有任何引用变量引用</strong>时，系统的垃圾回收机制才会在<strong>核实的时候</strong>回收它。</li></ul><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><p><a href="https://juejin.cn/post/6854573215327617031">js中栈和堆的概念和区别</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;js中栈和堆的概念和区别&quot;&gt;&lt;a href=&quot;#js中栈和堆的概念和区别&quot; class=&quot;headerlink&quot; title=&quot;js中栈和堆的概念和区别&quot;&gt;&lt;/a&gt;js中栈和堆的概念和区别&lt;/h1&gt;&lt;h2 id=&quot;1-栈-stack-和-堆-heap&quot;&gt;&lt;a href=&quot;#1-栈-stack-和-堆-heap&quot; class=&quot;headerlink&quot; title=&quot;1. 栈(stack)和 堆(heap)&quot;&gt;&lt;/a&gt;1. 栈(stack)和 堆(heap)&lt;/h2&gt;&lt;h3 id=&quot;1-1-栈&quot;&gt;&lt;a href=&quot;#1-1-栈&quot; class=&quot;headerlink&quot; title=&quot;1.1 栈&quot;&gt;&lt;/a&gt;1.1 栈&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;栈内存&lt;/strong&gt;的简称，栈是&lt;strong&gt;自动分配&lt;/strong&gt;相对&lt;strong&gt;固定大小&lt;/strong&gt;的内存空间，由系统&lt;strong&gt;自动释放&lt;/strong&gt;，栈数据结构遵循&lt;strong&gt;先进后出&lt;/strong&gt;的原则。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;乒乓球结构：最先放进去的乒乓球，最后才能取出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210619103247&quot; alt=&quot;img&quot; style=&quot;zoom: 80%;&quot;&gt;</summary>
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://ming-clavin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js对象属性通过“.”和“\[ \]”访问的区别</title>
    <link href="https://ming-clavin.github.io/2021/07/10/2021/2021.07/js%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E9%80%9A%E8%BF%87%E2%80%9C.%E2%80%9D%E5%92%8C%E2%80%9C[%20]%E2%80%9D%E8%AE%BF%E9%97%AE%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://ming-clavin.github.io/2021/07/10/2021/2021.07/js%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E9%80%9A%E8%BF%87%E2%80%9C.%E2%80%9D%E5%92%8C%E2%80%9C[%20]%E2%80%9D%E8%AE%BF%E9%97%AE%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-07-10T14:42:16.000Z</published>
    <updated>2021-08-07T17:19:44.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js对象属性通过“-”和“-”访问的区别"><a href="#js对象属性通过“-”和“-”访问的区别" class="headerlink" title="js对象属性通过“.”和“[ ]”访问的区别"></a>js对象属性通过“.”和“[ ]”访问的区别</h2><h3 id="1-读取和设置对象属性有两种写法"><a href="#1-读取和设置对象属性有两种写法" class="headerlink" title="1. 读取和设置对象属性有两种写法"></a>1. 读取和设置对象属性有两种写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(.) 方法： obj.attr </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">([])方法： obj[attr]</span></pre></td></tr></table></figure><ul><li><p>(.) 点操作符: <strong>静态的</strong>。右侧必须是一个以<strong>属性名称</strong>命名的简单标识符。</p><p>属性名用一个标识符来表示。标识符必须直接出现再js程序中，它们不是数据类型，因此程序无法修改它们。</p></li><li><p>([]) 中括号操作符: <strong>动态的</strong>。方括号里必须是一个<strong>计算结果为字符串</strong>的表达式.</p><p>属性名通过字符串表示。字符串是js的数据类型，在程序运行时可以修改和创建它们。</p></li></ul><a id="more"></a><h3 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a>2. 区别</h3><h4 id="2-1-“-”可以用变量作为属性名或访问，而点方法不可以"><a href="#2-1-“-”可以用变量作为属性名或访问，而点方法不可以" class="headerlink" title="2.1 “[]”可以用变量作为属性名或访问，而点方法不可以"></a>2.1 “[]”可以用变量作为属性名或访问，而点方法不可以</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">obj.name = <span class="string">'张三'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">'name'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.myName);<span class="comment">//undefined,访问不到对应的属性</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj[myName]);<span class="comment">//张三 此时myName = 'name'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    name:<span class="string">'gogo'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//  []可以也可以通过字符串访问，但是需要加双引号</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person[<span class="string">"name"</span>]);<span class="comment">//gogo</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//  .直接访问字符串</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">//gogo</span></span></pre></td></tr></table></figure><blockquote><p>“[]”可以通过<strong>变量</strong>访问，也可以通过<strong>字符串</strong>访问，通过字符串访问时需要加双引号。</p></blockquote><h4 id="2-2-“-”中括号法–可以用数字作为属性名-而点语法不可以"><a href="#2-2-“-”中括号法–可以用数字作为属性名-而点语法不可以" class="headerlink" title="2.2 “[]”中括号法–可以用数字作为属性名,而点语法不可以"></a>2.2 “[]”中括号法–可以用数字作为属性名,而点语法不可以</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">obj[<span class="number">2</span>]=<span class="number">2</span>;   <span class="comment">//给obj对象添加了2 这个属性 --&gt; obj&#123;2:2&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj[<span class="number">2</span>]);<span class="comment">//2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj<span class="number">.2</span>)<span class="comment">//Unexpected number</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">//&#123;2: 2&#125;</span></span></pre></td></tr></table></figure><h4 id="2-3-“-”可以动态访问的属性名，可以在程序运行时创建和修改属性，点操作符不行，即”-”–可以动态设置和获取"><a href="#2-3-“-”可以动态访问的属性名，可以在程序运行时创建和修改属性，点操作符不行，即”-”–可以动态设置和获取" class="headerlink" title="2.3 “[]”可以动态访问的属性名，可以在程序运行时创建和修改属性，点操作符不行，即”[]”–可以动态设置和获取"></a>2.3 “[]”可以动态访问的属性名，可以在程序运行时创建和修改属性，点操作符不行，即”[]”–可以动态设置和获取</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customer=&#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addr=[<span class="string">'北京'</span>,<span class="string">'上海'</span>,<span class="string">'广州'</span>,<span class="string">'深圳'</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    customer[<span class="string">"address"</span>+i]=addr[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(addr);  <span class="comment">//[ '北京', '上海', '广州', '深圳' ]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(customer);  <span class="comment">//&#123; address0: '北京', address1: '上海', address2: '广州', address3: '深圳' &#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    str += customer[<span class="string">"address"</span> + i] + <span class="string">"\t"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str);   <span class="comment">//北京    上海    广州    深圳</span></span></pre></td></tr></table></figure><h4 id="2-4-如果属性名中包含会导致语法错误的字符，或者属性名是关键字或者保留字，也可以使用方括号表示法"><a href="#2-4-如果属性名中包含会导致语法错误的字符，或者属性名是关键字或者保留字，也可以使用方括号表示法" class="headerlink" title="2.4 如果属性名中包含会导致语法错误的字符，或者属性名是关键字或者保留字，也可以使用方括号表示法"></a>2.4 如果属性名中包含会导致语法错误的字符，或者属性名是关键字或者保留字，也可以使用方括号表示法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">person[<span class="string">'first name'</span>] =<span class="string">'ling'</span>;  <span class="comment">//first name包含一个空格</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person[<span class="string">'first name'</span>]);<span class="comment">//ling</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//console.log(person.first name)//书写都通不过</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">person[<span class="string">'for'</span>] =<span class="string">'ling_for'</span>; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">person.if =<span class="string">'ling_if'</span>;  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person[<span class="string">'for'</span>]);<span class="comment">//ling_for</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person.for);<span class="comment">//ling_for</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person[<span class="string">'if'</span>]);<span class="comment">//gogo_if</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person.if);<span class="comment">//ling_if</span></span></pre></td></tr></table></figure><blockquote><p>属性名有空格，请使用方括号”[]”</p></blockquote><h3 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h3><p>[js对象属性通过“.”和“[ ]”访问的区别](<a href="https://segmentfault.com/a/1190000021794888">https://segmentfault.com/a/1190000021794888</a>)</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;js对象属性通过“-”和“-”访问的区别&quot;&gt;&lt;a href=&quot;#js对象属性通过“-”和“-”访问的区别&quot; class=&quot;headerlink&quot; title=&quot;js对象属性通过“.”和“[ ]”访问的区别&quot;&gt;&lt;/a&gt;js对象属性通过“.”和“[ ]”访问的区别&lt;/h2&gt;&lt;h3 id=&quot;1-读取和设置对象属性有两种写法&quot;&gt;&lt;a href=&quot;#1-读取和设置对象属性有两种写法&quot; class=&quot;headerlink&quot; title=&quot;1. 读取和设置对象属性有两种写法&quot;&gt;&lt;/a&gt;1. 读取和设置对象属性有两种写法&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(.) 方法： obj.attr &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;([])方法： obj[attr]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(.) 点操作符: &lt;strong&gt;静态的&lt;/strong&gt;。右侧必须是一个以&lt;strong&gt;属性名称&lt;/strong&gt;命名的简单标识符。&lt;/p&gt;
&lt;p&gt;属性名用一个标识符来表示。标识符必须直接出现再js程序中，它们不是数据类型，因此程序无法修改它们。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;([]) 中括号操作符: &lt;strong&gt;动态的&lt;/strong&gt;。方括号里必须是一个&lt;strong&gt;计算结果为字符串&lt;/strong&gt;的表达式.&lt;/p&gt;
&lt;p&gt;属性名通过字符串表示。字符串是js的数据类型，在程序运行时可以修改和创建它们。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://ming-clavin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Node后端搭建（express+sequlize)</title>
    <link href="https://ming-clavin.github.io/2021/06/15/2021/2021.06/Node%E5%90%8E%E7%AB%AF%E6%90%AD%E5%BB%BA%EF%BC%88express+sequlize)/"/>
    <id>https://ming-clavin.github.io/2021/06/15/2021/2021.06/Node%E5%90%8E%E7%AB%AF%E6%90%AD%E5%BB%BA%EF%BC%88express+sequlize)/</id>
    <published>2021-06-15T14:42:16.000Z</published>
    <updated>2021-08-07T17:16:23.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>​    首先编写一个 Express Web 服务器开始；接着为 MySQL 数据库添加配置；使用 Sequelize创建模型<code>Tutorial</code>并编写控制器；自定义所有请求的路由。</p><table><thead><tr><th align="left">Methods</th><th align="left">Urls</th><th align="left">Actions</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">api/tutorials</td><td align="left">获取所有内容</td></tr><tr><td align="left">GET</td><td align="left">api/tutorials/:id</td><td align="left">获取<code>id</code>对应的内容</td></tr><tr><td align="left">POST</td><td align="left">api/tutorials</td><td align="left">添加新的内容</td></tr><tr><td align="left">PUT</td><td align="left">api/tutorials/:id</td><td align="left">更新<code>id</code>对应的内容</td></tr><tr><td align="left">DELETE</td><td align="left">api/tutorials/:id</td><td align="left">删除<code>id</code>对应的内容</td></tr><tr><td align="left">DELETE</td><td align="left">api/tutorials</td><td align="left">删除所有内容</td></tr><tr><td align="left">GET</td><td align="left">api/tutorials/published</td><td align="left">查找 <code>published</code>属性值为<code>true</code>的内容</td></tr><tr><td align="left">GET</td><td align="left">api/tutorials?title=[kw]</td><td align="left">找到标题包含 <code>&#39;kw&#39;</code>的内容</td></tr></tbody></table><a id="more"></a><h2 id="2-创建-Node-js-应用程序"><a href="#2-创建-Node-js-应用程序" class="headerlink" title="2. 创建 Node.js 应用程序"></a>2. 创建 Node.js 应用程序</h2><h3 id="2-1-创建一个文件夹"><a href="#2-1-创建一个文件夹" class="headerlink" title="2.1 创建一个文件夹"></a>2.1 创建一个文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ mkdir nodejs-express-sequelize-mysql</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ cd nodejs-express-sequelize-mysql</span></pre></td></tr></table></figure><h3 id="2-2-使用package-json文件初始化-Node-js-应用程序"><a href="#2-2-使用package-json文件初始化-Node-js-应用程序" class="headerlink" title="2.2 使用package.json文件初始化 Node.js 应用程序"></a>2.2 使用<code>package.json</code>文件初始化 Node.js 应用程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm init</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">name: (nodejs-express-sequelize-mysql) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">version: (1.0.0) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">description: Node.js Rest Apis with Express, Sequelize &amp; MySQL.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">entry point: (index.js) server.js</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">test command: </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">git repository: </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">keywords: nodejs, express, sequelize, mysql, rest, api</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">author: bezkoder</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">license: (ISC)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">Is this ok? (yes) yes</span></pre></td></tr></table></figure><h3 id="2-3-安装必要的模块：express，sequelize，mysql2和body-parser"><a href="#2-3-安装必要的模块：express，sequelize，mysql2和body-parser" class="headerlink" title="2.3 安装必要的模块：express，sequelize，mysql2和body-parser"></a>2.3 安装必要的模块：<code>express</code>，<code>sequelize</code>，<code>mysql2</code>和<code>body-parser</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install express sequelize mysql2 body-parser cors --save</span></pre></td></tr></table></figure><p>安装后的<em>package.json</em>文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">"name"</span>: <span class="string">"nodejs-express-sequelize-mysql"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">"description"</span>: <span class="string">"Node.js Rest Apis with Express, Sequelize &amp; MySQL"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">"main"</span>: <span class="string">"server.js"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">"scripts"</span>: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">"keywords"</span>: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"nodejs"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"express"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"rest"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"api"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"sequelize"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"mysql"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">"author"</span>: <span class="string">"bezkoder"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"^1.19.0"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"cors"</span>: <span class="string">"^2.8.5"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"express"</span>: <span class="string">"^4.17.1"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"mysql2"</span>: <span class="string">"^2.0.2"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"sequelize"</span>: <span class="string">"^5.21.2"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="3-设置-Express-Web-服务器"><a href="#3-设置-Express-Web-服务器" class="headerlink" title="3. 设置 Express Web 服务器"></a>3. 设置 Express Web 服务器</h2><h3 id="3-1-创建一个新的server-js文件"><a href="#3-1-创建一个新的server-js文件" class="headerlink" title="3.1 创建一个新的server.js文件"></a>3.1 创建一个新的server.js文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">"body-parser"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">"cors"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> corsOptions = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  origin: <span class="string">"http://localhost:8081"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">app.use(cors(corsOptions));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse requests of content-type - application/json</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">app.use(bodyParser.json());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse requests of content-type - application/x-www-form-urlencoded</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// simple route</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  res.json(&#123; <span class="attr">message</span>: <span class="string">"Welcome to bezkoder application."</span> &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// set port, listen for requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">8080</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">app.listen(PORT, () =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server is running on port <span class="subst">$&#123;PORT&#125;</span>.`</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><h3 id="3-2-模块作用"><a href="#3-2-模块作用" class="headerlink" title="3.2 模块作用"></a>3.2 模块作用</h3><ul><li>Express 用于构建 Rest api</li><li><a href="https://www.npmjs.com/package/body-parser">body-parser</a>帮助解析请求并创建<code>req.body</code>对象</li><li><a href="https://www.npmjs.com/package/cors">cors</a>提供 Express 中间件来启用具有各种选项的 CORS</li></ul><h3 id="3-3-运行程序"><a href="#3-3-运行程序" class="headerlink" title="3.3 运行程序"></a>3.3 运行程序</h3><p>​    创建一个 Express 应用程序，然后添加添加<code>body-parser</code>和<code>cors</code>中间件，通过<code>app.use()</code>方法使用它们。（注意：设置了origin: <code>http://localhost:8081</code>用于接收跨域请求）。</p><p>​    运行命令<code>node server.js</code>可以再<code>http://localhost:8080/</code>看到页面</p><h2 id="4-配置-MySQL-数据库-amp-Sequelize"><a href="#4-配置-MySQL-数据库-amp-Sequelize" class="headerlink" title="4. 配置 MySQL 数据库 &amp; Sequelize"></a>4. 配置 MySQL 数据库 &amp; Sequelize</h2><p>新建一个<code>app</code>文件夹，在文件夹中创建一个单独的<code>config</code>文件夹，用于使用<code>db.config.js</code>文件进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  HOST: <span class="string">"localhost"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  USER: <span class="string">"root"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  PASSWORD: <span class="string">"123456"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  DB: <span class="string">"testdb"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  dialect: <span class="string">"mysql"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  pool: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    max: <span class="number">5</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    min: <span class="number">0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    acquire: <span class="number">30000</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    idle: <span class="number">10000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><p>前五个参数用于 MySQL 连接。<br><code>pool</code>是可选的，它将用于 Sequelize 连接池配置：</p><ul><li><code>max</code>: 池中的最大连接数</li><li><code>min</code>: 池中的最小连接数</li><li><code>idle</code>: 连接在被释放之前可以空闲的最长时间，以毫秒为单位</li><li><code>acquire</code>: 最长时间，以毫秒为单位，该池将在抛出错误之前尝试获取连接</li></ul><h2 id="5-初始化Sequelize"><a href="#5-初始化Sequelize" class="headerlink" title="5. 初始化Sequelize"></a>5. 初始化Sequelize</h2><p>在<strong>app</strong> / <strong>models</strong>文件夹中初始化 Sequelize，该文件夹包含之后数据库的模型</p><h3 id="5-1-创建app-models-index-js"><a href="#5-1-创建app-models-index-js" class="headerlink" title="5.1 创建app / models / index.js"></a>5.1 创建<strong>app</strong> / <strong>models</strong> / <em>index.js</em></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dbConfig = <span class="built_in">require</span>(<span class="string">"../config/db.config.js"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">"sequelize"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(dbConfig.DB, dbConfig.USER, dbConfig.PASSWORD, &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  host: dbConfig.HOST,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  dialect: dbConfig.dialect,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  operatorsAliases: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  pool: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    max: dbConfig.pool.max,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    min: dbConfig.pool.min,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    acquire: dbConfig.pool.acquire,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    idle: dbConfig.pool.idle</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">db.Sequelize = Sequelize;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">db.sequelize = sequelize;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">db.tutorials = <span class="built_in">require</span>(<span class="string">"./tutorial.model.js"</span>)(sequelize, Sequelize);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = db;</span></pre></td></tr></table></figure><h3 id="5-2-在server-js-中调用sync-方法"><a href="#5-2-在server-js-中调用sync-方法" class="headerlink" title="5.2 在server.js 中调用sync()方法"></a>5.2 在server.js 中调用sync()方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">app.use(...);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">"./app/models"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">db.sequelize.sync();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr></table></figure><h3 id="5-3-删除现有表并重新同步数据库（一般不用）"><a href="#5-3-删除现有表并重新同步数据库（一般不用）" class="headerlink" title="5.3 删除现有表并重新同步数据库（一般不用）"></a>5.3 删除现有表并重新同步数据库（一般不用）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.sequelize.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Drop and re-sync db."</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><h2 id="6-定义-Sequelize-模型"><a href="#6-定义-Sequelize-模型" class="headerlink" title="6. 定义 Sequelize 模型"></a>6. 定义 Sequelize 模型</h2><p>在<code>model</code>文件夹中创建<code>tutorial.model.js</code>文件：</p><p>这个Sequelize 模型代表MySQL 数据库中的<strong>教程</strong>表。这些列会自动生成：<em>ID</em>，<em>标题</em>，<em>描述</em>，<em>发布</em>，<em>createdAt</em>，<em>updatedAt</em>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, Sequelize</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> Tutorial = sequelize.define(<span class="string">"tutorial"</span>, &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    title: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      type: Sequelize.STRING</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    description: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      type: Sequelize.STRING</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    published: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      type: Sequelize.BOOLEAN</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> Tutorial;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><blockquote><p>初始化 Sequelize 后，我们不需要编写 CRUD 函数，Sequelize 支持所有这些函数：</p><ul><li>创建一个新教程： <code>create(object)</code></li><li>通过 id 查找教程： <code>findByPk(id)</code></li><li>获取所有教程： <code>findAll()</code></li><li>通过 id 更新教程： <code>update(data, where: { id: id })</code></li><li>删除教程： <code>destroy(where: { id: id })</code></li><li>删除所有教程： <code>destroy(where: {})</code></li><li>按标题查找所有教程： <code>findAll({ where: { title: ... } })</code></li></ul></blockquote><h2 id="7-创建控制器"><a href="#7-创建控制器" class="headerlink" title="7.创建控制器"></a>7.创建控制器</h2><p>新建<code>app/ controllers</code>文件夹，在文件夹中创建文件<code>tutorial.controller.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">"../models"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Tutorial = db.tutorials;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Op = db.Sequelize.Op;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create and Save a new Tutorial</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">exports.create = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retrieve all Tutorials from the database.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">exports.findAll = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find a single Tutorial with an id</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">exports.findOne = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Update a Tutorial by the id in the request</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">exports.update = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delete a Tutorial with the specified id in the request</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">exports.delete = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delete all Tutorials from the database.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">exports.deleteAll = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find all published Tutorials</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">exports.findAllPublished = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><h3 id="7-1-创建一条新数据"><a href="#7-1-创建一条新数据" class="headerlink" title="7.1 创建一条新数据"></a>7.1 创建一条新数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">exports.create = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Validate request</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!req.body.title) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    res.status(<span class="number">400</span>).send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      message: <span class="string">"Content can not be empty!"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Create a Tutorial</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> tutorial = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    title: req.body.title,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    description: req.body.description,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    published: req.body.published ? req.body.published : <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Save Tutorial in the database</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  Tutorial.create(tutorial)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      res.send(data);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      res.status(<span class="number">500</span>).send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        message:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">          err.message || <span class="string">"Some error occurred while creating the Tutorial."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><h3 id="7-2-检索数据（有条件）"><a href="#7-2-检索数据（有条件）" class="headerlink" title="7.2 检索数据（有条件）"></a>7.2 检索数据（有条件）</h3><p>从数据库中检索所有教程/按标题查找</p><p>使用<code>req.query.title</code>从请求中获取查询字符串并将其视为<code>findAll()</code>方法的条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">exports.findAll = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> title = req.query.title;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> condition = title ? &#123; <span class="attr">title</span>: &#123; [Op.like]: <span class="string">`%<span class="subst">$&#123;title&#125;</span>%`</span> &#125; &#125; : <span class="literal">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  Tutorial.findAll(&#123; <span class="attr">where</span>: condition &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      res.send(data);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      res.status(<span class="number">500</span>).send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        message:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">          err.message || <span class="string">"Some error occurred while retrieving tutorials."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><h3 id="7-3-检索单条数据"><a href="#7-3-检索单条数据" class="headerlink" title="7.3 检索单条数据"></a>7.3 检索单条数据</h3><p>通过<code>id</code>查询数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">exports.findOne = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> id = req.params.id;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  Tutorial.findByPk(id)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      res.send(data);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      res.status(<span class="number">500</span>).send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        message: <span class="string">"Error retrieving Tutorial with id="</span> + id</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><h3 id="7-4-更新一条数据"><a href="#7-4-更新一条数据" class="headerlink" title="7.4 更新一条数据"></a>7.4 更新一条数据</h3><p>以<code>id</code>作为依据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">exports.update = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> id = req.params.id;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  Tutorial.update(req.body, &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    where: &#123; <span class="attr">id</span>: id &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    .then(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        res.send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">          message: <span class="string">"Tutorial was updated successfully."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        res.send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">          message: <span class="string">`Cannot update Tutorial with id=<span class="subst">$&#123;id&#125;</span>. Maybe Tutorial was not found or req.body is empty!`</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      res.status(<span class="number">500</span>).send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        message: <span class="string">"Error updating Tutorial with id="</span> + id</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><h3 id="7-4-删除数据"><a href="#7-4-删除数据" class="headerlink" title="7.4 删除数据"></a>7.4 删除数据</h3><p>根据<code>id</code>删除数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">exports.delete = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> id = req.params.id;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  Tutorial.destroy(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    where: &#123; <span class="attr">id</span>: id &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    .then(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        res.send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">          message: <span class="string">"Tutorial was deleted successfully!"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        res.send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">          message: <span class="string">`Cannot delete Tutorial with id=<span class="subst">$&#123;id&#125;</span>. Maybe Tutorial was not found!`</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      res.status(<span class="number">500</span>).send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        message: <span class="string">"Could not delete Tutorial with id="</span> + id</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><p>删除所有数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">exports.deleteAll = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  Tutorial.destroy(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    where: &#123;&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    truncate: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    .then(<span class="function"><span class="params">nums</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      res.send(&#123; <span class="attr">message</span>: <span class="string">`<span class="subst">$&#123;nums&#125;</span> Tutorials were deleted successfully!`</span> &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      res.status(<span class="number">500</span>).send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        message:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">          err.message || <span class="string">"Some error occurred while removing all tutorials."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><h3 id="7-5-按条件查找数据"><a href="#7-5-按条件查找数据" class="headerlink" title="7.5 按条件查找数据"></a>7.5 按条件查找数据</h3><p>查找属性<code>published = true</code>的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">exports.findAllPublished = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  Tutorial.findAll(&#123; <span class="attr">where</span>: &#123; <span class="attr">published</span>: <span class="literal">true</span> &#125; &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      res.send(data);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      res.status(<span class="number">500</span>).send(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        message:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">          err.message || <span class="string">"Some error occurred while retrieving tutorials."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><h2 id="8-自定义路由"><a href="#8-自定义路由" class="headerlink" title="8. 自定义路由"></a>8. 自定义路由</h2><p>​    当客户端使用 HTTP 请求（GET、POST、PUT、DELETE）向端点发送请求时，需要通过设置路由来确定服务器将如何响应。</p><p>在<code>app/routes</code>文件夹中创建<code>turorial.routes.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> tutorials = <span class="built_in">require</span>(<span class="string">"../controllers/tutorial.controller.js"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">"express"</span>).Router();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Create a new Tutorial</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  router.post(<span class="string">"/"</span>, tutorials.create);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Retrieve all Tutorials</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  router.get(<span class="string">"/"</span>, tutorials.findAll);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Retrieve all published Tutorials</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  router.get(<span class="string">"/published"</span>, tutorials.findAllPublished);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Retrieve a single Tutorial with id</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  router.get(<span class="string">"/:id"</span>, tutorials.findOne);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Update a Tutorial with id</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  router.put(<span class="string">"/:id"</span>, tutorials.update);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Delete a Tutorial with id</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  router.delete(<span class="string">"/:id"</span>, tutorials.delete);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Delete all Tutorials</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  router.delete(<span class="string">"/"</span>, tutorials.deleteAll);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  app.use(<span class="string">'/api/tutorials'</span>, router);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><p>在<code>server.js</code>中引入路由（在<code>app.listen()</code>前）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"./app/routes/turorial.routes"</span>)(app);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// set port, listen for requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PORT = ...;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">app.listen(...);</span></pre></td></tr></table></figure><h2 id="9-参考文档"><a href="#9-参考文档" class="headerlink" title="9. 参考文档"></a>9. 参考文档</h2><p><a href="https://bezkoder.com/node-js-express-sequelize-mysql/#Nodejs_Rest_CRUD_API_overview">Node.js Rest APIs example with Express, Sequelize &amp; MySQL</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h2&gt;&lt;p&gt;​    首先编写一个 Express Web 服务器开始；接着为 MySQL 数据库添加配置；使用 Sequelize创建模型&lt;code&gt;Tutorial&lt;/code&gt;并编写控制器；自定义所有请求的路由。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Methods&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Urls&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;GET&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;api/tutorials&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;获取所有内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;GET&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;api/tutorials/:id&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;获取&lt;code&gt;id&lt;/code&gt;对应的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;POST&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;api/tutorials&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;添加新的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;PUT&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;api/tutorials/:id&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;更新&lt;code&gt;id&lt;/code&gt;对应的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;DELETE&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;api/tutorials/:id&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;删除&lt;code&gt;id&lt;/code&gt;对应的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;DELETE&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;api/tutorials&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;删除所有内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;GET&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;api/tutorials/published&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;查找 &lt;code&gt;published&lt;/code&gt;属性值为&lt;code&gt;true&lt;/code&gt;的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;GET&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;api/tutorials?title=[kw]&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;找到标题包含 &lt;code&gt;&amp;#39;kw&amp;#39;&lt;/code&gt;的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="Node后端" scheme="https://ming-clavin.github.io/categories/Node%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端" scheme="https://ming-clavin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="MySQL" scheme="https://ming-clavin.github.io/tags/MySQL/"/>
    
    <category term="数据库" scheme="https://ming-clavin.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HTML常用标签</title>
    <link href="https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/3.HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
    <id>https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/3.HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</id>
    <published>2021-05-12T14:42:16.000Z</published>
    <updated>2021-05-12T14:44:31.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h1><h2 id="1-标题标签-lt-h1-gt-lt-h6-gt"><a href="#1-标题标签-lt-h1-gt-lt-h6-gt" class="headerlink" title="1. 标题标签  &lt;h1&gt; - &lt;h6&gt;"></a>1. 标题标签  <code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 我是一级标题 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>作用：</strong>作为标题使用，并且依据重要性递减</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h4</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h5</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>小明好帅！<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></pre></td></tr></table></figure><a id="more"></a><h2 id="2-段落标签"><a href="#2-段落标签" class="headerlink" title="2. 段落标签"></a>2. 段落标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 我是一个段落标签 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>作用：</strong>把 HTML 文档分割为若干段落</p><p><strong>注意：</strong></p><ul><li>文本在一个段落中会根据浏览器窗口的大小自动换行</li><li>段落和段落之间保有空隙</li></ul><h2 id="3-换行标签"><a href="#3-换行标签" class="headerlink" title="3. 换行标签"></a>3. 换行标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></pre></td></tr></table></figure><p><strong>作用：</strong>强制换行</p><p><strong>注意：</strong>标签只是开始新的一行，与段落不同，段落之间会插入一些垂直的间距。</p><h2 id="4-文本格式化标签"><a href="#4-文本格式化标签" class="headerlink" title="4. 文本格式化标签"></a>4. 文本格式化标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>文字  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span>文字  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span>文字      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span>文字      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span>     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span>    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span>    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">我是<span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></pre></td></tr></table></figure><p>作用：给文字添加 <strong>粗体</strong> 、<em>斜体</em> 、下划线</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221124.jpg" alt="2" style="zoom: 67%;"><h2 id="5-lt-div-gt-和-lt-span-gt-标签"><a href="#5-lt-div-gt-和-lt-span-gt-标签" class="headerlink" title="5. &lt;div&gt;和&lt;span&gt;标签"></a>5. <code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> div标签 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> span标签 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>作用：</strong><div> 和 <span> 没有语义，它们是盒子用于装内容</span></div></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221220.png" alt="1" style="zoom: 25%;"><p><strong>注意：</strong></p><ul><li>一行只能放一个 <div> —— 大盒子</div></li><li>一行可以多个 <span> —— 小盒子</span></li></ul><h2 id="6-图像标签"><a href="#6-图像标签" class="headerlink" title="6. 图像标签"></a>6. 图像标签</h2><p>作用：定义 HTML 页面中的图像</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图像URL"</span> /&gt;</span></span></pre></td></tr></table></figure><p>注意:src 是<img>标签的必须属性，它用于指定图像文件的路径和文件名</p><p><strong>其他属性：</strong></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221357.jpg" alt="2" style="zoom: 67%;"><p><strong>注意：</strong></p><ul><li>图像标签可以拥有多个属性，必须写在标签名的后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>属性采取键值对的格式，即 key=“value” 的格式，属性 =“属性值”。</li></ul><h2 id="7-路径"><a href="#7-路径" class="headerlink" title="7. 路径"></a>7. 路径</h2><p>目录文件夹：普通文件夹，存放了做页面所需要的相关素材，比如 html 文件、图片等</p><p>根目录：最外一层文件夹</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221509.png" alt="1" style="zoom: 33%;"><h2 id="8-相对路径与绝对路径"><a href="#8-相对路径与绝对路径" class="headerlink" title="8. 相对路径与绝对路径"></a>8. 相对路径与绝对路径</h2><p><strong>相对路径：</strong>从代码所在的这个文件出发，去寻找目标文件</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221546.jpg" alt="2" style="zoom: 67%;"><p><strong>绝对路径（少用）：</strong></p><p>从盘符开始的路径，如：“D:\web\img\logo.gif”</p><p><strong>符号：</strong></p><ul><li>相对路径：<code>\</code></li><li>绝对路径：<code>/</code></li></ul><h2 id="9-超链接标签"><a href="#9-超链接标签" class="headerlink" title="9. 超链接标签"></a>9. 超链接标签</h2><p>用于定义超链接，作用是从一个页面链接到另一个页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"跳转目标"</span> <span class="attr">target</span>=<span class="string">"目标窗口的弹出方式"</span>&gt;</span> 文本或图像 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512221653.jpg" alt="2" style="zoom: 67%;"><h2 id="10-超链接标签分类："><a href="#10-超链接标签分类：" class="headerlink" title="10. 超链接标签分类："></a>10. 超链接标签分类：</h2><p>1)  外部链接：以”http:// + 网址 “ 开头 </p><p>2)  内部链接：网站内部页面之间的相互链接，直接链接内部页面 </p><p>3)  空链接：<code>&lt;a herf=&quot;#&quot;&gt; 空链接 &lt;/a&gt;</code></p><p>4)  下载链接：<code>&lt;a herf=&quot;xxx.zip/zip/rar(等压缩包形式)&gt; &lt;/a&gt;</code></p><p>5)  网页元素链接：网页中的各种网页元素，如文本、图像等都可以添加超链接</p><p>6)  锚点链接（重点）：点击链接到页面的某个位置 </p><ul><li>在 herf 属性中，设置属性值为 #名字（如：<code>&lt;a herf=&quot;#two&quot;&gt; 第二集 &lt;/a&gt;</code> ） </li><li>找到目标位置标签，添加id=名字 （如： <code>&lt;h3 id=&quot;two&quot;&gt; 第二季介绍 &lt;h3&gt;</code> )</li></ul><h2 id="11-注释"><a href="#11-注释" class="headerlink" title="11. 注释"></a>11. 注释</h2><p>注释以<code>“&lt;!--”</code>开头，以<code>“ --&gt;”</code>结束</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span>快捷键: ctrl +/</span></pre></td></tr></table></figure><h2 id="12-特殊字符"><a href="#12-特殊字符" class="headerlink" title="12. 特殊字符"></a>12. 特殊字符</h2><p>一些特殊的符号不方便直接使用，可以使用下面的字符来替代</p><ul><li><code>空格: &amp;nbsp;</code></li><li><code>“&lt;”: &amp;lt;</code></li><li><code>“&gt;”: &amp;gt;</code></li></ul><h2 id="13-表格标签"><a href="#13-表格标签" class="headerlink" title="13. 表格标签"></a>13. 表格标签</h2><p>用于显示、展示数据，可以让数据更加规整地显示规整。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>&lt;table&gt; &lt;/table&gt;</code>是用于定义表格的标签</li><li><code>&lt;tr&gt; &lt;/tr&gt;</code>标签用于定义表格中的行，必须嵌套在<code>&lt;table&gt; &lt;/table&gt;</code>标签</li><li><code>&lt;td&gt; &lt;/td&gt;</code>用于定义表格中的单元格，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中</li><li>字母 td 指表格数据（table data），即数据单元格的内容</li></ul><h2 id="14-表头单元格标签"><a href="#14-表头单元格标签" class="headerlink" title="14. 表头单元格标签"></a>14. 表头单元格标签</h2><p>表头单元格位于表格的第一行或第一列，里面的文本内容加粗居中显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></pre></td></tr></table></figure><h2 id="15-表格属性"><a href="#15-表格属性" class="headerlink" title="15. 表格属性"></a>15. 表格属性</h2><p>不常用，一般在CSS中设置，属性写到表格标签table 里面去</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512222150.png" alt="1" style="zoom:67%;"><h2 id="16-表格结构标签"><a href="#16-表格结构标签" class="headerlink" title="16. 表格结构标签"></a>16. 表格结构标签</h2><ul><li>头部标签：<code>&lt;/thead&gt;</code>（内部必须拥有<code>&lt;tr&gt;</code> 标签）</li><li>主题区域：<code>&lt;/tbody&gt;</code></li></ul><p><strong>注意：</strong>都是放在 <code>&lt;table&gt;&lt;/table&gt;</code> 标签中</p><h2 id="17-合并单元格"><a href="#17-合并单元格" class="headerlink" title="17. 合并单元格"></a>17. 合并单元格</h2><ul><li>跨行合并：rowspan=”合并单元格的个数”</li><li>跨列合并：colspan=”合并单元格的个数”</li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512222252.png" alt="image-20210512222251831" style="zoom: 33%;"><p><strong>目标单元格：</strong></p><ul><li>跨行：最上侧单元格为目标单元格, 写合并代码</li><li>跨列：最左侧单元格为目标单元格, 写合并代码</li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512222615.png" alt="image-20210512222614069" style="zoom: 33%;"><h2 id="18-列表标签"><a href="#18-列表标签" class="headerlink" title="18. 列表标签"></a>18. 列表标签</h2><p>用于布局页面，分为：无序列表、有序列表和自定义列表</p><h2 id="19-无序列表"><a href="#19-无序列表" class="headerlink" title="19. 无序列表"></a>19. 无序列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>无序列表的各个列表项之间没有顺序级别之分，是并列的</li><li><code>&lt;ul&gt;&lt;/ul&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>，不能直接在<code>&lt;ul&gt;&lt;/ul&gt;</code>标签中输入其他标签</li><li><code>&lt;li&gt;</code>与 <code>&lt;/li&gt;</code> 之间相当于一个容器，可以容纳所有元素</li><li>无序列表带有样式属性，通常使用CSS取消</li></ul><h2 id="20-有序列表"><a href="#20-有序列表" class="headerlink" title="20. 有序列表"></a>20. 有序列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></pre></td></tr></table></figure><p>注意：</p><ul><li><code>&lt;ol&gt;&lt;/ol&gt;</code>中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>，不能直接在 <ol></ol> 标签中输入其他标签</li><li><code>&lt;li&gt;</code>与 <code>&lt;/li&gt;</code>之间相当于一个容器，可以容纳所有元素</li><li>无序列表带有样式属性，通常使用CSS取消</li></ul><h2 id="21-自定义列表"><a href="#21-自定义列表" class="headerlink" title="21. 自定义列表"></a>21. 自定义列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span> 大哥 <span class="tag">&lt;/<span class="name">dt</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span> 小弟 <span class="tag">&lt;/<span class="name">dt</span>&gt;</span> -----&gt; 小弟用于解释大哥  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span> 小弟 <span class="tag">&lt;/<span class="name">dt</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>&lt;dl&gt;&lt;/dl&gt;</code> 里面只能包含<code>&lt;dt&gt;</code> 和 <code>&lt;dd&gt;</code></li><li><code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>个数没有限制，经常是一个<code>&lt;dt&gt;</code> 对应多个<code>&lt;dd&gt;</code></li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512222938.png" alt="1" style="zoom: 67%;"><h2 id="22-列表总结"><a href="#22-列表总结" class="headerlink" title="22. 列表总结"></a>22. 列表总结</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223018.jpg" alt="2" style="zoom: 67%;"><p><strong>使用场景：</strong></p><ul><li><p>使用无序列表</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223101.png" alt="1" style="zoom:50%;"></li><li><p>使用自定义列表</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223119.png" alt="1" style="zoom:50%;"></li></ul><h2 id="23-表单标签"><a href="#23-表单标签" class="headerlink" title="23. 表单标签"></a>23. 表单标签</h2><p>用于收集用户信息</p><p>组成：表单域、表单控件（也称为表单元素）和 提示信息</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223144.png" alt="1" style="zoom:50%;"><h2 id="24-表单域"><a href="#24-表单域" class="headerlink" title="24. 表单域"></a>24. 表单域</h2><p>表单域是一个包含表单元素的区域，用于定义表单域，以实现用户信息的收集和传递。<code>&lt;form&gt;</code> 会把它范围内的表单元素信息提交给服务器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">“url地址”</span> <span class="attr">method</span>=<span class="string">“提交方式”</span> <span class="attr">name</span>=<span class="string">“表单域名称</span>"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">各种表单元素控件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223230.jpg" alt="2" style="zoom:50%;"><h2 id="25-lt-input-gt-表单元素"><a href="#25-lt-input-gt-表单元素" class="headerlink" title="25. &lt;input&gt; 表单元素"></a>25. <code>&lt;input&gt;</code> 表单元素</h2><p>用于收集用户信息</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223257.jpg" alt="2" style="zoom: 67%;"><p><strong>注意：</strong></p><ul><li><code>&lt;input/&gt;</code> 标签为单标签</li><li>type 属性设置不同的属性值用来指定不同的控件类型</li></ul><h2 id="26-lt-input-gt-元素属性"><a href="#26-lt-input-gt-元素属性" class="headerlink" title="26. &lt;input&gt; 元素属性"></a>26. <code>&lt;input&gt;</code> 元素属性</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512223400.jpg" alt="2" style="zoom: 67%;"><p><strong>注意：</strong></p><ul><li>多个单选按钮拥有相同名字时，可以实现单选一</li><li>单选框和复选框，选项的name的值要相同</li><li>value只能在text中显示，只能后台人员使用</li><li>checked打开时默认选中：checked=”checked”（在单选框和复选框中设置）</li></ul><h2 id="27-lt-label-gt-标签"><a href="#27-lt-label-gt-标签" class="headerlink" title="27. &lt;label&gt;标签"></a>27. <code>&lt;label&gt;</code>标签</h2><p><code>&lt;label&gt;</code>标签用于绑定一个表单元素, 当点击<code>&lt;label&gt;</code>标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>   <span class="attr">id</span>=<span class="string">"sex"</span> /&gt;</span></span></pre></td></tr></table></figure><h2 id="28-lt-select-gt-表单元素"><a href="#28-lt-select-gt-表单元素" class="headerlink" title="28. &lt;select&gt; 表单元素"></a>28. <code>&lt;select&gt;</code> 表单元素</h2><p>用于定义下拉列表，在多个选项中让用户进行选择</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  ...  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code>。</li><li>在<code>&lt;option&gt;</code> 中定义 selected =“ selected “ 时，当前项即为默认选中项。</li></ul><h2 id="29-lt-textarea-gt-表单元素"><a href="#29-lt-textarea-gt-表单元素" class="headerlink" title="29. &lt;textarea&gt;表单元素"></a>29. <code>&lt;textarea&gt;</code>表单元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">cols</span>=<span class="string">"20"</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  文本内容  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>通过 <code>&lt;textarea&gt;</code> 标签可以轻松地创建多行文本输入框。</li><li>cols=“每行中的字符数” ，rows=“显示的行数”（实际开发使用CSS来控制）</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;HTML常用标签&quot;&gt;&lt;a href=&quot;#HTML常用标签&quot; class=&quot;headerlink&quot; title=&quot;HTML常用标签&quot;&gt;&lt;/a&gt;HTML常用标签&lt;/h1&gt;&lt;h2 id=&quot;1-标题标签-lt-h1-gt-lt-h6-gt&quot;&gt;&lt;a href=&quot;#1-标题标签-lt-h1-gt-lt-h6-gt&quot; class=&quot;headerlink&quot; title=&quot;1. 标题标签  &amp;lt;h1&amp;gt; - &amp;lt;h6&amp;gt;&quot;&gt;&lt;/a&gt;1. 标题标签  &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; - &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt; 我是一级标题 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt;作为标题使用，并且依据重要性递减&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h5&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h5&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h6&lt;/span&gt;&amp;gt;&lt;/span&gt;小明好帅！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h6&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端学习之HTML" scheme="https://ming-clavin.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BHTML/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Html" scheme="https://ming-clavin.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>HTML基本结构标签</title>
    <link href="https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/2.HTML%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E6%A0%87%E7%AD%BE/"/>
    <id>https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/2.HTML%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E6%A0%87%E7%AD%BE/</id>
    <published>2021-05-12T14:41:16.000Z</published>
    <updated>2021-05-12T14:43:52.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML基本结构标签"><a href="#HTML基本结构标签" class="headerlink" title="HTML基本结构标签"></a>HTML基本结构标签</h1><h2 id="1-单标签和双标签"><a href="#1-单标签和双标签" class="headerlink" title="1. 单标签和双标签"></a>1. 单标签和双标签</h2><ul><li><p>单标签        <code>&lt;br/&gt;</code>  </p></li><li><p>双标签        <code>&lt;html&gt;   &lt;/html&gt;</code></p></li></ul><p>注：HTML 标签通常是成对出现的，标签对中的第一个标签是开始标签，第二个标签是结束标签。</p><h2 id="2-标签关系"><a href="#2-标签关系" class="headerlink" title="2. 标签关系"></a>2. 标签关系</h2><h3 id="2-1-包含关系"><a href="#2-1-包含关系" class="headerlink" title="2.1 包含关系"></a>2.1 包含关系</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr></table></figure><a id="more"></a><h3 id="2-2-并列关系"><a href="#2-2-并列关系" class="headerlink" title="2.2 并列关系"></a>2.2 并列关系</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr></table></figure><h3 id="2-3-基本的结构标签（骨架标签）"><a href="#2-3-基本的结构标签（骨架标签）" class="headerlink" title="2.3 基本的结构标签（骨架标签）"></a>2.3 基本的结构标签（骨架标签）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    hello world  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512220415.jpg" alt="2"></p><h2 id="4-骨架标签新增代码-lt-DOCTYPE-gt"><a href="#4-骨架标签新增代码-lt-DOCTYPE-gt" class="headerlink" title="4. 骨架标签新增代码 &lt;!DOCTYPE&gt;"></a>4. 骨架标签新增代码 &lt;!DOCTYPE&gt;</h2><p><code>&lt;!DOCTYPE&gt;</code>文档类型声明，作用就是告诉浏览器使用哪种HTML版本来显示网页。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>      当前页面采取的是 HTML5 版本来显示网页</span></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><code>&lt;!DOCTYPE&gt;</code>声明位于文档中的最前面的位置，处于 <html> 标签之前。</html></p><p><code>&lt;!DOCTYPE&gt;</code> 标签是文档类型声明标签，不是Html标签。</p><h2 id="5-lang语言种类"><a href="#5-lang语言种类" class="headerlink" title="5. lang语言种类"></a>5. lang语言种类</h2><p><strong>作用：</strong>定义当前文档显示的语言</p><p><strong>注意：</strong></p><ul><li>en ：英文   zh-CN : 中文</li><li>定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文</li></ul><h2 id="6-字符集"><a href="#6-字符集" class="headerlink" title="6. 字符集"></a>6. 字符集</h2><p>字符集是多个字符的集合。<meta>标签的charset属性规定HTML文档使用字符编码的类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">" UTF-8"</span> /&gt;</span></span></pre></td></tr></table></figure><p>注意：一般使用“UTF-8”编码（万国码）</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;HTML基本结构标签&quot;&gt;&lt;a href=&quot;#HTML基本结构标签&quot; class=&quot;headerlink&quot; title=&quot;HTML基本结构标签&quot;&gt;&lt;/a&gt;HTML基本结构标签&lt;/h1&gt;&lt;h2 id=&quot;1-单标签和双标签&quot;&gt;&lt;a href=&quot;#1-单标签和双标签&quot; class=&quot;headerlink&quot; title=&quot;1. 单标签和双标签&quot;&gt;&lt;/a&gt;1. 单标签和双标签&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单标签        &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;双标签        &lt;code&gt;&amp;lt;html&amp;gt;   &amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：HTML 标签通常是成对出现的，标签对中的第一个标签是开始标签，第二个标签是结束标签。&lt;/p&gt;
&lt;h2 id=&quot;2-标签关系&quot;&gt;&lt;a href=&quot;#2-标签关系&quot; class=&quot;headerlink&quot; title=&quot;2. 标签关系&quot;&gt;&lt;/a&gt;2. 标签关系&lt;/h2&gt;&lt;h3 id=&quot;2-1-包含关系&quot;&gt;&lt;a href=&quot;#2-1-包含关系&quot; class=&quot;headerlink&quot; title=&quot;2.1 包含关系&quot;&gt;&lt;/a&gt;2.1 包含关系&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端学习之HTML" scheme="https://ming-clavin.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BHTML/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Html" scheme="https://ming-clavin.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>Html简介</title>
    <link href="https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/1.HTML%E7%AE%80%E4%BB%8B/"/>
    <id>https://ming-clavin.github.io/2021/05/12/2021/2021.05/study_Html/1.HTML%E7%AE%80%E4%BB%8B/</id>
    <published>2021-05-12T14:40:16.000Z</published>
    <updated>2021-05-12T14:40:07.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Html简介"><a href="#Html简介" class="headerlink" title="Html简介"></a>Html简介</h1><h2 id="1．概述"><a href="#1．概述" class="headerlink" title="1．概述"></a>1．概述</h2><p>HTML指的是<strong>超文本标记语言</strong>，它是用来描述网页的一种语言。HTML 不是一种编程语言，而是一种<strong>标记语言</strong>。</p><h2 id="2-浏览器内核"><a href="#2-浏览器内核" class="headerlink" title="2. 浏览器内核"></a>2. 浏览器内核</h2><p>浏览器内核（渲染引擎）： 负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512215811.jpg" alt="1"></p><h2 id="3-Web-标准"><a href="#3-Web-标准" class="headerlink" title="3. Web 标准"></a>3. Web 标准</h2><p>主要包括结构、表现和行为三个方面。</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210512215835.jpg" alt="2"></p><blockquote><p>总结：</p><ul><li>结构写到 HTML文件中</li><li>表现写到 CSS文件中</li><li>行为写到 JavaScript文件中</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Html简介&quot;&gt;&lt;a href=&quot;#Html简介&quot; class=&quot;headerlink&quot; title=&quot;Html简介&quot;&gt;&lt;/a&gt;Html简介&lt;/h1&gt;&lt;h2 id=&quot;1．概述&quot;&gt;&lt;a href=&quot;#1．概述&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="前端学习之HTML" scheme="https://ming-clavin.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BHTML/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Html" scheme="https://ming-clavin.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>MySQL让主键id重新排序</title>
    <link href="https://ming-clavin.github.io/2021/05/04/2020/MySQL%E8%AE%A9%E4%B8%BB%E9%94%AEid%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F/"/>
    <id>https://ming-clavin.github.io/2021/05/04/2020/MySQL%E8%AE%A9%E4%B8%BB%E9%94%AEid%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F/</id>
    <published>2021-05-04T14:19:00.000Z</published>
    <updated>2021-05-04T14:24:03.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL让主键id重新排序"><a href="#MySQL让主键id重新排序" class="headerlink" title="MySQL让主键id重新排序"></a>MySQL让主键id重新排序</h1><ol><li><p>备份表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">create table table_bak like table_name;</span></pre></td></tr></table></figure></li><li><p>备份表数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">insert into table_bak select * from table_name;</span></pre></td></tr></table></figure></li><li><p>删除原来主键字段(如id)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">alter table table_name drop id;</span></pre></td></tr></table></figure></li><li><p>添加主键，自增，放在第一位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">alter table table_name add id int(11) primary key auto_increment first;</span></pre></td></tr></table></figure></li><li><p>检查没问题的话，删除备份的表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">delete from table_bak;</span></pre></td></tr></table></figure><blockquote><p>注：table_name 为 表名</p></blockquote></li></ol><p><strong>参考：<a href="https://blog.csdn.net/u013091013/article/details/78194012">mysql让主键id重新排序</a></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL让主键id重新排序&quot;&gt;&lt;a href=&quot;#MySQL让主键id重新排序&quot; class=&quot;headerlink&quot; title=&quot;MySQL让主键id重新排序&quot;&gt;&lt;/a&gt;MySQL让主键id重新排序&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;备份表结构&lt;/p&gt;
&lt;fi</summary>
      
    
    
    
    <category term="MySQL" scheme="https://ming-clavin.github.io/categories/MySQL/"/>
    
    
    <category term="后端" scheme="https://ming-clavin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="MySQL" scheme="https://ming-clavin.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>误存文件夹到GitHub的解决方法</title>
    <link href="https://ming-clavin.github.io/2021/05/04/2020/%E8%AF%AF%E5%AD%98%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%B0GitHub%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://ming-clavin.github.io/2021/05/04/2020/%E8%AF%AF%E5%AD%98%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%B0GitHub%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2021-05-03T16:44:00.000Z</published>
    <updated>2021-05-03T16:40:44.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="误存文件夹到GitHub的解决方法"><a href="#误存文件夹到GitHub的解决方法" class="headerlink" title="误存文件夹到GitHub的解决方法"></a>误存文件夹到GitHub的解决方法</h1><p><strong>将node_modules文件存放到了GitHub的解决方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">touch .gitignore</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">echo &#x2F;node_modules&#x2F; &gt;&gt; .gitignore</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">git rm -r --cached node_modules</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">git add . -A</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">git commit -m &quot;remove node_modules&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">git push</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;误存文件夹到GitHub的解决方法&quot;&gt;&lt;a href=&quot;#误存文件夹到GitHub的解决方法&quot; class=&quot;headerlink&quot; title=&quot;误存文件夹到GitHub的解决方法&quot;&gt;&lt;/a&gt;误存文件夹到GitHub的解决方法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;将n</summary>
      
    
    
    
    <category term="Github_desktop" scheme="https://ming-clavin.github.io/categories/Github-desktop/"/>
    
    
    <category term="Github" scheme="https://ming-clavin.github.io/tags/Github/"/>
    
    <category term="Github_desktop" scheme="https://ming-clavin.github.io/tags/Github-desktop/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Desktop 上传本地库</title>
    <link href="https://ming-clavin.github.io/2021/04/28/2020/GitHub%20Desktop%20%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%BA%93/"/>
    <id>https://ming-clavin.github.io/2021/04/28/2020/GitHub%20Desktop%20%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%BA%93/</id>
    <published>2021-04-28T08:00:00.000Z</published>
    <updated>2021-04-28T08:01:58.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Desktop-上传本地库"><a href="#GitHub-Desktop-上传本地库" class="headerlink" title="GitHub Desktop 上传本地库"></a>GitHub Desktop 上传本地库</h1><h2 id="1-创建新仓库"><a href="#1-创建新仓库" class="headerlink" title="1. 创建新仓库"></a>1. 创建新仓库</h2><p>单击 <strong>Create a New Repository on your Hard Drive…（在硬盘上创建新仓库…）</strong></p><img src="https://docs.github.com/assets/images/help/desktop/getting-started-guide/creating-a-repository.png" alt="创建新仓库" style="zoom:50%;"><p>填写字段并选择您的首选项</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428140721.png" alt="Snipaste_2021-04-28_05-15-13" style="zoom:50%;"><a id="more"></a><ul><li><p>“Name（名称）”定义仓库在本地以及 GitHub 上的名称</p></li><li><p>“Description（说明）”是一个可选字段，可用于提供有关仓库目的的更多信息。</p></li><li><p>“Local path（本地路径）”设置仓库在计算机上的位置。</p><blockquote><p>默认情况下，GitHub Desktop 会在 <em>Documents</em> 文件夹内创建 <em>GitHub</em> 文件夹，用于存储仓库，但您也可以选择计算机上的任何位置。 您的新仓库将是所选位置内的文件夹。</p></blockquote></li><li><p><strong>Initialize this repository with a README（使用自述文件初始化此仓库）</strong></p><blockquote><p>创建包含 <em>README.md</em> 文件的初始提交</p></blockquote></li><li><p><strong>Git ignore（Git 忽略）</strong>下拉菜单可让您添加自定义文件，以忽略本地仓库中您不想存储在版本控制中的特定文件</p></li><li><p><strong>License（许可证）</strong>下拉菜单可让您将开源许可证添加到仓库中的 <em>LICENSE</em> 文件。</p></li></ul><h2 id="2-探索-GitHub-Desktop"><a href="#2-探索-GitHub-Desktop" class="headerlink" title="2. 探索 GitHub Desktop"></a>2. 探索 GitHub Desktop</h2><h3 id="2-1-GitHub-Desktop-菜单栏"><a href="#2-1-GitHub-Desktop-菜单栏" class="headerlink" title="2.1 GitHub Desktop 菜单栏"></a>2.1 GitHub Desktop 菜单栏</h3><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428150854.png" alt="image-20210428150426467" style="zoom:50%;"><ul><li><strong>Current repository（当前仓库）</strong>显示您处理的仓库的名称。 您可以单击 <strong>Current repository（当前仓库）</strong>切换到 GitHub Desktop 中的不同仓库。</li><li><strong>Current branch（当前分支）</strong>显示您处理的分支的名称。 您可以单击 <strong>Current branch（当前分支）</strong>来查看仓库中的所有分支、切换到不同的分支或者创建新分支。 在仓库中创建拉取请求后，也可单击 <strong>Current branch（当前分支）</strong>查看它们。</li><li><strong>Publish repository（发布仓库）</strong>会出现，因为尚未将仓库发布到 GitHub。 工具栏的这部分将根据您当前分支和仓库的状态而改变。 不同的上下文相关操作将可以使用，允许您在本地仓库与远程仓库之间交换数据。</li></ul><h3 id="2-2-更改历史记录"><a href="#2-2-更改历史记录" class="headerlink" title="2.2 更改历史记录"></a>2.2 更改历史记录</h3><p>在左侧边栏中，会看到 <strong>Changes（更改）</strong>和 <strong>History（历史记录）</strong>视图。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428151250.png" alt="image-20210428151248941" style="zoom:50%;"><ul><li><p><strong>Changes（更改）</strong>视图显示对当前分支中的文件已经做出但尚未提交到本地仓库的更改。在底部有“Summary（摘要）”和“Description（说明）”文本框，以及 <strong>Commit to BRANCH（提交到 [分支]）</strong>按钮。 这是提交新更改的位置。 <strong>Commit to BRANCH（提交到 [分支]）</strong>按钮是动态的，将显示提交更改到哪个分支</p></li><li><p><strong>History（历史记录）</strong>视图显示仓库当前分支上以前的提交。会看到在创建仓库时 GitHub Desktop 所创建的“初始提交”。 在提交的右侧，根据您在创建仓库时选择的选项，可能会看到 <em>.gitattributes*、</em>.gitignore<em>、</em>LICENSE* 或 <em>README</em> 文件。 您可以单击每个文件以查看该文件的差异，也就是提交中对该文件的更改。 差异只显示文件已更改的部分，而不显示文件的全部内容。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428151507.png" alt="image-20210428151506659" style="zoom:50%;"></li></ul><h2 id="3-将仓库推送到-GitHub"><a href="#3-将仓库推送到-GitHub" class="headerlink" title="3. 将仓库推送到 GitHub"></a>3. 将仓库推送到 GitHub</h2><p><strong>步骤一：</strong>单击菜单栏中的 <strong>Publish repository（发布仓库）</strong></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428151759.png" alt="image-20210428151757880" style="zoom:50%;"><ul><li>GitHub Desktop 自动使用创建仓库时输入的信息填充<strong>Name（名称）</strong>和<strong>Description（说明）</strong>字段。</li><li><strong>Keep this code private（保持此代码为私有）</strong>可控制谁可以查看项目。 如果不选中此选项，GitHub 上的其他用户将能够查看代码。 如果选中此选项，代码将不会公开。</li><li><strong>Organization（组织）</strong>下拉菜单（如果有）可让您将仓库发布到 GitHub 上您所属的特定组织。</li></ul><p><strong>步骤二：</strong>单击 <strong>Publish Repository（发布仓库）</strong>按钮</p><p><strong>步骤三：</strong>从 GitHub Desktop 访问 GitHub.com 上的仓库。 在文件菜单中，单击 <strong>Repository（仓库）</strong>，然后单击 <strong>View on GitHub（在 GitHub 上查看）</strong>。 这会直接在默认浏览器中打开仓库。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428152751.png" alt="image-20210428152750345" style="zoom: 25%;"><h2 id="4-进行更改、提交更改和推送更改"><a href="#4-进行更改、提交更改和推送更改" class="headerlink" title="4. 进行更改、提交更改和推送更改"></a>4. 进行更改、提交更改和推送更改</h2><p><strong>步骤一：</strong>要从 GitHub Desktop 启动外部编辑器，请单击 Repository（仓库），然后单击 Open in VScode（在 [VScode] 中打开）。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428153006.png" alt="image-20210428153005460" style="zoom: 50%;"><p><strong>步骤二：</strong>对以前创建的 <em>README.md</em> 文件做一些更改</p><p><strong>步骤三：</strong>在 GitHub Desktop 中，导航到 <strong>Changes（更改）</strong>视图。 在文件列表中，会看到 <em>README.md*。 *README.md</em> 文件左边的勾选标记表示对文件的更改将成为提交的一部分。</p><blockquote><p> 以后可能会更改多个文件，但只想提交对其中部分文件所做的更改。 如果单击文件旁边的复选标记，则该文件不会包含在提交中。</p></blockquote><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428153333.png" alt="image-20210428153332669" style="zoom: 50%;"><p><strong>步骤四：</strong>在 <strong>Changes（更改）</strong>列表底部，输入提交消息。 在头像右侧，键入提交的简短描述。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428153549.png" alt="image-20210428153548125" style="zoom:50%;"><blockquote><p>在摘要下方，您会看到“Description（说明）”文本字段，在其中可以键入较长的提交更改描述，这有助于回顾项目的历史记录和了解更改的原因。 </p></blockquote><p><strong>步骤五：</strong>单击 <strong>Commit to BRANCH NAME（提交到 [分支名称]）</strong>。 提交按钮显示当前分支，因此可以确保提交到所需的分支。</p><p><strong>步骤六：</strong>要将更改推送到 GitHub 上的远程仓库，单击 <strong>Push origin（推送源）</strong></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428153709.png" alt="image-20210428153708638" style="zoom: 50%;"><ul><li><p><strong>Push origin（推送源）</strong>按钮就是单击以发布仓库到 GitHub 的按钮。 此按钮根据 Git 工作流程中的上下文而变。 现在改为 <code>Push origin（推送源）</code>了，其旁边的 <code>1</code> 表示有一个提交尚未推送到 GitHub。</p></li><li><p><strong>Push origin（推送源）</strong>中的“源”表示我们将更改推送到名为 <code>origin</code> 的远程，在本例中是 GitHub.com 上的项目仓库。 </p><blockquote><p> 在推送任何新提交到 GitHub 之前，计算机上的项目仓库与 GitHub.com 上的项目仓库之间存在差异。 这可在程序员在本地工作，并且仅在准备好后才将更改推送到 GitHub.com。</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;GitHub-Desktop-上传本地库&quot;&gt;&lt;a href=&quot;#GitHub-Desktop-上传本地库&quot; class=&quot;headerlink&quot; title=&quot;GitHub Desktop 上传本地库&quot;&gt;&lt;/a&gt;GitHub Desktop 上传本地库&lt;/h1&gt;&lt;h2 id=&quot;1-创建新仓库&quot;&gt;&lt;a href=&quot;#1-创建新仓库&quot; class=&quot;headerlink&quot; title=&quot;1. 创建新仓库&quot;&gt;&lt;/a&gt;1. 创建新仓库&lt;/h2&gt;&lt;p&gt;单击 &lt;strong&gt;Create a New Repository on your Hard Drive…（在硬盘上创建新仓库…）&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://docs.github.com/assets/images/help/desktop/getting-started-guide/creating-a-repository.png&quot; alt=&quot;创建新仓库&quot; style=&quot;zoom:50%;&quot;&gt;

&lt;p&gt;填写字段并选择您的首选项&lt;/p&gt;
&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210428140721.png&quot; alt=&quot;Snipaste_2021-04-28_05-15-13&quot; style=&quot;zoom:50%;&quot;&gt;</summary>
    
    
    
    <category term="Github_desktop" scheme="https://ming-clavin.github.io/categories/Github-desktop/"/>
    
    
    <category term="Github" scheme="https://ming-clavin.github.io/tags/Github/"/>
    
    <category term="Github_desktop" scheme="https://ming-clavin.github.io/tags/Github-desktop/"/>
    
  </entry>
  
  <entry>
    <title>简易Node后端搭建</title>
    <link href="https://ming-clavin.github.io/2021/04/28/2020/%E7%AE%80%E6%98%93Node%E5%90%8E%E7%AB%AF%E6%90%AD%E5%BB%BA/"/>
    <id>https://ming-clavin.github.io/2021/04/28/2020/%E7%AE%80%E6%98%93Node%E5%90%8E%E7%AB%AF%E6%90%AD%E5%BB%BA/</id>
    <published>2021-04-28T07:55:00.000Z</published>
    <updated>2021-04-28T07:58:50.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易Node后端搭建"><a href="#简易Node后端搭建" class="headerlink" title="简易Node后端搭建"></a>简易Node后端搭建</h1><h2 id="1-Express"><a href="#1-Express" class="headerlink" title="1. Express"></a>1. Express</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><h4 id="1-1-1-安装淘宝镜像"><a href="#1-1-1-安装淘宝镜像" class="headerlink" title="1.1.1 安装淘宝镜像"></a>1.1.1 安装淘宝镜像</h4><p>安装npm之前可先安装淘宝镜像，使用cnpm的来代替npm，使得下载速度提高很多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span></pre></td></tr></table></figure><h4 id="1-1-2-初始化项目"><a href="#1-1-2-初始化项目" class="headerlink" title="1.1.2 初始化项目"></a>1.1.2 初始化项目</h4><p>目录下运行命令来初始化项目，期间所有提示按enter键即可，这会生成<code>package.json</code>，用于描述项目文件的.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm init</span></pre></td></tr></table></figure><a id="more"></a><p>再输入命令，项目目录中又会多出一个叫<code>node_modules</code>文件夹，里面是node.js提供的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm install</span></pre></td></tr></table></figure><h4 id="1-1-3-安装express"><a href="#1-1-3-安装express" class="headerlink" title="1.1.3 安装express"></a>1.1.3 安装express</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm install express --save</span></pre></td></tr></table></figure><p>创建结果：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210309183046.png" alt="image-20210309183045551" style="zoom: 50%;"><h4 id="1-1-4-检验是否创建成功"><a href="#1-1-4-检验是否创建成功" class="headerlink" title="1.1.4 检验是否创建成功"></a>1.1.4 检验是否创建成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">express --version</span></pre></td></tr></table></figure><p>若出现版本号，则为创建成功</p><h3 id="1-2-Express脚手架的安装"><a href="#1-2-Express脚手架的安装" class="headerlink" title="1.2 Express脚手架的安装"></a>1.2 Express脚手架的安装</h3><h4 id="1-2-1-使用express-generator安装"><a href="#1-2-1-使用express-generator安装" class="headerlink" title="1.2.1 使用express-generator安装"></a>1.2.1 使用express-generator安装</h4><ol><li><p>命令行进入项目目录，运行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm i express-generator</span></pre></td></tr></table></figure></li><li><p>创建了一个名为app的Express应用，并使用ejs模板引擎</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">express --view&#x3D;ejs app</span></pre></td></tr></table></figure></li><li><p>进入app，并安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd app</span></pre></td></tr></table></figure></li><li><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install</span></pre></td></tr></table></figure></li><li><p>在Windows下，使用以下命令启Express应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">set DEBUG&#x3D;app:* &amp; npm start</span></pre></td></tr></table></figure></li></ol><h4 id="1-2-2-使用express命令快速创建项目目录"><a href="#1-2-2-使用express命令快速创建项目目录" class="headerlink" title="1.2.2 使用express命令快速创建项目目录"></a>1.2.2 使用express命令快速创建项目目录</h4><p>用法：express项目文件夹的名字 -e</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">express app -e</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">cd app</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">cnpm install</span></pre></td></tr></table></figure><p>app文件夹下的文件结构：</p><ul><li>bin: 启动目录，包含启动文件www，默认监听端口是 3000 ，直接node www执行即可。</li><li>node_modules：依赖的模块包</li><li>public：存放静态资源</li><li>routes：路由操作</li><li>views：存放ejs模板引擎</li><li>app.js：主文件</li><li>package.json：项目描述文件</li></ul><h3 id="1-3-参考资料"><a href="#1-3-参考资料" class="headerlink" title="1.3 参考资料"></a>1.3 参考资料</h3><p><a href="https://blog.csdn.net/no10086/article/details/88958282?spm=1001.2014.3001.5501">Express全系列教程之(一)：Express的安装 和第一个程序</a></p><h2 id="2-sequelize"><a href="#2-sequelize" class="headerlink" title="2. sequelize"></a>2. sequelize</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><h4 id="2-1-1-安装sequelize"><a href="#2-1-1-安装sequelize" class="headerlink" title="2.1.1 安装sequelize"></a>2.1.1 安装sequelize</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm install sequelize -S</span></pre></td></tr></table></figure><h4 id="2-1-2-为MySQL数据库安装驱动程序"><a href="#2-1-2-为MySQL数据库安装驱动程序" class="headerlink" title="2.1.2 为MySQL数据库安装驱动程序"></a>2.1.2 为MySQL数据库安装驱动程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm install mysql2 -S</span></pre></td></tr></table></figure><h4 id="2-1-3-安装"><a href="#2-1-3-安装" class="headerlink" title="2.1.3 安装"></a>2.1.3 安装</h4><p>通过命令行创建sequelize目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cnpm install sequelize-cli -g</span></pre></td></tr></table></figure><h4 id="1-1-4-初始化项目"><a href="#1-1-4-初始化项目" class="headerlink" title="1.1.4 初始化项目"></a>1.1.4 初始化项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sequelize init</span></pre></td></tr></table></figure><p>文件目录：</p><ul><li>config – 数据库配置</li><li>migrations – 迁移文件</li><li>models – 模型文件</li><li>seeders – 种子文件</li></ul><h3 id="2-2-配置数据库环境"><a href="#2-2-配置数据库环境" class="headerlink" title="2.2 配置数据库环境"></a>2.2 配置数据库环境</h3><h4 id="2-2-1-环境参数"><a href="#2-2-1-环境参数" class="headerlink" title="2.2.1 环境参数"></a>2.2.1 环境参数</h4><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210309185515.png" alt="image-20210309185514118" style="zoom: 33%;"><h4 id="2-2-2-配置参数"><a href="#2-2-2-配置参数" class="headerlink" title="2.2.2 配置参数"></a>2.2.2 配置参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">"development"</span>: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"username"</span>: <span class="string">"root"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"password"</span>: <span class="string">"root"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"database"</span>: <span class="string">"document_development"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"host"</span>: <span class="string">"127.0.0.1"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"dialect"</span>: <span class="string">"mysql"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure><h3 id="2-3-创建数据库"><a href="#2-3-创建数据库" class="headerlink" title="2.3 创建数据库"></a>2.3 创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sequelize db:create --charset &#39;utf8mb4&#39;</span></pre></td></tr></table></figure><p>创建成功：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210310102721.png" alt="image-20210310102720851" style="zoom: 67%;"><h3 id="2-4-sequelize操作数据库：模型、迁移与种子"><a href="#2-4-sequelize操作数据库：模型、迁移与种子" class="headerlink" title="2.4 sequelize操作数据库：模型、迁移与种子"></a>2.4 sequelize操作数据库：模型、迁移与种子</h3><h4 id="2-4-1-创建模型与迁移"><a href="#2-4-1-创建模型与迁移" class="headerlink" title="2.4.1 创建模型与迁移"></a>2.4.1 创建模型与迁移</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sequelize model:generate --name Article --attributes title:string,content:text</span></pre></td></tr></table></figure><p>创建了名为Article的模型 ，表有两个字段：标题（string类型）；内容（text 类型）</p><h4 id="2-4-2-模型文件"><a href="#2-4-2-模型文件" class="headerlink" title="2.4.2 模型文件"></a>2.4.2 模型文件</h4><p>使用 <code>Node.js</code> 操作数据库需要用到模型文件，无需改动。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423174110.png" alt="image-20210423174109300" style="zoom: 33%;"><h4 id="2-4-3-迁移文件"><a href="#2-4-3-迁移文件" class="headerlink" title="2.4.3 迁移文件"></a>2.4.3 迁移文件</h4><p>迁移文件：migrations/xxx-create-article.js，里面保存的是 Articles 的字段。</p><p>（注意：sequelize 中默认规定，模型的名称是单数，而数据表是复数）</p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423174423.png" alt="image-20210310103047714"></p><p><strong><code>up</code>部分代码 – 建表：</strong></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423174954.png" alt="image-20210423174953113" style="zoom:50%;"><p><strong><code>down</code>部分代码 – 删除表：</strong></p><p>代码的 <code>down</code> 部分，是 <code>up</code> 的反向操作。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423175139.png" alt="image-20210423175138106" style="zoom:50%;"><h4 id="2-4-4-运行迁移"><a href="#2-4-4-运行迁移" class="headerlink" title="2.4.4 运行迁移"></a>2.4.4 运行迁移</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sequelize db:migrate</span></pre></td></tr></table></figure><p>运行命令，将字段迁移进数据库</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423173708.png" alt="image-20210423173706555" style="zoom:50%;"><h4 id="2-4-5-种子文件"><a href="#2-4-5-种子文件" class="headerlink" title="2.4.5 种子文件"></a>2.4.5 种子文件</h4><p><strong>创建种子文件,填充测试数据：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sequelize seed:generate --name article</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210310103517.png" alt="image-20210310103516290" style="zoom: 50%;"><p><strong>修改种子文件数据</strong></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423180253.png" alt="image-20210423180252412" style="zoom: 50%;"><p><strong>运行种子文件</strong></p><ul><li>运行所有种子文件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sequelize db:seed:all</span></pre></td></tr></table></figure><ul><li>运行指定的种子文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sequelize db:seed --seed xxx-article</span></pre></td></tr></table></figure><h4 id="2-4-6-总结"><a href="#2-4-6-总结" class="headerlink" title="2.4.6 总结"></a>2.4.6 总结</h4><p>日常开发项目数据库操作的步骤：</p><table><thead><tr><th align="center">步骤</th><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">第一步</td><td align="center">sequelize model:generate –name Article –attributes …</td><td align="center">建模型和迁移文件</td></tr><tr><td align="center">第二步</td><td align="center">人工处理</td><td align="center">根据需求调整模型和迁移文件</td></tr><tr><td align="center">第三步</td><td align="center">sequelize db:migrate</td><td align="center">运行迁移，生成数据表</td></tr><tr><td align="center">第四步</td><td align="center">sequelize seed:generate –name article</td><td align="center">新建种子文件</td></tr><tr><td align="center">第五步</td><td align="center">人工处理</td><td align="center">将种子文件修改为自己想填充的数据</td></tr><tr><td align="center">第六步</td><td align="center">sequelize db:seed:all</td><td align="center">运行种子文件，将默认数据填充到数据表中</td></tr></tbody></table><h3 id="2-5-查询数据库"><a href="#2-5-查询数据库" class="headerlink" title="2.5 查询数据库"></a>2.5 查询数据库</h3><h4 id="2-5-1-路由"><a href="#2-5-1-路由" class="headerlink" title="2.5.1 路由"></a>2.5.1 路由</h4><p>添加一个新的路由文件：在 routes 中，添加一个叫做 articles.js 的文件。基础的代码，和项目自带的其他路由文件一样，直接复制过来。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423181604.png" alt="image-20210423181603303" style="zoom:50%;"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = express.Router();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// ....</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = router;</span></pre></td></tr></table></figure><h4 id="2-5-2-get-请求"><a href="#2-5-2-get-请求" class="headerlink" title="2.5.2 get 请求"></a>2.5.2 <code>get</code> 请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">hello</span>: <span class="string">"ITFun"</span>&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p><strong>代码解析：</strong></p><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210310110023.png" alt="image-20210310110022651"></p><h4 id="2-5-3-使用路由"><a href="#2-5-3-使用路由" class="headerlink" title="2.5.3 使用路由"></a>2.5.3 使用路由</h4><p><code>app.js</code> 中使用<code>articles.js</code> 路由，路由文件才会生效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> articlesRouter = <span class="built_in">require</span>(<span class="string">'./routes/articles'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/articles'</span>, articlesRouter);</span></pre></td></tr></table></figure><h4 id="2-5-4-读取数据库"><a href="#2-5-4-读取数据库" class="headerlink" title="2.5.4 读取数据库"></a>2.5.4 读取数据库</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> models = <span class="built_in">require</span>(<span class="string">'../models'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// .....</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    models.Article.findAll().then(<span class="function"><span class="params">articles</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        res.json(&#123;<span class="attr">articles</span>: articles&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>结果：</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210423182339.png" alt="express 读取接口" style="zoom:50%;"><h4 id="2-5-5-异步查询语法"><a href="#2-5-5-异步查询语法" class="headerlink" title="2.5.5 异步查询语法"></a>2.5.5 异步查询语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> articles = <span class="keyword">await</span> models.Article.findAll();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">articles</span>: articles&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><ul><li><code>async</code> 是 <code>异步</code> 的意思，<code>async function</code> 表明当前这个 <code>function</code> 是异步的。</li><li><code>await</code>，表示等待一个异步方法执行完成。<code>await</code> 只能在 <code>async</code> 函数内部使用，用在普通函数里就会报错。</li></ul><h4 id="2-5-6-排序"><a href="#2-5-6-排序" class="headerlink" title="2.5.6 排序"></a>2.5.6 排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> articles = <span class="keyword">await</span> models.Article.findAll(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    order: [[<span class="string">'id'</span>, <span class="string">'DESC'</span>]],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424161706.png" alt="倒序" style="zoom: 50%;"><h3 id="2-6-添加数据"><a href="#2-6-添加数据" class="headerlink" title="2.6 添加数据"></a>2.6 添加数据</h3><h4 id="2-6-1-新增定义死的数据"><a href="#2-6-1-新增定义死的数据" class="headerlink" title="2.6.1 新增定义死的数据"></a>2.6.1 新增定义死的数据</h4><p>找到模型后，使用 <code>create</code> 方法，将数据插入进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.create(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        title: <span class="string">"猫猫狗狗"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        content: <span class="string">"小动物们的快乐"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><h4 id="2-6-2-使用Promise-语法"><a href="#2-6-2-使用Promise-语法" class="headerlink" title="2.6.2 使用Promise 语法"></a>2.6.2 使用<code>Promise</code> 语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">models.Article.create(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    title: <span class="string">"asdf"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    content: <span class="string">"asdfsadfsdf"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;).then(<span class="function"><span class="params">article</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure><h4 id="2-6-3-使用Postman测试接口"><a href="#2-6-3-使用Postman测试接口" class="headerlink" title="2.6.3 使用Postman测试接口"></a>2.6.3 使用<code>Postman</code>测试接口</h4><p>请求方式改为 <code>POST</code>，地址栏填上接口的地址。最后点击 <code>Send</code></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424162310" alt="在这里插入图片描述" style="zoom: 80%;"><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424162525.png" alt="image-20210424162524415" style="zoom:50%;"><h4 id="2-6-4-用户提交数据"><a href="#2-6-4-用户提交数据" class="headerlink" title="2.6.4 用户提交数据"></a>2.6.4 用户提交数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.post(&#39;&#x2F;&#39;, async function (req, res, next) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;&#39;你发送的内容是&#39;: req.body&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>注：<code>req.body</code>：用户使用 <code>post</code> 发送过来的内容</p><p><strong>测试接口</strong></p><p>打开 <code>Postman</code>，点击 <code>Body</code>，选择 <code>x-www-form-urlencoded</code>。<code>key</code> 要填对应数据库里的字段名称，<code>value</code> 里填插入数据库的数据。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424162648.png" alt="postman 测试 post提交数据" style="zoom: 50%;"><h4 id="2-6-5-将用户的数据插入数据库"><a href="#2-6-5-将用户的数据插入数据库" class="headerlink" title="2.6.5 将用户的数据插入数据库"></a>2.6.5 将用户的数据插入数据库</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.create(req.body);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><h3 id="2-7-数据库的删改查"><a href="#2-7-数据库的删改查" class="headerlink" title="2.7 数据库的删改查"></a>2.7 数据库的删改查</h3><h4 id="2-7-1-id属性"><a href="#2-7-1-id属性" class="headerlink" title="2.7.1 id属性"></a>2.7.1 <code>id</code>属性</h4><p>将<code>id</code>作为查询依据：</p><ul><li>每个数据都有<code>id</code>属性</li><li><code>id</code>属性自增，永远不会重复的</li></ul><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424163418.png" alt="image-20210424163417598" style="zoom:50%;"><p>定义的路由的时候，就在 <code>/</code> 后面加上一个 <code>:id</code>。这样定义后，表示这里可以接受一个 <code>文章id</code> 参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/:id'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">id</span>: req.params.id&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>使用 <code>req.params.id</code>方法，可以取到传入的id值</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424163657.png" alt="获取id" style="zoom:50%;"><h4 id="2-7-2-查询"><a href="#2-7-2-查询" class="headerlink" title="2.7.2 查询"></a>2.7.2 查询</h4><p>接收到用户传递的<code>id</code>值后，在模型中调用<code>findByPk</code>。 就可以在<code>Articles</code>表中找到当前文章</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/:id'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.findByPk(req.params.id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><blockquote><p>注意：<code>findByPk</code>，这里的 <code>Pk</code> 是 <code>Primary Key</code> 也就是<code>主键</code>的缩写。一般每个表都有个<code>主键</code>，如果没有特殊命名，一般来说就是 <code>id</code> 字段</p></blockquote><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424164129.png" alt="查询接口" style="zoom:50%;"><h4 id="2-7-3-修改"><a href="#2-7-3-修改" class="headerlink" title="2.7.3 修改"></a>2.7.3 修改</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.put(<span class="string">'/:id'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.findByPk(req.params.id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    article.update(req.body);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424164203.png" alt="修改接口" style="zoom: 50%;"><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424164211.png" alt="修改接口" style="zoom:50%;"><h4 id="2-7-4-删除"><a href="#2-7-4-删除" class="headerlink" title="2.7.4 删除"></a>2.7.4 删除</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.delete(<span class="string">'/:id'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.findByPk(req.params.id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    article.destroy();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">msg</span>: <span class="string">'删除成功'</span>&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>使用的请求方式是 <code>delete</code>。也是查询到当前文章后，直接调用 <code>destroy</code> 方法删掉它，返回 <code>msg: &#39;删除成功&#39;</code> 。</p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210424164356.png" alt="删除接口" style="zoom: 50%;"><h4 id="2-7-5-总结"><a href="#2-7-5-总结" class="headerlink" title="2.7.5 总结"></a>2.7.5 总结</h4><table><thead><tr><th>路由</th><th>请求方式</th><th>含义</th></tr></thead><tbody><tr><td>/articles</td><td>get</td><td>查询所有文章</td></tr><tr><td>/articles/:id</td><td>get</td><td>查询指定 id 的文章</td></tr><tr><td>/articles</td><td>post</td><td>新增文章</td></tr><tr><td>/articles/:id</td><td>put</td><td>编辑指定 id 的文章</td></tr><tr><td>/articles/:id</td><td>delete</td><td>删除指定 id 的文章</td></tr></tbody></table><h3 id="2-8-模糊搜索"><a href="#2-8-模糊搜索" class="headerlink" title="2.8 模糊搜索"></a>2.8 模糊搜索</h3><p>定义一个叫做 <code>where</code> 的空对象，里面保存需要查询的条件。</p><p>接收<code>title</code>参数，<code>where</code> 里添加一个 <code>like</code>（<code>SQL</code> 语句语法）。前后各放了一个 <code>%</code>，前面有百分号，表示关键词，前面可以有其他文字。后面有百分号，就表示关键词后面，可以跟着其他文字。模型调用<code>findAll</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 搜索</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> where = &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 模糊查询标题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> title = req.query.title;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (title) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        where.title = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            [Op.like]: <span class="string">'%'</span> + title + <span class="string">'%'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> articles = <span class="keyword">await</span> models.Article.findAll(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        order: [[<span class="string">'id'</span>, <span class="string">'DESC'</span>]],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        where: where</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">articles</span>: articles&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><h3 id="2-9-分页查询"><a href="#2-9-分页查询" class="headerlink" title="2.9 分页查询"></a>2.9 分页查询</h3><h4 id="2-9-1-分页原理"><a href="#2-9-1-分页原理" class="headerlink" title="2.9.1 分页原理"></a>2.9.1 分页原理</h4><table><thead><tr><th align="center">当前页数（currentPage）</th><th align="center">从哪里开始（offset）</th><th align="center">每页显示多少条（pageSize）</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">0</td><td align="center">10</td></tr><tr><td align="center">2</td><td align="center">10</td><td align="center">10</td></tr><tr><td align="center">3</td><td align="center">20</td><td align="center">10</td></tr></tbody></table><p>由表格可知：</p><p> <code>pageSize</code> 参数是固定不动的，可以得出<code>offset</code>和<code>currentPage</code>的线性关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">offset &#x3D; (currentPage - 1) * pageSize</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">offset &#x3D; (当前页数 - 1) * 每页条数</span></pre></td></tr></table></figure><h4 id="2-9-2-分页实现"><a href="#2-9-2-分页实现" class="headerlink" title="2.9.2 分页实现"></a>2.9.2 分页实现</h4><p><strong>当前页数（currentPage）</strong></p><p>如果用户传了这个参数，<code>currentPage</code>则为用户传递的值（注：用户传递的数据都是字符串，需要使用 <code>parseInt</code> 方法转换）；如果用户没传，则默认是 <code>第一页</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentPage = <span class="built_in">parseInt</span>(req.query.currentPage) || <span class="number">1</span>;</span></pre></td></tr></table></figure><p>或</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentPage = <span class="built_in">parseInt</span>(req.query.currentPage);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!currentPage) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    currentPage = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>每页显示多少条（pageSize）</strong></p><p>如果用户传了这个参数，<code>pageSize</code>则为用户传递的值；如果用户不传递参数过来，随便给它一个默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageSize = <span class="built_in">parseInt</span>(req.query.pageSize) || <span class="number">2</span>;</span></pre></td></tr></table></figure><p><strong>findAndCountAll、offset 与 limit</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> models.Article.findAndCountAll(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    order:[[<span class="string">'id'</span>, <span class="string">'DESC'</span>]],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    where: where,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    offset: (currentPage - <span class="number">1</span>) * pageSize,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    limit: pageSize</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><ul><li>将 <code>findAll</code> 改为 <code>findAndCountAll</code>，因为<code>findAndCountAll</code> 能返回总的记录数</li><li>接收值的 <code>articles</code> 改为 <code>result</code>，因为不仅仅有<code>文章列表</code>，还有<code>记录总数</code></li><li>添加上 <code>offset</code> 和 <code>limit</code> 参数，<code>offset</code> 对应的值为公式得出的结果，<code>limit</code>的值为<code>pageSize</code></li></ul><p><strong>响应出分页的 <code>json</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> res.json(result);</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210425171239.png" alt="模糊查询" style="zoom: 50%;"><ul><li><code>count</code> 里，保存的就是记录总数了，咱们数据库一共就是只有 <code>4</code> 条记录</li><li><code>rows</code> 里，存的才是文章列表。</li></ul><p><strong>返回分页数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">res.json(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">       articles: result.rows,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">       pagination: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">           currentPage: currentPage,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">           pageSize: pageSize,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">           <span class="comment">// 一共有多少条记录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">           total: result.count</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   &#125;);</span></pre></td></tr></table></figure><h3 id="2-10-表的关联"><a href="#2-10-表的关联" class="headerlink" title="2.10 表的关联"></a>2.10 表的关联</h3><h4 id="2-10-1-评论模型"><a href="#2-10-1-评论模型" class="headerlink" title="2.10.1 评论模型"></a>2.10.1 评论模型</h4><p>给文章添加上评论模块，使用关联模型，在查询文章的时候，自动查询出对应的评论。</p><p>添加评论模型代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sequelize model:generate --name Comment --attributes articleId:integer,content:text</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ sequelize db:migrate</span></pre></td></tr></table></figure><h4 id="2-10-2-种子文件"><a href="#2-10-2-种子文件" class="headerlink" title="2.10.2 种子文件"></a>2.10.2 种子文件</h4><p><strong>创建建种子文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sequelize seed:generate --name comment</span></pre></td></tr></table></figure><p><strong>导入数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    up: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> queryInterface.bulkInsert(<span class="string">'Comments'</span>, [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                articleId: <span class="number">1</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                content: <span class="string">"这是文章1的评论"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                createdAt: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                updatedAt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                articleId: <span class="number">1</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                content: <span class="string">"这个还是文章1的评论啊"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                createdAt: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                updatedAt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                articleId: <span class="number">2</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                content: <span class="string">"这是文章2的评论"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                createdAt: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                updatedAt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        ], &#123;&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    down: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> queryInterface.bulkDelete(<span class="string">'Comments'</span>, <span class="literal">null</span>, &#123;&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><p><strong>刷新数据库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$  sequelize db:seed --seed xxxx-comment</span></pre></td></tr></table></figure><h4 id="2-10-3-关联"><a href="#2-10-3-关联" class="headerlink" title="2.10.3 关联"></a>2.10.3 关联</h4><p><strong>打开 <code>models/article.js</code> 模型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Article.associate = <span class="function"><span class="keyword">function</span> (<span class="params">models</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    models.Article.hasMany(models.Comment)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><blockquote><p>一篇文章中<strong>有很多</strong>评论</p></blockquote><p><strong>打开 <code>models/comment.js</code> 模型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Comment.associate = <span class="function"><span class="keyword">function</span>(<span class="params">models</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  models.Comment.belongsTo(models.Article);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><blockquote><p>每条评论都是<strong>属于</strong>一篇文章的</p></blockquote><h4 id="2-10-4-查询"><a href="#2-10-4-查询" class="headerlink" title="2.10.4 查询"></a>2.10.4 查询</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/:id'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> article = <span class="keyword">await</span> models.Article.findOne(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        where: &#123;<span class="attr">id</span>: req.params.id&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        include: [models.Comment],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    res.json(&#123;<span class="attr">article</span>: article&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>加上<code>include</code>属性，会自动将当前文章对应的评论查出来</p><h4 id="2-10-5-效果"><a href="#2-10-5-效果" class="headerlink" title="2.10.5 效果"></a>2.10.5 效果</h4><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20210425172651.png" alt="关联查询" style="zoom:50%;"><h2 id="3-参考及项目地址"><a href="#3-参考及项目地址" class="headerlink" title="3. 参考及项目地址"></a>3. 参考及项目地址</h2><h3 id="3-1-参考地址"><a href="#3-1-参考地址" class="headerlink" title="3.1 参考地址"></a>3.1 参考地址</h3><p><a href="[https://blog.csdn.net/u010132177/article/details/109145320?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161934100516780261912162%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161934100516780261912162&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-5-109145320.first_rank_v2_pc_rank_v29&utm_term=node%E7%94%A8express%E5%86%99%E5%90%8E%E7%AB%AFrestful%E6%8E%A5%E5%8F%A3%E5%AE%9E%E6%88%98&spm=1018.2226.3001.4187](https://blog.csdn.net/u010132177/article/details/109145320?ops_request_misc=%7B%22request%5Fid%22%3A%22161934100516780261912162%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&request_id=161934100516780261912162&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-5-109145320.first_rank_v2_pc_rank_v29&utm_term=node用express写后端restful接口实战&spm=1018.2226.3001.4187)">node用express写后端restful接口实战</a></p><h3 id="3-2-项目地址"><a href="#3-2-项目地址" class="headerlink" title="3.2 项目地址"></a>3.2 项目地址</h3>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简易Node后端搭建&quot;&gt;&lt;a href=&quot;#简易Node后端搭建&quot; class=&quot;headerlink&quot; title=&quot;简易Node后端搭建&quot;&gt;&lt;/a&gt;简易Node后端搭建&lt;/h1&gt;&lt;h2 id=&quot;1-Express&quot;&gt;&lt;a href=&quot;#1-Express&quot; class=&quot;headerlink&quot; title=&quot;1. Express&quot;&gt;&lt;/a&gt;1. Express&lt;/h2&gt;&lt;h3 id=&quot;1-1-安装&quot;&gt;&lt;a href=&quot;#1-1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装&quot;&gt;&lt;/a&gt;1.1 安装&lt;/h3&gt;&lt;h4 id=&quot;1-1-1-安装淘宝镜像&quot;&gt;&lt;a href=&quot;#1-1-1-安装淘宝镜像&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 安装淘宝镜像&quot;&gt;&lt;/a&gt;1.1.1 安装淘宝镜像&lt;/h4&gt;&lt;p&gt;安装npm之前可先安装淘宝镜像，使用cnpm的来代替npm，使得下载速度提高很多。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g cnpm --registry&amp;#x3D;https:&amp;#x2F;&amp;#x2F;registry.npm.taobao.org&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;1-1-2-初始化项目&quot;&gt;&lt;a href=&quot;#1-1-2-初始化项目&quot; class=&quot;headerlink&quot; title=&quot;1.1.2 初始化项目&quot;&gt;&lt;/a&gt;1.1.2 初始化项目&lt;/h4&gt;&lt;p&gt;目录下运行命令来初始化项目，期间所有提示按enter键即可，这会生成&lt;code&gt;package.json&lt;/code&gt;，用于描述项目文件的.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cnpm init&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Node后端" scheme="https://ming-clavin.github.io/categories/Node%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端" scheme="https://ming-clavin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Node" scheme="https://ming-clavin.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Typora上传图片时,文件以时间戳命名</title>
    <link href="https://ming-clavin.github.io/2020/12/14/2020/Typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%B6-%E6%96%87%E4%BB%B6%E4%BB%A5%E6%97%B6%E9%97%B4%E6%88%B3%E5%91%BD%E5%90%8D/"/>
    <id>https://ming-clavin.github.io/2020/12/14/2020/Typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%B6-%E6%96%87%E4%BB%B6%E4%BB%A5%E6%97%B6%E9%97%B4%E6%88%B3%E5%91%BD%E5%90%8D/</id>
    <published>2020-12-14T14:03:38.000Z</published>
    <updated>2020-12-14T14:13:29.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、查询之前安装的PicGo执行路径"><a href="#一、查询之前安装的PicGo执行路径" class="headerlink" title="一、查询之前安装的PicGo执行路径"></a>一、查询之前安装的PicGo执行路径</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214170157.png" alt="image-20201214170155882" style="zoom: 67%;"><a id="more"></a><h1 id="二、安装插件"><a href="#二、安装插件" class="headerlink" title="二、安装插件"></a>二、安装插件</h1><p>进入cmd输入代码安装插件（super-prefix插件 —— 用于上传图片时能自动使用时间戳重命名）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd C:\Users\Administrator\AppData\Roaming\Typora\picgo\win64</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">.\picgo.exe install super-prefix</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214170742.png" alt="image-20201214170740861"><h1 id="三、修改配置文件"><a href="#三、修改配置文件" class="headerlink" title="三、修改配置文件"></a>三、修改配置文件</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">"picgoPlugins": &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    "picgo-plugin-super-prefix": true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  &#125;, // 为插件预留</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  "picgo-plugin-super-prefix": &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    "fileFormat": "YYYYMMDDHHmmss"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125; //super-prefix插件配置</span></pre></td></tr></table></figure><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214171510.png" alt="image-20201214171508681" style="zoom:80%;"><h1 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h1><p><a href="https://blog.csdn.net/in_the_road/article/details/105733292">Typora自动上传图片配置，集成PicGo-Core，文件以时间戳命名</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、查询之前安装的PicGo执行路径&quot;&gt;&lt;a href=&quot;#一、查询之前安装的PicGo执行路径&quot; class=&quot;headerlink&quot; title=&quot;一、查询之前安装的PicGo执行路径&quot;&gt;&lt;/a&gt;一、查询之前安装的PicGo执行路径&lt;/h1&gt;&lt;br&gt;

&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/20201214170157.png&quot; alt=&quot;image-20201214170155882&quot; style=&quot;zoom: 67%;&quot;&gt;</summary>
    
    
    
    <category term="Markdown" scheme="https://ming-clavin.github.io/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://ming-clavin.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>js获取对象属性值的2种方法</title>
    <link href="https://ming-clavin.github.io/2020/11/25/2020/js%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%842%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://ming-clavin.github.io/2020/11/25/2020/js%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%842%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2020-11-25T15:00:58.000Z</published>
    <updated>2020-11-25T15:03:01.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一种：通过-的方式获取"><a href="#第一种：通过-的方式获取" class="headerlink" title="第一种：通过 . 的方式获取"></a>第一种：通过 . 的方式获取</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201125140648489.png" alt="image-20201125140648489"></p><h1 id="第二种：通过-的方式获取"><a href="#第二种：通过-的方式获取" class="headerlink" title="第二种：通过 [ ] 的方式获取"></a>第二种：通过 [ ] 的方式获取</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201125141041462.png" alt="image-20201125141041462"></p><blockquote><p>注意：用数组下标获取值的方式获取属性，记得要给属性加引号</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/tu-0718/p/13218006.html">js获取对象属性值的2种方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一种：通过-的方式获取&quot;&gt;&lt;a href=&quot;#第一种：通过-的方式获取&quot; class=&quot;headerlink&quot; title=&quot;第一种：通过 . 的方式获取&quot;&gt;&lt;/a&gt;第一种：通过 . 的方式获取&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;&lt;img src=&quot;https://ca</summary>
      
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://ming-clavin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>vue-router模块</title>
    <link href="https://ming-clavin.github.io/2020/11/24/2020/vue-router%E6%A8%A1%E5%9D%97/"/>
    <id>https://ming-clavin.github.io/2020/11/24/2020/vue-router%E6%A8%A1%E5%9D%97/</id>
    <published>2020-11-24T13:01:00.000Z</published>
    <updated>2021-04-28T07:53:03.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Vue路由传参query和params的区别"><a href="#一、Vue路由传参query和params的区别" class="headerlink" title="一、Vue路由传参query和params的区别"></a>一、Vue路由传参query和params的区别</h1><h2 id="1-区别"><a href="#1-区别" class="headerlink" title="1. 区别"></a>1. 区别</h2><ol><li>query使用path和name传参跳转都可以，而params只能使用name传参跳转</li><li>传参跳转页面时，query和params不需要在路由上配参数就能在新的页面获取到参数</li><li>但params不在路由配参数的话，当用户刷新当前页面的时候，参数就会消失。</li></ol><h2 id="2-样例"><a href="#2-样例" class="headerlink" title="2. 样例"></a>2. 样例</h2><h3 id="2-1-query传参"><a href="#2-1-query传参" class="headerlink" title="2.1 query传参"></a>2.1 query传参</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在方法里面写 也可以用name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123; path:&#39;&#x2F;search&#39;, query: &#123; categoryId: this.categoryId &#125;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; router-link里面的to</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;path:&#39;&#x2F;search&#39;,query: &#123;categoryId: item.categoryId&#125;&#125;&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">接收参数：this.categoryId &#x3D; this.$route.query.categoryId ;</span></pre></td></tr></table></figure><a id="more"></a><h3 id="2-2-params传参"><a href="#2-2-params传参" class="headerlink" title="2.2 params传参"></a>2.2 params传参</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//在方法里面写</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="attr">name</span>::<span class="string">'/search'</span>, <span class="attr">query</span>: &#123; <span class="attr">categoryId</span>: <span class="keyword">this</span>.categoryId &#125;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// router-link里面的to</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"&#123;name::'/search',query: &#123;categoryId: item.categoryId&#125;&#125;"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">接收参数：<span class="keyword">this</span>.categoryId = <span class="keyword">this</span>.$route.params.categoryId ;</span></pre></td></tr></table></figure><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><a href="https://blog.csdn.net/Brian_Jing/article/details/100987080">Vue路由传参query和params的区别</a></p><br><h1 id="二、Vue-详解设置路由导航的两种方法"><a href="#二、Vue-详解设置路由导航的两种方法" class="headerlink" title="二、Vue-详解设置路由导航的两种方法"></a>二、Vue-详解设置路由导航的两种方法</h1><h2 id="1-方法"><a href="#1-方法" class="headerlink" title="1. 方法"></a>1. 方法</h2><h3 id="1-1-使用-lt-router-link-to-quot-quot-gt"><a href="#1-1-使用-lt-router-link-to-quot-quot-gt" class="headerlink" title="1.1 使用&lt;router-link :to=&quot;...&quot;&gt;"></a>1.1 使用<code>&lt;router-link :to=&quot;...&quot;&gt;</code></h3><p><strong>to里的值可以是一个字符串路径，或者一个描述地址的对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">"apple"</span>&gt; to apple&lt;<span class="regexp">/router-link&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">/</span><span class="regexp">/ 对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">&lt;router-link :to="&#123; path:'apple' &#125;"&gt; to apple&lt;/</span>router-link&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名路由</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"&#123; name:'applename' &#125;"</span>&gt; to apple&lt;<span class="regexp">/router-link&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">/</span><span class="regexp">/ 直接路由带查询参数query，地址栏变成 /</span>apple?color=red</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"&#123; path:'apple', query: &#123; color:'red' &#125;&#125;"</span>&gt; to apple&lt;<span class="regexp">/router-link&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">/</span><span class="regexp">/ 命名路由带查询参数query，地址栏变成/</span>apple?color=red</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"&#123; name:'applename', query: &#123; color:'red' &#125;&#125;"</span>&gt; to apple&lt;<span class="regexp">/router-link&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">/</span><span class="regexp">/ 直接路由带路由参数params，params 不生效，如果提供了 path，params 会被忽略</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">&lt;router-link :to="&#123; path:'apple', params: &#123; color:'red' &#125;&#125;"&gt; to apple&lt;/</span>router-link&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名路由带路由参数params，地址栏是/apple/red</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"&#123; name:'applename', params: &#123; color:'red' &#125;&#125;"</span>&gt; to apple&lt;<span class="regexp">/router-link&gt;</span></span></pre></td></tr></table></figure><h3 id="1-2-router-push-…-方法"><a href="#1-2-router-push-…-方法" class="headerlink" title="1.2 router.push(…)方法"></a>1.2 router.push(…)方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">router.push(<span class="string">'apple'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">path</span>:<span class="string">'apple'</span> &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名路由</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'applename'</span> &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接路由带查询参数query，地址栏变成 /apple?color=red</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'apple'</span>, <span class="attr">query</span>: &#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名路由带查询参数query，地址栏变成/apple?color=red</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'applename'</span>, <span class="attr">query</span>: &#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接路由带路由参数params，params 不生效，如果提供了 path，params 会被忽略</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">path</span>:<span class="string">'applename'</span>, <span class="attr">params</span>:&#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名路由带路由参数params，地址栏是/apple/red</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">name</span>:<span class="string">'applename'</span>, <span class="attr">params</span>:&#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;&#125;)</span></pre></td></tr></table></figure><h2 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2. 注意事项"></a>2. 注意事项</h2><h3 id="2-1-关于带参数的路由"><a href="#2-1-关于带参数的路由" class="headerlink" title="2.1 关于带参数的路由"></a>2.1 关于带参数的路由</h3><blockquote><p><strong>查询参数query：</strong></p><p>无论是直接路由“path” 还是命名路由“name”，带查询参数query，地址栏会变成“/url?查询参数名：查询参数值“;</p></blockquote><blockquote><p><strong>查询参数params：</strong></p><p>直接路由“path” 带路由参数params  params 不生效;<br>命名路由“name” 带路由参数params 地址栏保持是“/url/路由参数值”;</p></blockquote><h3 id="2-2-设置路由map里的path值"><a href="#2-2-设置路由map里的path值" class="headerlink" title="2.2 设置路由map里的path值"></a>2.2 <strong>设置路由map里的path值</strong></h3><p> 带路由参数params时，路由map里的path应该写成: path:’/apple/:color’ ;<br> 带查询参数query时，路由map里的path应该写成: path:’/apple’ ；</p><h3 id="2-3-获取参数方法"><a href="#2-3-获取参数方法" class="headerlink" title="2.3 获取参数方法"></a>2.3 获取参数方法</h3><p>在组件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;&#123;$route.params.color&#125;&#125;</span></pre></td></tr></table></figure><p>在js里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">this.$route.params.color</span></pre></td></tr></table></figure><h2 id="3-参考-1"><a href="#3-参考-1" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><a href="https://www.cnblogs.com/superlizhao/p/8527317.html">Vue-详解设置路由导航的两种方法</a></p><br><h1 id="三、命名路由"><a href="#三、命名路由" class="headerlink" title="三、命名路由"></a>三、命名路由</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p><strong>给一个路由命一个唯一的名称，然后跳转调用这个名称即可</strong></p><h2 id="2-样例-1"><a href="#2-样例-1" class="headerlink" title="2. 样例"></a>2. 样例</h2><p>（1）在src/router/index.js中加一个带name的路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    path: &#39;one&#39;, &#x2F;&#x2F; 子页面1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    name: &#39;one&#39;, &#x2F;&#x2F; 路由名称-命名路由</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    component: One &#x2F;&#x2F; 页面组件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>（2）在src/component/Home.vue页面中调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; template跳转调用</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123; name: &#39;one&#39; &#125;&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">子页面1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;router-link&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; router.push函数跳转调用</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; name: &#39;user&#39; &#125;&#125;)</span></pre></td></tr></table></figure><h2 id="3-参考-2"><a href="#3-参考-2" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><a href="https://blog.51cto.com/4547985/2390802">vue-router之命名路由-命名视图-重定向-别名（五）</a></p><h1 id="四、使用vue-router"><a href="#四、使用vue-router" class="headerlink" title="四、使用vue-router"></a>四、使用vue-router</h1><h2 id="1-三要素"><a href="#1-三要素" class="headerlink" title="1. 三要素"></a>1. 三要素</h2><p>vue-router有三个要素：<strong>路由map、路由视图、路由导航</strong>。</p><blockquote><ol><li>路由map指路由与组件的映射关系；</li><li>路由视图指路由映射对应组件的渲染位置；</li><li>路由导航指可以使地址栏发生变化的导航链接。</li></ol></blockquote><h2 id="2-路由map"><a href="#2-路由map" class="headerlink" title="2. 路由map"></a>2. 路由map</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">import App from &#39;.&#x2F;App&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1、在入口文件main.js里引入</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">import VRouter from &#39;vue-router&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Vue.config.productionTip &#x3D; false</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;2、用全局方法use()来注册使用vue-router</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Vue.use(VRouter);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;4、实例化全局router  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">let router&#x3D;new VRouter(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   &#x2F;&#x2F;以下是路由map</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    routes:[</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            path:&#39;&#x2F;apple&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            component:Apple</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            path:&#39;&#x2F;banana&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            component:Banana</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  el: &#39;#app&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  router,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F;3、注册组件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  components: &#123; App,VRouter &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure><h2 id="3-路由视图"><a href="#3-路由视图" class="headerlink" title="3. 路由视图"></a>3. 路由视图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span></pre></td></tr></table></figure><h2 id="4-路由导航"><a href="#4-路由导航" class="headerlink" title="4. 路由导航"></a>4. 路由导航</h2><h3 id="4-1-使用-lt-router-link-gt-创建-a-标签来定义导航链接"><a href="#4-1-使用-lt-router-link-gt-创建-a-标签来定义导航链接" class="headerlink" title="4.1 使用&lt;router-link&gt; 创建 a 标签来定义导航链接"></a>4.1 使用<code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;path:&#39;apple&#39;&#125;&quot;&gt; to apple&lt;&#x2F;router-link&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;path:&#39;banana&#39;&#125;&quot;&gt;to apple&lt;&#x2F;router-link&gt;</span></pre></td></tr></table></figure><h3 id="4-2-使用-router-push-方法"><a href="#4-2-使用-router-push-方法" class="headerlink" title="4.2 使用 router.push 方法"></a>4.2 使用 router.push 方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">router.push(&#123; path: &#39;apple&#39; &#125;)</span></pre></td></tr></table></figure><p>注：点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 router.push(…)</p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><p><a href="https://www.cnblogs.com/superlizhao/p/8515640.html">Vue-初步了解vue-router的三要素：路由map 、路由视图、路由导航</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、Vue路由传参query和params的区别&quot;&gt;&lt;a href=&quot;#一、Vue路由传参query和params的区别&quot; class=&quot;headerlink&quot; title=&quot;一、Vue路由传参query和params的区别&quot;&gt;&lt;/a&gt;一、Vue路由传参query和params的区别&lt;/h1&gt;&lt;h2 id=&quot;1-区别&quot;&gt;&lt;a href=&quot;#1-区别&quot; class=&quot;headerlink&quot; title=&quot;1. 区别&quot;&gt;&lt;/a&gt;1. 区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;query使用path和name传参跳转都可以，而params只能使用name传参跳转&lt;/li&gt;
&lt;li&gt;传参跳转页面时，query和params不需要在路由上配参数就能在新的页面获取到参数&lt;/li&gt;
&lt;li&gt;但params不在路由配参数的话，当用户刷新当前页面的时候，参数就会消失。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-样例&quot;&gt;&lt;a href=&quot;#2-样例&quot; class=&quot;headerlink&quot; title=&quot;2. 样例&quot;&gt;&lt;/a&gt;2. 样例&lt;/h2&gt;&lt;h3 id=&quot;2-1-query传参&quot;&gt;&lt;a href=&quot;#2-1-query传参&quot; class=&quot;headerlink&quot; title=&quot;2.1 query传参&quot;&gt;&lt;/a&gt;2.1 query传参&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;在方法里面写 也可以用name&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;this.$router.push(&amp;#123; path:&amp;#39;&amp;#x2F;search&amp;#39;, query: &amp;#123; categoryId: this.categoryId &amp;#125;&amp;#125;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F; router-link里面的to&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;router-link :to&amp;#x3D;&amp;quot;&amp;#123;path:&amp;#39;&amp;#x2F;search&amp;#39;,query: &amp;#123;categoryId: item.categoryId&amp;#125;&amp;#125;&amp;quot;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;接收参数：this.categoryId &amp;#x3D; this.$route.query.categoryId ;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="VUE整理" scheme="https://ming-clavin.github.io/categories/VUE%E6%95%B4%E7%90%86/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="VUE" scheme="https://ming-clavin.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>img和div之间有间隙的原因及解决方法</title>
    <link href="https://ming-clavin.github.io/2020/11/24/2020/img%E5%92%8Cdiv%E4%B9%8B%E9%97%B4%E6%9C%89%E9%97%B4%E9%9A%99%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://ming-clavin.github.io/2020/11/24/2020/img%E5%92%8Cdiv%E4%B9%8B%E9%97%B4%E6%9C%89%E9%97%B4%E9%9A%99%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2020-11-23T17:22:45.000Z</published>
    <updated>2020-11-23T17:26:27.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><br><p>问题：display:inline-block布局的元素在chrome<strong>下会出现几像素的间隙</strong></p><p>原因：div 中 存在 img标签，由于img标签的 <strong>display:inline-block</strong> 属性。</p><blockquote><p><strong>inline-block的“换行符/空格间隙问题”：</strong></p><p>​    在编辑器里写代码的时候，同级别的标签不写在同一行，以保持代码的整齐可读性。即inline-block布局的元素在编辑器里不在同一行，即存在换行符，当inline-block元素间有空格或是换行则会产生间隙。</p></blockquote><h1 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h1><h2 id="1-把img标签的display属性改成block："><a href="#1-把img标签的display属性改成block：" class="headerlink" title="1. 把img标签的display属性改成block："></a>1. 把img标签的display属性改成block：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">dispaly</span>:block;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><a id="more"></a><h2 id="2-把div中的字体大小设为0"><a href="#2-把div中的字体大小设为0" class="headerlink" title="2. 把div中的字体大小设为0"></a>2. 把div中的字体大小设为0</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attribute">font-size</span>:<span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="3-修改img的vertical-align属性"><a href="#3-修改img的vertical-align属性" class="headerlink" title="3. 修改img的vertical-align属性"></a>3. 修改img的vertical-align属性</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">vertical-align</span>:buttom; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">vertical-align</span>:middle; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">vertical-align</span>:top; &#125;</span></pre></td></tr></table></figure><h1 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h1><p><a href="https://www.cnblogs.com/vanstrict/p/4961300.html">div之间有间隙以及img和div之间有间隙的原因及解决方法</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;问题：display:inline-block布局的元素在chrome&lt;strong&gt;下会出现几像素的间隙&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原因：div 中 存在 img标签，由于img标签的 &lt;strong&gt;display:inline-block&lt;/strong&gt; 属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;inline-block的“换行符/空格间隙问题”：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    在编辑器里写代码的时候，同级别的标签不写在同一行，以保持代码的整齐可读性。即inline-block布局的元素在编辑器里不在同一行，即存在换行符，当inline-block元素间有空格或是换行则会产生间隙。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;二、解决方法&quot;&gt;&lt;a href=&quot;#二、解决方法&quot; class=&quot;headerlink&quot; title=&quot;二、解决方法&quot;&gt;&lt;/a&gt;二、解决方法&lt;/h1&gt;&lt;h2 id=&quot;1-把img标签的display属性改成block：&quot;&gt;&lt;a href=&quot;#1-把img标签的display属性改成block：&quot; class=&quot;headerlink&quot; title=&quot;1. 把img标签的display属性改成block：&quot;&gt;&lt;/a&gt;1. 把img标签的display属性改成block：&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;img&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;dispaly&lt;/span&gt;:block;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://ming-clavin.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>a标签去除默认样式</title>
    <link href="https://ming-clavin.github.io/2020/11/24/2020/a%E6%A0%87%E7%AD%BE%E5%8E%BB%E9%99%A4%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F/"/>
    <id>https://ming-clavin.github.io/2020/11/24/2020/a%E6%A0%87%E7%AD%BE%E5%8E%BB%E9%99%A4%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F/</id>
    <published>2020-11-23T16:57:10.000Z</published>
    <updated>2020-11-23T17:30:00.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、初始的链接"><a href="#一、初始的链接" class="headerlink" title="一、初始的链接"></a>一、初始的链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">text-decoration</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="二、正常的未被访问过的链接"><a href="#二、正常的未被访问过的链接" class="headerlink" title="二、正常的未被访问过的链接"></a>二、正常的未被访问过的链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">text-decoration</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="三、已经访问过的链接"><a href="#三、已经访问过的链接" class="headerlink" title="三、已经访问过的链接"></a>三、已经访问过的链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">text-decoration</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><a id="more"></a><h1 id="四、-鼠标划过-停留-的链接"><a href="#四、-鼠标划过-停留-的链接" class="headerlink" title="四、 鼠标划过(停留)的链接"></a>四、 鼠标划过(停留)的链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">text-decoration</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="五、-正在点击的链接"><a href="#五、-正在点击的链接" class="headerlink" title="五、 正在点击的链接"></a>五、 正在点击的链接</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">text-decoration</span>: none;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="六、-参考"><a href="#六、-参考" class="headerlink" title="六、 参考"></a>六、 参考</h1><p><a href="https://www.cnblogs.com/PHP0222wangdong/p/11360624.html"><code>&lt;a&gt;</code> 标签去除默认样式</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、初始的链接&quot;&gt;&lt;a href=&quot;#一、初始的链接&quot; class=&quot;headerlink&quot; title=&quot;一、初始的链接&quot;&gt;&lt;/a&gt;一、初始的链接&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;: none;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;二、正常的未被访问过的链接&quot;&gt;&lt;a href=&quot;#二、正常的未被访问过的链接&quot; class=&quot;headerlink&quot; title=&quot;二、正常的未被访问过的链接&quot;&gt;&lt;/a&gt;二、正常的未被访问过的链接&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:link&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;: none;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;三、已经访问过的链接&quot;&gt;&lt;a href=&quot;#三、已经访问过的链接&quot; class=&quot;headerlink&quot; title=&quot;三、已经访问过的链接&quot;&gt;&lt;/a&gt;三、已经访问过的链接&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:visited&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;: none;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="日常学习" scheme="https://ming-clavin.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://ming-clavin.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>积分商城（平台端）总结</title>
    <link href="https://ming-clavin.github.io/2020/11/24/2020/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E%EF%BC%88%E5%B9%B3%E5%8F%B0%E7%AB%AF%EF%BC%89%E6%80%BB%E7%BB%93/"/>
    <id>https://ming-clavin.github.io/2020/11/24/2020/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E%EF%BC%88%E5%B9%B3%E5%8F%B0%E7%AB%AF%EF%BC%89%E6%80%BB%E7%BB%93/</id>
    <published>2020-11-23T16:42:47.000Z</published>
    <updated>2020-11-23T16:49:31.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、将积分基础设置改入到后台设置"><a href="#一、将积分基础设置改入到后台设置" class="headerlink" title="一、将积分基础设置改入到后台设置"></a>一、将积分基础设置改入到后台设置</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116093153205.png" alt="image-20201116093153205"></p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116102416954.png" alt="image-20201116102416954" style="zoom: 67%;"><a id="more"></a><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116101951541.png" alt="image-20201116101951541"></p><h1 id="二、展开运算符"><a href="#二、展开运算符" class="headerlink" title="二、展开运算符"></a>二、展开运算符</h1><br><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/Snipaste_2020-11-09_17-54-23.png" alt="Snipaste_2020-11-09_17-54-23"></p><h1 id="三、ref-和-ref"><a href="#三、ref-和-ref" class="headerlink" title="三、ref 和 $ref"></a>三、ref 和 $ref</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116101631105.png" alt="image-20201116101631105" style="zoom: 67%;"><p>1、<strong>ref 需要在dom渲染完成后才会有</strong>，在使用的时候确保dom已经渲染完成。比如在生命周期 <strong>mounted(){} 钩子中调用</strong>，或者<strong>在 this.$nextTick(()=&gt;{}) 中调用</strong>。</p><p>2、如果ref 是循环出来的，<strong>有多个重名，那么ref的值会是一个数组</strong> ，此时要拿到单个的ref 只需要循环就可以了。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子 :"></a>例子 :</h2><h3 id="1-添加ref属性"><a href="#1-添加ref属性" class="headerlink" title="1.添加ref属性"></a>1.添加ref属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    &lt;h1 ref&#x3D;&quot;h1Ele&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    &lt;hello ref&#x3D;&quot;ho&quot;&gt;&lt;&#x2F;hello&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &lt;button @click&#x3D;&quot;getref&quot;&gt;获取H1元素&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;div&gt;</span></pre></td></tr></table></figure><h3 id="2-获取注册过-ref-的所有组件或元素"><a href="#2-获取注册过-ref-的所有组件或元素" class="headerlink" title="2.获取注册过 ref 的所有组件或元素"></a>2.获取注册过 ref 的所有组件或元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">methods: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        getref() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">          &#x2F;&#x2F; 表示从 $refs对象 中, 获取 ref 属性值为: h1ele DOM元素或组件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">           console.log(this.$refs.h1Ele.innerText);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">           this.$refs.h1ele.style.color &#x3D; &#39;red&#39;;&#x2F;&#x2F; 修改html样式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">          console.log(this.$refs.ho.msg);&#x2F;&#x2F; 获取组件数据</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">          console.log(this.$refs.ho.test);&#x2F;&#x2F; 获取组件的方法</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr></table></figure><h1 id="四、表单验证函数"><a href="#四、表单验证函数" class="headerlink" title="四、表单验证函数"></a>四、表单验证函数</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116103351424.png" alt="image-20201116103351424" style="zoom:67%;"><h1 id="五、表单重置函数"><a href="#五、表单重置函数" class="headerlink" title="五、表单重置函数"></a>五、表单重置函数</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116103926570.png" alt="image-20201116103926570" style="zoom: 80%;"><h1 id="六、服务器连接报错"><a href="#六、服务器连接报错" class="headerlink" title="六、服务器连接报错"></a>六、服务器连接报错</h1><br><blockquote><p>原因：连接的不是同一个内网</p></blockquote><p><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201116141314.png" alt="微信图片_20201116141314"></p><h1 id="七、常用-的意义"><a href="#七、常用-的意义" class="headerlink" title="七、常用 $ 的意义"></a>七、常用 $ 的意义</h1><br><ul><li>this.$data :  vm上的数据</li><li>this.$watch :  监控</li><li>this.$el :  当前el元素</li><li>this.$set :  后加的属性实现响应式变化</li><li>this.$nextTick :  异步方法，等待渲染dom完成后来获取vm</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">let vm &#x3D; new Vue(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        el:&#39;#app&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        data:&#123;msg:&#39;hello&#39;,arr:[1,2,3]&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        mounted()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            this.$nextTick(()&#x3D;&gt;&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                console.log(vm);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr></table></figure><h1 id="八、-emit的用法"><a href="#八、-emit的用法" class="headerlink" title="八、$emit的用法"></a>八、$emit的用法</h1><br><blockquote><p>父组件使用 <strong>props</strong> 把数据传给子组件。<br>子组件使用 <strong>$emit</strong> 触发父组件的自定义事件。</p></blockquote><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201117174623572.png" alt="image-20201117174623572" style="zoom:80%;"><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201117174838597.png" alt="image-20201117174838597" style="zoom:80%;"><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201117174940658.png" alt="image-20201117174940658" style="zoom:80%;"><h1 id="九、修改测试Bug的环境"><a href="#九、修改测试Bug的环境" class="headerlink" title="九、修改测试Bug的环境"></a>九、修改测试Bug的环境</h1><br><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120093830136.png" alt="image-20201120093830136" style="zoom: 80%;"><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120093943514.png" alt="image-20201120093943514" style="zoom:67%;"><h1 id="十、权限控制函数"><a href="#十、权限控制函数" class="headerlink" title="十、权限控制函数"></a>十、权限控制函数</h1><br><h2 id="1-isAuth-–-是否拥有指定权限"><a href="#1-isAuth-–-是否拥有指定权限" class="headerlink" title="1. isAuth – 是否拥有指定权限"></a>1. isAuth – 是否拥有指定权限</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120112615869.png" alt="image-20201120112615869" style="zoom:80%;"><h2 id="2-权限分配页面"><a href="#2-权限分配页面" class="headerlink" title="2. 权限分配页面"></a>2. 权限分配页面</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120113144503.png" alt="image-20201120113144503" style="zoom:80%;"><h2 id="3-修改权限页面"><a href="#3-修改权限页面" class="headerlink" title="3. 修改权限页面"></a>3. 修改权限页面</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120113354198.png" alt="image-20201120113354198" style="zoom: 50%;"><h1 id="十一、图片访问地址出错-–-字符串拼接导致"><a href="#十一、图片访问地址出错-–-字符串拼接导致" class="headerlink" title="十一、图片访问地址出错 – 字符串拼接导致"></a>十一、图片访问地址出错 – 字符串拼接导致</h1><h2 id="1-通过F12找到出错原因-–-字符串拼接错误"><a href="#1-通过F12找到出错原因-–-字符串拼接错误" class="headerlink" title="1. 通过F12找到出错原因 – 字符串拼接错误"></a>1. 通过F12找到出错原因 – 字符串拼接错误</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120140937640.png" alt="image-20201120140937640" style="zoom:80%;"><h2 id="2-找到路径文件的“src”，查找原因"><a href="#2-找到路径文件的“src”，查找原因" class="headerlink" title="2. 找到路径文件的“src”，查找原因"></a>2. 找到路径文件的“src”，查找原因</h2><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120141222061.png" alt="image-20201120141222061" style="zoom:80%;"><blockquote><p><strong>解决方法：</strong></p><p>与后端交接，让后端传的value为后面的值，而不是一整个地址</p></blockquote><img src="https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201120105245550.png" alt="image-20201120105245550" style="zoom:80%;">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、将积分基础设置改入到后台设置&quot;&gt;&lt;a href=&quot;#一、将积分基础设置改入到后台设置&quot; class=&quot;headerlink&quot; title=&quot;一、将积分基础设置改入到后台设置&quot;&gt;&lt;/a&gt;一、将积分基础设置改入到后台设置&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116093153205.png&quot; alt=&quot;image-20201116093153205&quot;&gt;&lt;/p&gt;
&lt;img src=&quot;https://calvin-typora-image.oss-cn-hangzhou.aliyuncs.com/img/image-20201116102416954.png&quot; alt=&quot;image-20201116102416954&quot; style=&quot;zoom: 67%;&quot;&gt;</summary>
    
    
    
    <category term="积分商城" scheme="https://ming-clavin.github.io/categories/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E/"/>
    
    
    <category term="前端" scheme="https://ming-clavin.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="VUE" scheme="https://ming-clavin.github.io/tags/VUE/"/>
    
    <category term="积分商城" scheme="https://ming-clavin.github.io/tags/%E7%A7%AF%E5%88%86%E5%95%86%E5%9F%8E/"/>
    
  </entry>
  
</feed>
